const global = window;
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var cjs$2 = {};

var cjs$1 = {};

Object.defineProperty(cjs$1, "__esModule", { value: true });
var getLocalStorage_1 = cjs$1.getLocalStorage = cjs$1.getLocalStorageOrThrow = cjs$1.getCrypto = cjs$1.getCryptoOrThrow = getLocation_1 = cjs$1.getLocation = cjs$1.getLocationOrThrow = getNavigator_1 = cjs$1.getNavigator = cjs$1.getNavigatorOrThrow = cjs$1.getDocument = cjs$1.getDocumentOrThrow = cjs$1.getFromWindowOrThrow = cjs$1.getFromWindow = void 0;
function getFromWindow(name) {
    let res = undefined;
    if (typeof window !== "undefined" && typeof window[name] !== "undefined") {
        res = window[name];
    }
    return res;
}
cjs$1.getFromWindow = getFromWindow;
function getFromWindowOrThrow(name) {
    const res = getFromWindow(name);
    if (!res) {
        throw new Error(`${name} is not defined in Window`);
    }
    return res;
}
cjs$1.getFromWindowOrThrow = getFromWindowOrThrow;
function getDocumentOrThrow() {
    return getFromWindowOrThrow("document");
}
cjs$1.getDocumentOrThrow = getDocumentOrThrow;
function getDocument() {
    return getFromWindow("document");
}
cjs$1.getDocument = getDocument;
function getNavigatorOrThrow() {
    return getFromWindowOrThrow("navigator");
}
cjs$1.getNavigatorOrThrow = getNavigatorOrThrow;
function getNavigator$1() {
    return getFromWindow("navigator");
}
var getNavigator_1 = cjs$1.getNavigator = getNavigator$1;
function getLocationOrThrow() {
    return getFromWindowOrThrow("location");
}
cjs$1.getLocationOrThrow = getLocationOrThrow;
function getLocation$1() {
    return getFromWindow("location");
}
var getLocation_1 = cjs$1.getLocation = getLocation$1;
function getCryptoOrThrow() {
    return getFromWindowOrThrow("crypto");
}
cjs$1.getCryptoOrThrow = getCryptoOrThrow;
function getCrypto() {
    return getFromWindow("crypto");
}
cjs$1.getCrypto = getCrypto;
function getLocalStorageOrThrow() {
    return getFromWindowOrThrow("localStorage");
}
cjs$1.getLocalStorageOrThrow = getLocalStorageOrThrow;
function getLocalStorage$1() {
    return getFromWindow("localStorage");
}
getLocalStorage_1 = cjs$1.getLocalStorage = getLocalStorage$1;

Object.defineProperty(cjs$2, "__esModule", { value: true });
var getWindowMetadata_1 = cjs$2.getWindowMetadata = void 0;
const window_getters_1 = cjs$1;
function getWindowMetadata() {
    let doc;
    let loc;
    try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
    }
    catch (e) {
        return null;
    }
    function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons = [];
        for (let i = 0; i < links.length; i++) {
            const link = links[i];
            const rel = link.getAttribute("rel");
            if (rel) {
                if (rel.toLowerCase().indexOf("icon") > -1) {
                    const href = link.getAttribute("href");
                    if (href) {
                        if (href.toLowerCase().indexOf("https:") === -1 &&
                            href.toLowerCase().indexOf("http:") === -1 &&
                            href.indexOf("//") !== 0) {
                            let absoluteHref = loc.protocol + "//" + loc.host;
                            if (href.indexOf("/") === 0) {
                                absoluteHref += href;
                            }
                            else {
                                const path = loc.pathname.split("/");
                                path.pop();
                                const finalPath = path.join("/");
                                absoluteHref += finalPath + "/" + href;
                            }
                            icons.push(absoluteHref);
                        }
                        else if (href.indexOf("//") === 0) {
                            const absoluteUrl = loc.protocol + href;
                            icons.push(absoluteUrl);
                        }
                        else {
                            icons.push(href);
                        }
                    }
                }
            }
        }
        return icons;
    }
    function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i = 0; i < metaTags.length; i++) {
            const tag = metaTags[i];
            const attributes = ["itemprop", "property", "name"]
                .map((target) => tag.getAttribute(target))
                .filter((attr) => {
                if (attr) {
                    return args.includes(attr);
                }
                return false;
            });
            if (attributes.length && attributes) {
                const content = tag.getAttribute("content");
                if (content) {
                    return content;
                }
            }
        }
        return "";
    }
    function getName() {
        let name = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name) {
            name = doc.title;
        }
        return name;
    }
    function getDescription() {
        const description = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description;
    }
    const name = getName();
    const description = getDescription();
    const url = loc.origin;
    const icons = getIcons();
    const meta = {
        description,
        url,
        icons,
        name,
    };
    return meta;
}
getWindowMetadata_1 = cjs$2.getWindowMetadata = getWindowMetadata;

var __spreadArrays$1 = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var BrowserInfo = /** @class */ (function () {
    function BrowserInfo(name, version, os) {
        this.name = name;
        this.version = version;
        this.os = os;
        this.type = 'browser';
    }
    return BrowserInfo;
}());
var NodeInfo = /** @class */ (function () {
    function NodeInfo(version) {
        this.version = version;
        this.type = 'node';
        this.name = 'node';
        this.os = process.platform;
    }
    return NodeInfo;
}());
var SearchBotDeviceInfo = /** @class */ (function () {
    function SearchBotDeviceInfo(name, version, os, bot) {
        this.name = name;
        this.version = version;
        this.os = os;
        this.bot = bot;
        this.type = 'bot-device';
    }
    return SearchBotDeviceInfo;
}());
var BotInfo = /** @class */ (function () {
    function BotInfo() {
        this.type = 'bot';
        this.bot = true; // NOTE: deprecated test name instead
        this.name = 'bot';
        this.version = null;
        this.os = null;
    }
    return BotInfo;
}());
var ReactNativeInfo = /** @class */ (function () {
    function ReactNativeInfo() {
        this.type = 'react-native';
        this.name = 'react-native';
        this.version = null;
        this.os = null;
    }
    return ReactNativeInfo;
}());
// tslint:disable-next-line:max-line-length
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
    ['aol', /AOLShield\/([0-9\._]+)/],
    ['edge', /Edge\/([0-9\._]+)/],
    ['edge-ios', /EdgiOS\/([0-9\._]+)/],
    ['yandexbrowser', /YaBrowser\/([0-9\._]+)/],
    ['kakaotalk', /KAKAOTALK\s([0-9\.]+)/],
    ['samsung', /SamsungBrowser\/([0-9\.]+)/],
    ['silk', /\bSilk\/([0-9._-]+)\b/],
    ['miui', /MiuiBrowser\/([0-9\.]+)$/],
    ['beaker', /BeakerBrowser\/([0-9\.]+)/],
    ['edge-chromium', /EdgA?\/([0-9\.]+)/],
    [
        'chromium-webview',
        /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/,
    ],
    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
    ['phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/],
    ['crios', /CriOS\/([0-9\.]+)(:?\s|$)/],
    ['firefox', /Firefox\/([0-9\.]+)(?:\s|$)/],
    ['fxios', /FxiOS\/([0-9\.]+)/],
    ['opera-mini', /Opera Mini.*Version\/([0-9\.]+)/],
    ['opera', /Opera\/([0-9\.]+)(?:\s|$)/],
    ['opera', /OPR\/([0-9\.]+)(:?\s|$)/],
    ['ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
    ['ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
    ['ie', /MSIE\s(7\.0)/],
    ['bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/],
    ['android', /Android\s([0-9\.]+)/],
    ['ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/],
    ['safari', /Version\/([0-9\._]+).*Safari/],
    ['facebook', /FBAV\/([0-9\.]+)/],
    ['instagram', /Instagram\s([0-9\.]+)/],
    ['ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/],
    ['ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
    ['searchbot', SEARCHBOX_UA_REGEX],
];
var operatingSystemRules = [
    ['iOS', /iP(hone|od|ad)/],
    ['Android OS', /Android/],
    ['BlackBerry OS', /BlackBerry|BB10/],
    ['Windows Mobile', /IEMobile/],
    ['Amazon OS', /Kindle/],
    ['Windows 3.11', /Win16/],
    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],
    ['Windows 98', /(Windows 98)|(Win98)/],
    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],
    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],
    ['Windows Server 2003', /(Windows NT 5.2)/],
    ['Windows Vista', /(Windows NT 6.0)/],
    ['Windows 7', /(Windows NT 6.1)/],
    ['Windows 8', /(Windows NT 6.2)/],
    ['Windows 8.1', /(Windows NT 6.3)/],
    ['Windows 10', /(Windows NT 10.0)/],
    ['Windows ME', /Windows ME/],
    ['Open BSD', /OpenBSD/],
    ['Sun OS', /SunOS/],
    ['Chrome OS', /CrOS/],
    ['Linux', /(Linux)|(X11)/],
    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],
    ['QNX', /QNX/],
    ['BeOS', /BeOS/],
    ['OS/2', /OS\/2/],
];
function detect(userAgent) {
    if (typeof document === 'undefined' &&
        typeof navigator !== 'undefined' &&
        navigator.product === 'ReactNative') {
        return new ReactNativeInfo();
    }
    if (typeof navigator !== 'undefined') {
        return parseUserAgent(navigator.userAgent);
    }
    return getNodeVersion();
}
function matchUserAgent(ua) {
    // opted for using reduce here rather than Array#first with a regex.test call
    // this is primarily because using the reduce we only perform the regex
    // execution once rather than once for the test and for the exec again below
    // probably something that needs to be benchmarked though
    return (ua !== '' &&
        userAgentRules.reduce(function (matched, _a) {
            var browser = _a[0], regex = _a[1];
            if (matched) {
                return matched;
            }
            var uaMatch = regex.exec(ua);
            return !!uaMatch && [browser, uaMatch];
        }, false));
}
function parseUserAgent(ua) {
    var matchedRule = matchUserAgent(ua);
    if (!matchedRule) {
        return null;
    }
    var name = matchedRule[0], match = matchedRule[1];
    if (name === 'searchbot') {
        return new BotInfo();
    }
    var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);
    if (versionParts) {
        if (versionParts.length < REQUIRED_VERSION_PARTS) {
            versionParts = __spreadArrays$1(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));
        }
    }
    else {
        versionParts = [];
    }
    var version = versionParts.join('.');
    var os = detectOS$1(ua);
    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
    if (searchBotMatch && searchBotMatch[1]) {
        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);
    }
    return new BrowserInfo(name, version, os);
}
function detectOS$1(ua) {
    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];
        var match = regex.exec(ua);
        if (match) {
            return os;
        }
    }
    return null;
}
function getNodeVersion() {
    var isNode = typeof process !== 'undefined' && process.version;
    return isNode ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
    var output = [];
    for (var ii = 0; ii < count; ii++) {
        output.push('0');
    }
    return output;
}

function detectEnv(userAgent) {
    return detect();
}
function detectOS() {
    const env = detectEnv();
    return env && env.os ? env.os : undefined;
}
function isAndroid() {
    const os = detectOS();
    return os ? os.toLowerCase().includes("android") : false;
}
function isIOS() {
    const os = detectOS();
    return os
        ? os.toLowerCase().includes("ios") ||
            (os.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1)
        : false;
}
function isMobile() {
    const os = detectOS();
    return os ? isAndroid() || isIOS() : false;
}
function isNode$1() {
    const env = detectEnv();
    const result = env && env.name ? env.name.toLowerCase() === "node" : false;
    return result;
}
function isBrowser() {
    const result = !isNode$1() && !!getNavigator();
    return result;
}
const getNavigator = getNavigator_1;
const getLocation = getLocation_1;
const getLocalStorage = getLocalStorage_1;
function getClientMeta() {
    return getWindowMetadata_1();
}

function safeJsonParse$1(value) {
    if (typeof value !== "string") {
        throw new Error(`Cannot safe json parse value of type ${typeof value}`);
    }
    try {
        return JSON.parse(value);
    }
    catch (_a) {
        return value;
    }
}
function safeJsonStringify$1(value) {
    return typeof value === "string" ? value : JSON.stringify(value);
}

const safeJsonParse = safeJsonParse$1;
const safeJsonStringify = safeJsonStringify$1;

function setLocal(key, data) {
    const raw = safeJsonStringify(data);
    const local = getLocalStorage();
    if (local) {
        local.setItem(key, raw);
    }
}
function getLocal(key) {
    let data = null;
    let raw = null;
    const local = getLocalStorage();
    if (local) {
        raw = local.getItem(key);
    }
    data = raw ? safeJsonParse(raw) : raw;
    return data;
}
function removeLocal(key) {
    const local = getLocalStorage();
    if (local) {
        local.removeItem(key);
    }
}

const mobileLinkChoiceKey = "WALLETCONNECT_DEEPLINK_CHOICE";

const reservedEvents = [
    "session_request",
    "session_update",
    "exchange_key",
    "connect",
    "disconnect",
    "display_uri",
    "modal_closed",
    "transport_open",
    "transport_close",
    "transport_error",
];
const signingMethods = [
    "eth_sendTransaction",
    "eth_signTransaction",
    "eth_sign",
    "eth_signTypedData",
    "eth_signTypedData_v1",
    "eth_signTypedData_v2",
    "eth_signTypedData_v3",
    "eth_signTypedData_v4",
    "personal_sign",
    "wallet_addEthereumChain",
    "wallet_switchEthereumChain",
    "wallet_getPermissions",
    "wallet_requestPermissions",
    "wallet_registerOnboarding",
    "wallet_watchAsset",
    "wallet_scanQRCode",
];

var bn = {exports: {}};

var _nodeResolve_empty = {};

var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	default: _nodeResolve_empty
});

var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

bn.exports;

(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    Buffer = require$$0$1.Buffer;
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	    }

	    if (base === 16) {
	      this._parseHex(number, start);
	    } else {
	      this._parseBase(number, base, start);
	    }

	    if (number[0] === '-') {
	      this.negative = 1;
	    }

	    this.strip();

	    if (endian !== 'le') return;

	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [ number & 0x3ffffff ];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [ 0 ];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this.strip();
	  };

	  function parseHex (str, start, end) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r <<= 4;

	      // 'a' - 'f'
	      if (c >= 49 && c <= 54) {
	        r |= c - 49 + 0xa;

	      // 'A' - 'F'
	      } else if (c >= 17 && c <= 22) {
	        r |= c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r |= c & 0xf;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    // Scan 24-bit chunks and add them to the number
	    var off = 0;
	    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
	      w = parseHex(number, i, i + 6);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
	      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	      off += 24;
	      if (off >= 26) {
	        off -= 26;
	        j++;
	      }
	    }
	    if (i + 6 !== start) {
	      w = parseHex(number, start, i + 6);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	    }
	    this.strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        r += c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        r += c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r += c;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [ 0 ];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype.strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  BN.prototype.inspect = function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  };

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16);
	  };

	  BN.prototype.toBuffer = function toBuffer (endian, length) {
	    assert(typeof Buffer !== 'undefined');
	    return this.toArrayLike(Buffer, endian, length);
	  };

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    this.strip();
	    var littleEndian = endian === 'le';
	    var res = new ArrayType(reqLength);

	    var b, i;
	    var q = this.clone();
	    if (!littleEndian) {
	      // Assume big-endian
	      for (i = 0; i < reqLength - byteLength; i++) {
	        res[i] = 0;
	      }

	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[reqLength - i - 1] = b;
	      }
	    } else {
	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[i] = b;
	      }

	      for (; i < reqLength; i++) {
	        res[i] = 0;
	      }
	    }

	    return res;
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this.strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this.strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this.strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this.strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this.strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this.strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  function jumboMulTo (self, num, out) {
	    var fftm = new FFTM();
	    return fftm.mulp(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion

	  function FFTM (x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  FFTM.prototype.makeRBT = function makeRBT (N) {
	    var t = new Array(N);
	    var l = BN.prototype._countBits(N) - 1;
	    for (var i = 0; i < N; i++) {
	      t[i] = this.revBin(i, l, N);
	    }

	    return t;
	  };

	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
	    if (x === 0 || x === N - 1) return x;

	    var rb = 0;
	    for (var i = 0; i < l; i++) {
	      rb |= (x & 1) << (l - i - 1);
	      x >>= 1;
	    }

	    return rb;
	  };

	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
	    for (var i = 0; i < N; i++) {
	      rtws[i] = rws[rbt[i]];
	      itws[i] = iws[rbt[i]];
	    }
	  };

	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
	    this.permute(rbt, rws, iws, rtws, itws, N);

	    for (var s = 1; s < N; s <<= 1) {
	      var l = s << 1;

	      var rtwdf = Math.cos(2 * Math.PI / l);
	      var itwdf = Math.sin(2 * Math.PI / l);

	      for (var p = 0; p < N; p += l) {
	        var rtwdf_ = rtwdf;
	        var itwdf_ = itwdf;

	        for (var j = 0; j < s; j++) {
	          var re = rtws[p + j];
	          var ie = itws[p + j];

	          var ro = rtws[p + j + s];
	          var io = itws[p + j + s];

	          var rx = rtwdf_ * ro - itwdf_ * io;

	          io = rtwdf_ * io + itwdf_ * ro;
	          ro = rx;

	          rtws[p + j] = re + ro;
	          itws[p + j] = ie + io;

	          rtws[p + j + s] = re - ro;
	          itws[p + j + s] = ie - io;

	          /* jshint maxdepth : false */
	          if (j !== l) {
	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
	            rtwdf_ = rx;
	          }
	        }
	      }
	    }
	  };

	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
	    var N = Math.max(m, n) | 1;
	    var odd = N & 1;
	    var i = 0;
	    for (N = N / 2 | 0; N; N = N >>> 1) {
	      i++;
	    }

	    return 1 << i + 1 + odd;
	  };

	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
	    if (N <= 1) return;

	    for (var i = 0; i < N / 2; i++) {
	      var t = rws[i];

	      rws[i] = rws[N - i - 1];
	      rws[N - i - 1] = t;

	      t = iws[i];

	      iws[i] = -iws[N - i - 1];
	      iws[N - i - 1] = -t;
	    }
	  };

	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
	    var carry = 0;
	    for (var i = 0; i < N / 2; i++) {
	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
	        Math.round(ws[2 * i] / N) +
	        carry;

	      ws[i] = w & 0x3ffffff;

	      if (w < 0x4000000) {
	        carry = 0;
	      } else {
	        carry = w / 0x4000000 | 0;
	      }
	    }

	    return ws;
	  };

	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
	    var carry = 0;
	    for (var i = 0; i < len; i++) {
	      carry = carry + (ws[i] | 0);

	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
	    }

	    // Pad with zeroes
	    for (i = 2 * len; i < N; ++i) {
	      rws[i] = 0;
	    }

	    assert(carry === 0);
	    assert((carry & -8192) === 0);
	  };

	  FFTM.prototype.stub = function stub (N) {
	    var ph = new Array(N);
	    for (var i = 0; i < N; i++) {
	      ph[i] = 0;
	    }

	    return ph;
	  };

	  FFTM.prototype.mulp = function mulp (x, y, out) {
	    var N = 2 * this.guessLen13b(x.length, y.length);

	    var rbt = this.makeRBT(N);

	    var _ = this.stub(N);

	    var rws = new Array(N);
	    var rwst = new Array(N);
	    var iwst = new Array(N);

	    var nrws = new Array(N);
	    var nrwst = new Array(N);
	    var niwst = new Array(N);

	    var rmws = out.words;
	    rmws.length = N;

	    this.convert13b(x.words, x.length, rws, N);
	    this.convert13b(y.words, y.length, nrws, N);

	    this.transform(rws, _, rwst, iwst, N, rbt);
	    this.transform(nrws, _, nrwst, niwst, N, rbt);

	    for (var i = 0; i < N; i++) {
	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
	      rwst[i] = rx;
	    }

	    this.conjugate(rwst, iwst, N);
	    this.transform(rwst, iwst, rmws, _, N, rbt);
	    this.conjugate(rmws, _, N);
	    this.normalize13b(rmws, N);

	    out.negative = x.negative ^ y.negative;
	    out.length = x.length + y.length;
	    return out.strip();
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this.strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) < num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this.strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this.strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this.strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q.strip();
	    }
	    a.strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modn = function modn (num) {
	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return acc;
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    return this.strip();
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this.strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      r.strip();
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	    return a.umod(this.m)._forceRed(this);
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal); 
} (bn));

var bnExports = bn.exports;
var BN = /*@__PURE__*/getDefaultExportFromCjs(bnExports);

var isTypedarray      = isTypedArray$1;
isTypedArray$1.strict = isStrictTypedArray;
isTypedArray$1.loose  = isLooseTypedArray;

var toString = Object.prototype.toString;
var names = {
    '[object Int8Array]': true
  , '[object Int16Array]': true
  , '[object Int32Array]': true
  , '[object Uint8Array]': true
  , '[object Uint8ClampedArray]': true
  , '[object Uint16Array]': true
  , '[object Uint32Array]': true
  , '[object Float32Array]': true
  , '[object Float64Array]': true
};

function isTypedArray$1(arr) {
  return (
       isStrictTypedArray(arr)
    || isLooseTypedArray(arr)
  )
}

function isStrictTypedArray(arr) {
  return (
       arr instanceof Int8Array
    || arr instanceof Int16Array
    || arr instanceof Int32Array
    || arr instanceof Uint8Array
    || arr instanceof Uint8ClampedArray
    || arr instanceof Uint16Array
    || arr instanceof Uint32Array
    || arr instanceof Float32Array
    || arr instanceof Float64Array
  )
}

function isLooseTypedArray(arr) {
  return names[toString.call(arr)]
}

/**
 * Convert a typed array to a Buffer without a copy
 *
 * Author:   Feross Aboukhadijeh <https://feross.org>
 * License:  MIT
 *
 * `npm install typedarray-to-buffer`
 */

var isTypedArray = isTypedarray.strict;

var typedarrayToBuffer = function typedarrayToBuffer (arr) {
  if (isTypedArray(arr)) {
    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer
    var buf = Buffer.from(arr.buffer);
    if (arr.byteLength !== arr.buffer.byteLength) {
      // Respect the "view", i.e. byteOffset and byteLength, without doing a copy
      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);
    }
    return buf
  } else {
    // Pass through all other types to `Buffer.from`
    return Buffer.from(arr)
  }
};

var typedArrayToBuffer = /*@__PURE__*/getDefaultExportFromCjs(typedarrayToBuffer);

const ENC_HEX = "hex";
const ENC_UTF8 = "utf8";
const STRING_ZERO = "0";
function bufferToArray(buf) {
    return new Uint8Array(buf);
}
function bufferToHex(buf, prefixed = false) {
    const hex = buf.toString(ENC_HEX);
    return prefixed ? addHexPrefix(hex) : hex;
}
function bufferToUtf8(buf) {
    return buf.toString(ENC_UTF8);
}
function arrayToBuffer(arr) {
    return typedArrayToBuffer(arr);
}
function arrayToHex(arr, prefixed = false) {
    return bufferToHex(arrayToBuffer(arr), prefixed);
}
function arrayToUtf8(arr) {
    return bufferToUtf8(arrayToBuffer(arr));
}
function hexToBuffer(hex) {
    return Buffer.from(removeHexPrefix(hex), ENC_HEX);
}
function hexToArray(hex) {
    return bufferToArray(hexToBuffer(hex));
}
function utf8ToBuffer(utf8) {
    return Buffer.from(utf8, ENC_UTF8);
}
function utf8ToArray(utf8) {
    return bufferToArray(utf8ToBuffer(utf8));
}
function utf8ToHex(utf8, prefixed = false) {
    return bufferToHex(utf8ToBuffer(utf8), prefixed);
}
function isHexString$1(str, length) {
    if (typeof str !== "string" || !str.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
    }
    return true;
}
function concatArrays$1(...args) {
    let result = [];
    args.forEach(arg => (result = result.concat(Array.from(arg))));
    return new Uint8Array([...result]);
}
function calcByteLength(length, byteSize = 8) {
    const remainder = length % byteSize;
    return remainder
        ? ((length - remainder) / byteSize) * byteSize + byteSize
        : length;
}
function sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {
    return padLeft(str, calcByteLength(str.length, byteSize), padding);
}
function padLeft(str, length, padding = STRING_ZERO) {
    return padString(str, length, true, padding);
}
function removeHexPrefix(hex) {
    return hex.replace(/^0x/, "");
}
function addHexPrefix(hex) {
    return hex.startsWith("0x") ? hex : `0x${hex}`;
}
function sanitizeHex$1(hex) {
    hex = removeHexPrefix(hex);
    hex = sanitizeBytes(hex, 2);
    if (hex) {
        hex = addHexPrefix(hex);
    }
    return hex;
}
function removeHexLeadingZeros$1(hex) {
    const prefixed = hex.startsWith("0x");
    hex = removeHexPrefix(hex);
    hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;
    return prefixed ? addHexPrefix(hex) : hex;
}
function padString(str, length, left, padding = STRING_ZERO) {
    const diff = length - str.length;
    let result = str;
    if (diff > 0) {
        const pad = padding.repeat(diff);
        result = pad + str ;
    }
    return result;
}

function convertArrayBufferToBuffer(arrBuf) {
    return arrayToBuffer(new Uint8Array(arrBuf));
}
function convertArrayBufferToHex(arrBuf, noPrefix) {
    return arrayToHex(new Uint8Array(arrBuf), false);
}
function convertBufferToArrayBuffer(buf) {
    return bufferToArray(buf).buffer;
}
function convertUtf8ToBuffer(utf8) {
    return utf8ToBuffer(utf8);
}
function convertUtf8ToHex(utf8, noPrefix) {
    return utf8ToHex(utf8, true);
}
function convertHexToArrayBuffer(hex) {
    return hexToArray(hex).buffer;
}
function convertNumberToHex(num, noPrefix) {
    const hex = removeHexPrefix(sanitizeHex$1(new BN(num).toString(16)));
    return noPrefix ? hex : addHexPrefix(hex);
}

var sha3 = {exports: {}};

/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */

(function (module) {
	/*jslint bitwise: true */
	(function () {

	  var INPUT_ERROR = 'input is invalid type';
	  var FINALIZE_ERROR = 'finalize already called';
	  var WINDOW = typeof window === 'object';
	  var root = WINDOW ? window : {};
	  if (root.JS_SHA3_NO_WINDOW) {
	    WINDOW = false;
	  }
	  var WEB_WORKER = !WINDOW && typeof self === 'object';
	  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
	  if (NODE_JS) {
	    root = commonjsGlobal;
	  } else if (WEB_WORKER) {
	    root = self;
	  }
	  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
	  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
	  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
	  var PADDING = [6, 1536, 393216, 100663296];
	  var SHIFT = [0, 8, 16, 24];
	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
	    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
	    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
	    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
	    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
	  var BITS = [224, 256, 384, 512];
	  var SHAKE_BITS = [128, 256];
	  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
	  var CSHAKE_BYTEPAD = {
	    '128': 168,
	    '256': 136
	  };

	  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
	    Array.isArray = function (obj) {
	      return Object.prototype.toString.call(obj) === '[object Array]';
	    };
	  }

	  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
	    ArrayBuffer.isView = function (obj) {
	      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
	    };
	  }

	  var createOutputMethod = function (bits, padding, outputType) {
	    return function (message) {
	      return new Keccak(bits, padding, bits).update(message)[outputType]();
	    };
	  };

	  var createShakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits) {
	      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
	    };
	  };

	  var createCshakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits, n, s) {
	      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
	    };
	  };

	  var createKmacOutputMethod = function (bits, padding, outputType) {
	    return function (key, message, outputBits, s) {
	      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
	    };
	  };

	  var createOutputMethods = function (method, createMethod, bits, padding) {
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createMethod(bits, padding, type);
	    }
	    return method;
	  };

	  var createMethod = function (bits, padding) {
	    var method = createOutputMethod(bits, padding, 'hex');
	    method.create = function () {
	      return new Keccak(bits, padding, bits);
	    };
	    method.update = function (message) {
	      return method.create().update(message);
	    };
	    return createOutputMethods(method, createOutputMethod, bits, padding);
	  };

	  var createShakeMethod = function (bits, padding) {
	    var method = createShakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits) {
	      return new Keccak(bits, padding, outputBits);
	    };
	    method.update = function (message, outputBits) {
	      return method.create(outputBits).update(message);
	    };
	    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
	  };

	  var createCshakeMethod = function (bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createCshakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits, n, s) {
	      if (!n && !s) {
	        return methods['shake' + bits].create(outputBits);
	      } else {
	        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
	      }
	    };
	    method.update = function (message, outputBits, n, s) {
	      return method.create(outputBits, n, s).update(message);
	    };
	    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
	  };

	  var createKmacMethod = function (bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createKmacOutputMethod(bits, padding, 'hex');
	    method.create = function (key, outputBits, s) {
	      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
	    };
	    method.update = function (key, message, outputBits, s) {
	      return method.create(key, outputBits, s).update(message);
	    };
	    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
	  };

	  var algorithms = [
	    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
	    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
	    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
	    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
	    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
	  ];

	  var methods = {}, methodNames = [];

	  for (var i = 0; i < algorithms.length; ++i) {
	    var algorithm = algorithms[i];
	    var bits = algorithm.bits;
	    for (var j = 0; j < bits.length; ++j) {
	      var methodName = algorithm.name + '_' + bits[j];
	      methodNames.push(methodName);
	      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
	      if (algorithm.name !== 'sha3') {
	        var newMethodName = algorithm.name + bits[j];
	        methodNames.push(newMethodName);
	        methods[newMethodName] = methods[methodName];
	      }
	    }
	  }

	  function Keccak(bits, padding, outputBits) {
	    this.blocks = [];
	    this.s = [];
	    this.padding = padding;
	    this.outputBits = outputBits;
	    this.reset = true;
	    this.finalized = false;
	    this.block = 0;
	    this.start = 0;
	    this.blockCount = (1600 - (bits << 1)) >> 5;
	    this.byteCount = this.blockCount << 2;
	    this.outputBlocks = outputBits >> 5;
	    this.extraBytes = (outputBits & 31) >> 3;

	    for (var i = 0; i < 50; ++i) {
	      this.s[i] = 0;
	    }
	  }

	  Keccak.prototype.update = function (message) {
	    if (this.finalized) {
	      throw new Error(FINALIZE_ERROR);
	    }
	    var notString, type = typeof message;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (message === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
	          message = new Uint8Array(message);
	        } else if (!Array.isArray(message)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
	      blockCount = this.blockCount, index = 0, s = this.s, i, code;

	    while (index < length) {
	      if (this.reset) {
	        this.reset = false;
	        blocks[0] = this.block;
	        for (i = 1; i < blockCount + 1; ++i) {
	          blocks[i] = 0;
	        }
	      }
	      if (notString) {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
	        }
	      } else {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          code = message.charCodeAt(index);
	          if (code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          }
	        }
	      }
	      this.lastByteIndex = i;
	      if (i >= byteCount) {
	        this.start = i - byteCount;
	        this.block = blocks[blockCount];
	        for (i = 0; i < blockCount; ++i) {
	          s[i] ^= blocks[i];
	        }
	        f(s);
	        this.reset = true;
	      } else {
	        this.start = i;
	      }
	    }
	    return this;
	  };

	  Keccak.prototype.encode = function (x, right) {
	    var o = x & 255, n = 1;
	    var bytes = [o];
	    x = x >> 8;
	    o = x & 255;
	    while (o > 0) {
	      bytes.unshift(o);
	      x = x >> 8;
	      o = x & 255;
	      ++n;
	    }
	    if (right) {
	      bytes.push(n);
	    } else {
	      bytes.unshift(n);
	    }
	    this.update(bytes);
	    return bytes.length;
	  };

	  Keccak.prototype.encodeString = function (str) {
	    var notString, type = typeof str;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (str === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
	          str = new Uint8Array(str);
	        } else if (!Array.isArray(str)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var bytes = 0, length = str.length;
	    if (notString) {
	      bytes = length;
	    } else {
	      for (var i = 0; i < str.length; ++i) {
	        var code = str.charCodeAt(i);
	        if (code < 0x80) {
	          bytes += 1;
	        } else if (code < 0x800) {
	          bytes += 2;
	        } else if (code < 0xd800 || code >= 0xe000) {
	          bytes += 3;
	        } else {
	          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
	          bytes += 4;
	        }
	      }
	    }
	    bytes += this.encode(bytes * 8);
	    this.update(str);
	    return bytes;
	  };

	  Keccak.prototype.bytepad = function (strs, w) {
	    var bytes = this.encode(w);
	    for (var i = 0; i < strs.length; ++i) {
	      bytes += this.encodeString(strs[i]);
	    }
	    var paddingBytes = w - bytes % w;
	    var zeros = [];
	    zeros.length = paddingBytes;
	    this.update(zeros);
	    return this;
	  };

	  Keccak.prototype.finalize = function () {
	    if (this.finalized) {
	      return;
	    }
	    this.finalized = true;
	    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
	    blocks[i >> 2] |= this.padding[i & 3];
	    if (this.lastByteIndex === this.byteCount) {
	      blocks[0] = blocks[blockCount];
	      for (i = 1; i < blockCount + 1; ++i) {
	        blocks[i] = 0;
	      }
	    }
	    blocks[blockCount - 1] |= 0x80000000;
	    for (i = 0; i < blockCount; ++i) {
	      s[i] ^= blocks[i];
	    }
	    f(s);
	  };

	  Keccak.prototype.toString = Keccak.prototype.hex = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var hex = '', block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        block = s[i];
	        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
	          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
	          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
	          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	        i = 0;
	      }
	    }
	    if (extraBytes) {
	      block = s[i];
	      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
	      if (extraBytes > 1) {
	        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
	      }
	      if (extraBytes > 2) {
	        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
	      }
	    }
	    return hex;
	  };

	  Keccak.prototype.arrayBuffer = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var bytes = this.outputBits >> 3;
	    var buffer;
	    if (extraBytes) {
	      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
	    } else {
	      buffer = new ArrayBuffer(bytes);
	    }
	    var array = new Uint32Array(buffer);
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        array[j] = s[i];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      array[i] = s[i];
	      buffer = buffer.slice(0, bytes);
	    }
	    return buffer;
	  };

	  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

	  Keccak.prototype.digest = Keccak.prototype.array = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var array = [], offset, block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        offset = j << 2;
	        block = s[i];
	        array[offset] = block & 0xFF;
	        array[offset + 1] = (block >> 8) & 0xFF;
	        array[offset + 2] = (block >> 16) & 0xFF;
	        array[offset + 3] = (block >> 24) & 0xFF;
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      offset = j << 2;
	      block = s[i];
	      array[offset] = block & 0xFF;
	      if (extraBytes > 1) {
	        array[offset + 1] = (block >> 8) & 0xFF;
	      }
	      if (extraBytes > 2) {
	        array[offset + 2] = (block >> 16) & 0xFF;
	      }
	    }
	    return array;
	  };

	  function Kmac(bits, padding, outputBits) {
	    Keccak.call(this, bits, padding, outputBits);
	  }

	  Kmac.prototype = new Keccak();

	  Kmac.prototype.finalize = function () {
	    this.encode(this.outputBits, true);
	    return Keccak.prototype.finalize.call(this);
	  };

	  var f = function (s) {
	    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
	      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
	      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
	      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
	    for (n = 0; n < 48; n += 2) {
	      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
	      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
	      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
	      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
	      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
	      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
	      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
	      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
	      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
	      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

	      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
	      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
	      s[0] ^= h;
	      s[1] ^= l;
	      s[10] ^= h;
	      s[11] ^= l;
	      s[20] ^= h;
	      s[21] ^= l;
	      s[30] ^= h;
	      s[31] ^= l;
	      s[40] ^= h;
	      s[41] ^= l;
	      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
	      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
	      s[2] ^= h;
	      s[3] ^= l;
	      s[12] ^= h;
	      s[13] ^= l;
	      s[22] ^= h;
	      s[23] ^= l;
	      s[32] ^= h;
	      s[33] ^= l;
	      s[42] ^= h;
	      s[43] ^= l;
	      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
	      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
	      s[4] ^= h;
	      s[5] ^= l;
	      s[14] ^= h;
	      s[15] ^= l;
	      s[24] ^= h;
	      s[25] ^= l;
	      s[34] ^= h;
	      s[35] ^= l;
	      s[44] ^= h;
	      s[45] ^= l;
	      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
	      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
	      s[6] ^= h;
	      s[7] ^= l;
	      s[16] ^= h;
	      s[17] ^= l;
	      s[26] ^= h;
	      s[27] ^= l;
	      s[36] ^= h;
	      s[37] ^= l;
	      s[46] ^= h;
	      s[47] ^= l;
	      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
	      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
	      s[8] ^= h;
	      s[9] ^= l;
	      s[18] ^= h;
	      s[19] ^= l;
	      s[28] ^= h;
	      s[29] ^= l;
	      s[38] ^= h;
	      s[39] ^= l;
	      s[48] ^= h;
	      s[49] ^= l;

	      b0 = s[0];
	      b1 = s[1];
	      b32 = (s[11] << 4) | (s[10] >>> 28);
	      b33 = (s[10] << 4) | (s[11] >>> 28);
	      b14 = (s[20] << 3) | (s[21] >>> 29);
	      b15 = (s[21] << 3) | (s[20] >>> 29);
	      b46 = (s[31] << 9) | (s[30] >>> 23);
	      b47 = (s[30] << 9) | (s[31] >>> 23);
	      b28 = (s[40] << 18) | (s[41] >>> 14);
	      b29 = (s[41] << 18) | (s[40] >>> 14);
	      b20 = (s[2] << 1) | (s[3] >>> 31);
	      b21 = (s[3] << 1) | (s[2] >>> 31);
	      b2 = (s[13] << 12) | (s[12] >>> 20);
	      b3 = (s[12] << 12) | (s[13] >>> 20);
	      b34 = (s[22] << 10) | (s[23] >>> 22);
	      b35 = (s[23] << 10) | (s[22] >>> 22);
	      b16 = (s[33] << 13) | (s[32] >>> 19);
	      b17 = (s[32] << 13) | (s[33] >>> 19);
	      b48 = (s[42] << 2) | (s[43] >>> 30);
	      b49 = (s[43] << 2) | (s[42] >>> 30);
	      b40 = (s[5] << 30) | (s[4] >>> 2);
	      b41 = (s[4] << 30) | (s[5] >>> 2);
	      b22 = (s[14] << 6) | (s[15] >>> 26);
	      b23 = (s[15] << 6) | (s[14] >>> 26);
	      b4 = (s[25] << 11) | (s[24] >>> 21);
	      b5 = (s[24] << 11) | (s[25] >>> 21);
	      b36 = (s[34] << 15) | (s[35] >>> 17);
	      b37 = (s[35] << 15) | (s[34] >>> 17);
	      b18 = (s[45] << 29) | (s[44] >>> 3);
	      b19 = (s[44] << 29) | (s[45] >>> 3);
	      b10 = (s[6] << 28) | (s[7] >>> 4);
	      b11 = (s[7] << 28) | (s[6] >>> 4);
	      b42 = (s[17] << 23) | (s[16] >>> 9);
	      b43 = (s[16] << 23) | (s[17] >>> 9);
	      b24 = (s[26] << 25) | (s[27] >>> 7);
	      b25 = (s[27] << 25) | (s[26] >>> 7);
	      b6 = (s[36] << 21) | (s[37] >>> 11);
	      b7 = (s[37] << 21) | (s[36] >>> 11);
	      b38 = (s[47] << 24) | (s[46] >>> 8);
	      b39 = (s[46] << 24) | (s[47] >>> 8);
	      b30 = (s[8] << 27) | (s[9] >>> 5);
	      b31 = (s[9] << 27) | (s[8] >>> 5);
	      b12 = (s[18] << 20) | (s[19] >>> 12);
	      b13 = (s[19] << 20) | (s[18] >>> 12);
	      b44 = (s[29] << 7) | (s[28] >>> 25);
	      b45 = (s[28] << 7) | (s[29] >>> 25);
	      b26 = (s[38] << 8) | (s[39] >>> 24);
	      b27 = (s[39] << 8) | (s[38] >>> 24);
	      b8 = (s[48] << 14) | (s[49] >>> 18);
	      b9 = (s[49] << 14) | (s[48] >>> 18);

	      s[0] = b0 ^ (~b2 & b4);
	      s[1] = b1 ^ (~b3 & b5);
	      s[10] = b10 ^ (~b12 & b14);
	      s[11] = b11 ^ (~b13 & b15);
	      s[20] = b20 ^ (~b22 & b24);
	      s[21] = b21 ^ (~b23 & b25);
	      s[30] = b30 ^ (~b32 & b34);
	      s[31] = b31 ^ (~b33 & b35);
	      s[40] = b40 ^ (~b42 & b44);
	      s[41] = b41 ^ (~b43 & b45);
	      s[2] = b2 ^ (~b4 & b6);
	      s[3] = b3 ^ (~b5 & b7);
	      s[12] = b12 ^ (~b14 & b16);
	      s[13] = b13 ^ (~b15 & b17);
	      s[22] = b22 ^ (~b24 & b26);
	      s[23] = b23 ^ (~b25 & b27);
	      s[32] = b32 ^ (~b34 & b36);
	      s[33] = b33 ^ (~b35 & b37);
	      s[42] = b42 ^ (~b44 & b46);
	      s[43] = b43 ^ (~b45 & b47);
	      s[4] = b4 ^ (~b6 & b8);
	      s[5] = b5 ^ (~b7 & b9);
	      s[14] = b14 ^ (~b16 & b18);
	      s[15] = b15 ^ (~b17 & b19);
	      s[24] = b24 ^ (~b26 & b28);
	      s[25] = b25 ^ (~b27 & b29);
	      s[34] = b34 ^ (~b36 & b38);
	      s[35] = b35 ^ (~b37 & b39);
	      s[44] = b44 ^ (~b46 & b48);
	      s[45] = b45 ^ (~b47 & b49);
	      s[6] = b6 ^ (~b8 & b0);
	      s[7] = b7 ^ (~b9 & b1);
	      s[16] = b16 ^ (~b18 & b10);
	      s[17] = b17 ^ (~b19 & b11);
	      s[26] = b26 ^ (~b28 & b20);
	      s[27] = b27 ^ (~b29 & b21);
	      s[36] = b36 ^ (~b38 & b30);
	      s[37] = b37 ^ (~b39 & b31);
	      s[46] = b46 ^ (~b48 & b40);
	      s[47] = b47 ^ (~b49 & b41);
	      s[8] = b8 ^ (~b0 & b2);
	      s[9] = b9 ^ (~b1 & b3);
	      s[18] = b18 ^ (~b10 & b12);
	      s[19] = b19 ^ (~b11 & b13);
	      s[28] = b28 ^ (~b20 & b22);
	      s[29] = b29 ^ (~b21 & b23);
	      s[38] = b38 ^ (~b30 & b32);
	      s[39] = b39 ^ (~b31 & b33);
	      s[48] = b48 ^ (~b40 & b42);
	      s[49] = b49 ^ (~b41 & b43);

	      s[0] ^= RC[n];
	      s[1] ^= RC[n + 1];
	    }
	  };

	  if (COMMON_JS) {
	    module.exports = methods;
	  } else {
	    for (i = 0; i < methodNames.length; ++i) {
	      root[methodNames[i]] = methods[methodNames[i]];
	    }
	  }
	})(); 
} (sha3));

var sha3Exports = sha3.exports;

var cjs = {};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends$1(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter$1(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator$1(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values$1(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}
function __await$1(v) {
    return this instanceof __await$1 ? (this.v = v, this) : new __await$1(v);
}

function __asyncGenerator$1(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await$1 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await$1(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues$1(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values$1 === "function" ? __values$1(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}

var tslib_es6 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	get __assign () { return __assign; },
	__asyncDelegator: __asyncDelegator,
	__asyncGenerator: __asyncGenerator$1,
	__asyncValues: __asyncValues$1,
	__await: __await$1,
	__awaiter: __awaiter$1,
	__classPrivateFieldGet: __classPrivateFieldGet,
	__classPrivateFieldSet: __classPrivateFieldSet,
	__createBinding: __createBinding,
	__decorate: __decorate,
	__exportStar: __exportStar,
	__extends: __extends$1,
	__generator: __generator$1,
	__importDefault: __importDefault,
	__importStar: __importStar,
	__makeTemplateObject: __makeTemplateObject,
	__metadata: __metadata,
	__param: __param,
	__read: __read,
	__rest: __rest,
	__spread: __spread,
	__spreadArrays: __spreadArrays,
	__values: __values$1
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(tslib_es6);

var crypto$1 = {};

var hasRequiredCrypto;

function requireCrypto () {
	if (hasRequiredCrypto) return crypto$1;
	hasRequiredCrypto = 1;
	Object.defineProperty(crypto$1, "__esModule", { value: true });
	crypto$1.isBrowserCryptoAvailable = crypto$1.getSubtleCrypto = crypto$1.getBrowerCrypto = void 0;
	function getBrowerCrypto() {
	    return (commonjsGlobal === null || commonjsGlobal === void 0 ? void 0 : commonjsGlobal.crypto) || (commonjsGlobal === null || commonjsGlobal === void 0 ? void 0 : commonjsGlobal.msCrypto) || {};
	}
	crypto$1.getBrowerCrypto = getBrowerCrypto;
	function getSubtleCrypto() {
	    const browserCrypto = getBrowerCrypto();
	    return browserCrypto.subtle || browserCrypto.webkitSubtle;
	}
	crypto$1.getSubtleCrypto = getSubtleCrypto;
	function isBrowserCryptoAvailable() {
	    return !!getBrowerCrypto() && !!getSubtleCrypto();
	}
	crypto$1.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
	
	return crypto$1;
}

var env = {};

var hasRequiredEnv;

function requireEnv () {
	if (hasRequiredEnv) return env;
	hasRequiredEnv = 1;
	Object.defineProperty(env, "__esModule", { value: true });
	env.isBrowser = env.isNode = env.isReactNative = void 0;
	function isReactNative() {
	    return (typeof document === "undefined" &&
	        typeof navigator !== "undefined" &&
	        navigator.product === "ReactNative");
	}
	env.isReactNative = isReactNative;
	function isNode() {
	    return (typeof process !== "undefined" &&
	        typeof process.versions !== "undefined" &&
	        typeof process.versions.node !== "undefined");
	}
	env.isNode = isNode;
	function isBrowser() {
	    return !isReactNative() && !isNode();
	}
	env.isBrowser = isBrowser;
	
	return env;
}

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const tslib_1 = require$$0;
	tslib_1.__exportStar(requireCrypto(), exports);
	tslib_1.__exportStar(requireEnv(), exports);
	
} (cjs));

function payloadId$1(entropy = 3) {
    const date = Date.now() * Math.pow(10, entropy);
    const extra = Math.floor(Math.random() * Math.pow(10, entropy));
    return date + extra;
}

function sanitizeHex(hex) {
    return sanitizeHex$1(hex);
}
function removeHexLeadingZeros(hex) {
    return removeHexLeadingZeros$1(addHexPrefix(hex));
}
const payloadId = payloadId$1;
function uuid() {
    const result = ((a, b) => {
        for (b = a = ""; a++ < 36; b += (a * 51) & 52 ? (a ^ 15 ? 8 ^ (Math.random() * (a ^ 20 ? 16 : 4)) : 4).toString(16) : "-") {
        }
        return b;
    })();
    return result;
}

function isEmptyString(value) {
    return value === "" || (typeof value === "string" && value.trim() === "");
}
function isEmptyArray(array) {
    return !(array && array.length);
}
function isHexString(value, length) {
    return isHexString$1(value);
}
function isJsonRpcRequest(object) {
    return typeof object.method !== "undefined";
}
function isJsonRpcResponseSuccess(object) {
    return typeof object.result !== "undefined";
}
function isJsonRpcResponseError(object) {
    return typeof object.error !== "undefined";
}
function isInternalEvent(object) {
    return typeof object.event !== "undefined";
}
function isReservedEvent(event) {
    return reservedEvents.includes(event) || event.startsWith("wc_");
}
function isSilentPayload(request) {
    if (request.method.startsWith("wc_")) {
        return true;
    }
    if (signingMethods.includes(request.method)) {
        return false;
    }
    return true;
}

function toChecksumAddress(address) {
    address = removeHexPrefix(address.toLowerCase());
    const hash = removeHexPrefix(sha3Exports.keccak_256(convertUtf8ToBuffer(address)));
    let checksum = "";
    for (let i = 0; i < address.length; i++) {
        if (parseInt(hash[i], 16) > 7) {
            checksum += address[i].toUpperCase();
        }
        else {
            checksum += address[i];
        }
    }
    return addHexPrefix(checksum);
}
const isValidAddress$1 = (address) => {
    if (!address) {
        return false;
    }
    else if (address.toLowerCase().substring(0, 2) !== "0x") {
        return false;
    }
    else if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        return false;
    }
    else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
        return true;
    }
    else {
        return address === toChecksumAddress(address);
    }
};
function parsePersonalSign(params) {
    if (!isEmptyArray(params) && !isHexString(params[0])) {
        params[0] = convertUtf8ToHex(params[0]);
    }
    return params;
}
function parseTransactionData(txData) {
    if (typeof txData.type !== "undefined" && txData.type !== "0")
        return txData;
    if (typeof txData.from === "undefined" || !isValidAddress$1(txData.from)) {
        throw new Error(`Transaction object must include a valid 'from' value.`);
    }
    function parseHexValues(value) {
        let result = value;
        if (typeof value === "number" || (typeof value === "string" && !isEmptyString(value))) {
            if (!isHexString(value)) {
                result = convertNumberToHex(value);
            }
            else if (typeof value === "string") {
                result = sanitizeHex(value);
            }
        }
        if (typeof result === "string") {
            result = removeHexLeadingZeros(result);
        }
        return result;
    }
    const txDataRPC = {
        from: sanitizeHex(txData.from),
        to: typeof txData.to === "undefined" ? undefined : sanitizeHex(txData.to),
        gasPrice: typeof txData.gasPrice === "undefined" ? "" : parseHexValues(txData.gasPrice),
        gas: typeof txData.gas === "undefined"
            ? typeof txData.gasLimit === "undefined"
                ? ""
                : parseHexValues(txData.gasLimit)
            : parseHexValues(txData.gas),
        value: typeof txData.value === "undefined" ? "" : parseHexValues(txData.value),
        nonce: typeof txData.nonce === "undefined" ? "" : parseHexValues(txData.nonce),
        data: typeof txData.data === "undefined" ? "" : sanitizeHex(txData.data) || "0x",
    };
    const prunable = ["gasPrice", "gas", "value", "nonce"];
    Object.keys(txDataRPC).forEach((key) => {
        if ((typeof txDataRPC[key] === "undefined" ||
            (typeof txDataRPC[key] === "string" && !txDataRPC[key].trim().length)) &&
            prunable.includes(key)) {
            delete txDataRPC[key];
        }
    });
    return txDataRPC;
}

function formatRpcError(error) {
    const message = error.message || "Failed or Rejected Request";
    let code = -32e3;
    if (error && !error.code) {
        switch (message) {
            case "Parse error":
                code = -32700;
                break;
            case "Invalid request":
                code = -32600;
                break;
            case "Method not found":
                code = -32601;
                break;
            case "Invalid params":
                code = -32602;
                break;
            case "Internal error":
                code = -32603;
                break;
            default:
                code = -32e3;
                break;
        }
    }
    const result = {
        code,
        message,
    };
    if (error.data) {
        result.data = error.data;
    }
    return result;
}

var queryString = {};

var strictUriEncode = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
	try {
		// Try to decode the entire string first
		return [decodeURIComponent(components.join(''))];
	} catch (err) {
		// Do nothing
	}

	if (components.length === 1) {
		return components;
	}

	split = split || 1;

	// Split the array in 2 parts
	var left = components.slice(0, split);
	var right = components.slice(split);

	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode$2(input) {
	try {
		return decodeURIComponent(input);
	} catch (err) {
		var tokens = input.match(singleMatcher) || [];

		for (var i = 1; i < tokens.length; i++) {
			input = decodeComponents(tokens, i).join('');

			tokens = input.match(singleMatcher) || [];
		}

		return input;
	}
}

function customDecodeURIComponent(input) {
	// Keep track of all the replacements and prefill the map with the `BOM`
	var replaceMap = {
		'%FE%FF': '\uFFFD\uFFFD',
		'%FF%FE': '\uFFFD\uFFFD'
	};

	var match = multiMatcher.exec(input);
	while (match) {
		try {
			// Decode as big chunks as possible
			replaceMap[match[0]] = decodeURIComponent(match[0]);
		} catch (err) {
			var result = decode$2(match[0]);

			if (result !== match[0]) {
				replaceMap[match[0]] = result;
			}
		}

		match = multiMatcher.exec(input);
	}

	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
	replaceMap['%C2'] = '\uFFFD';

	var entries = Object.keys(replaceMap);

	for (var i = 0; i < entries.length; i++) {
		// Replace all decoded components
		var key = entries[i];
		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
	}

	return input;
}

var decodeUriComponent = function (encodedURI) {
	if (typeof encodedURI !== 'string') {
		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
	}

	try {
		encodedURI = encodedURI.replace(/\+/g, ' ');

		// Try the built in decoder first
		return decodeURIComponent(encodedURI);
	} catch (err) {
		// Fallback to a more advanced decoder
		return customDecodeURIComponent(encodedURI);
	}
};

var splitOnFirst = (string, separator) => {
	if (!(typeof string === 'string' && typeof separator === 'string')) {
		throw new TypeError('Expected the arguments to be of type `string`');
	}

	if (separator === '') {
		return [string];
	}

	const separatorIndex = string.indexOf(separator);

	if (separatorIndex === -1) {
		return [string];
	}

	return [
		string.slice(0, separatorIndex),
		string.slice(separatorIndex + separator.length)
	];
};

(function (exports) {
	const strictUriEncode$1 = strictUriEncode;
	const decodeComponent = decodeUriComponent;
	const splitOnFirst$1 = splitOnFirst;

	const isNullOrUndefined = value => value === null || value === undefined;

	function encoderForArrayFormat(options) {
		switch (options.arrayFormat) {
			case 'index':
				return key => (result, value) => {
					const index = result.length;

					if (
						value === undefined ||
						(options.skipNull && value === null) ||
						(options.skipEmptyString && value === '')
					) {
						return result;
					}

					if (value === null) {
						return [...result, [encode(key, options), '[', index, ']'].join('')];
					}

					return [
						...result,
						[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
					];
				};

			case 'bracket':
				return key => (result, value) => {
					if (
						value === undefined ||
						(options.skipNull && value === null) ||
						(options.skipEmptyString && value === '')
					) {
						return result;
					}

					if (value === null) {
						return [...result, [encode(key, options), '[]'].join('')];
					}

					return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
				};

			case 'comma':
			case 'separator':
				return key => (result, value) => {
					if (value === null || value === undefined || value.length === 0) {
						return result;
					}

					if (result.length === 0) {
						return [[encode(key, options), '=', encode(value, options)].join('')];
					}

					return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
				};

			default:
				return key => (result, value) => {
					if (
						value === undefined ||
						(options.skipNull && value === null) ||
						(options.skipEmptyString && value === '')
					) {
						return result;
					}

					if (value === null) {
						return [...result, encode(key, options)];
					}

					return [...result, [encode(key, options), '=', encode(value, options)].join('')];
				};
		}
	}

	function parserForArrayFormat(options) {
		let result;

		switch (options.arrayFormat) {
			case 'index':
				return (key, value, accumulator) => {
					result = /\[(\d*)\]$/.exec(key);

					key = key.replace(/\[\d*\]$/, '');

					if (!result) {
						accumulator[key] = value;
						return;
					}

					if (accumulator[key] === undefined) {
						accumulator[key] = {};
					}

					accumulator[key][result[1]] = value;
				};

			case 'bracket':
				return (key, value, accumulator) => {
					result = /(\[\])$/.exec(key);
					key = key.replace(/\[\]$/, '');

					if (!result) {
						accumulator[key] = value;
						return;
					}

					if (accumulator[key] === undefined) {
						accumulator[key] = [value];
						return;
					}

					accumulator[key] = [].concat(accumulator[key], value);
				};

			case 'comma':
			case 'separator':
				return (key, value, accumulator) => {
					const isArray = typeof value === 'string' && value.split('').indexOf(options.arrayFormatSeparator) > -1;
					const newValue = isArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
					accumulator[key] = newValue;
				};

			default:
				return (key, value, accumulator) => {
					if (accumulator[key] === undefined) {
						accumulator[key] = value;
						return;
					}

					accumulator[key] = [].concat(accumulator[key], value);
				};
		}
	}

	function validateArrayFormatSeparator(value) {
		if (typeof value !== 'string' || value.length !== 1) {
			throw new TypeError('arrayFormatSeparator must be single character string');
		}
	}

	function encode(value, options) {
		if (options.encode) {
			return options.strict ? strictUriEncode$1(value) : encodeURIComponent(value);
		}

		return value;
	}

	function decode(value, options) {
		if (options.decode) {
			return decodeComponent(value);
		}

		return value;
	}

	function keysSorter(input) {
		if (Array.isArray(input)) {
			return input.sort();
		}

		if (typeof input === 'object') {
			return keysSorter(Object.keys(input))
				.sort((a, b) => Number(a) - Number(b))
				.map(key => input[key]);
		}

		return input;
	}

	function removeHash(input) {
		const hashStart = input.indexOf('#');
		if (hashStart !== -1) {
			input = input.slice(0, hashStart);
		}

		return input;
	}

	function getHash(url) {
		let hash = '';
		const hashStart = url.indexOf('#');
		if (hashStart !== -1) {
			hash = url.slice(hashStart);
		}

		return hash;
	}

	function extract(input) {
		input = removeHash(input);
		const queryStart = input.indexOf('?');
		if (queryStart === -1) {
			return '';
		}

		return input.slice(queryStart + 1);
	}

	function parseValue(value, options) {
		if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
			value = Number(value);
		} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
			value = value.toLowerCase() === 'true';
		}

		return value;
	}

	function parse(input, options) {
		options = Object.assign({
			decode: true,
			sort: true,
			arrayFormat: 'none',
			arrayFormatSeparator: ',',
			parseNumbers: false,
			parseBooleans: false
		}, options);

		validateArrayFormatSeparator(options.arrayFormatSeparator);

		const formatter = parserForArrayFormat(options);

		// Create an object with no prototype
		const ret = Object.create(null);

		if (typeof input !== 'string') {
			return ret;
		}

		input = input.trim().replace(/^[?#&]/, '');

		if (!input) {
			return ret;
		}

		for (const param of input.split('&')) {
			let [key, value] = splitOnFirst$1(options.decode ? param.replace(/\+/g, ' ') : param, '=');

			// Missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			value = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);
			formatter(decode(key, options), value, ret);
		}

		for (const key of Object.keys(ret)) {
			const value = ret[key];
			if (typeof value === 'object' && value !== null) {
				for (const k of Object.keys(value)) {
					value[k] = parseValue(value[k], options);
				}
			} else {
				ret[key] = parseValue(value, options);
			}
		}

		if (options.sort === false) {
			return ret;
		}

		return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
			const value = ret[key];
			if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
				// Sort object keys, not values
				result[key] = keysSorter(value);
			} else {
				result[key] = value;
			}

			return result;
		}, Object.create(null));
	}

	exports.extract = extract;
	exports.parse = parse;

	exports.stringify = (object, options) => {
		if (!object) {
			return '';
		}

		options = Object.assign({
			encode: true,
			strict: true,
			arrayFormat: 'none',
			arrayFormatSeparator: ','
		}, options);

		validateArrayFormatSeparator(options.arrayFormatSeparator);

		const shouldFilter = key => (
			(options.skipNull && isNullOrUndefined(object[key])) ||
			(options.skipEmptyString && object[key] === '')
		);

		const formatter = encoderForArrayFormat(options);

		const objectCopy = {};

		for (const key of Object.keys(object)) {
			if (!shouldFilter(key)) {
				objectCopy[key] = object[key];
			}
		}

		const keys = Object.keys(objectCopy);

		if (options.sort !== false) {
			keys.sort(options.sort);
		}

		return keys.map(key => {
			const value = object[key];

			if (value === undefined) {
				return '';
			}

			if (value === null) {
				return encode(key, options);
			}

			if (Array.isArray(value)) {
				return value
					.reduce(formatter(key), [])
					.join('&');
			}

			return encode(key, options) + '=' + encode(value, options);
		}).filter(x => x.length > 0).join('&');
	};

	exports.parseUrl = (input, options) => {
		options = Object.assign({
			decode: true
		}, options);

		const [url, hash] = splitOnFirst$1(input, '#');

		return Object.assign(
			{
				url: url.split('?')[0] || '',
				query: parse(extract(input), options)
			},
			options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}
		);
	};

	exports.stringifyUrl = (input, options) => {
		options = Object.assign({
			encode: true,
			strict: true
		}, options);

		const url = removeHash(input.url).split('?')[0] || '';
		const queryFromUrl = exports.extract(input.url);
		const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});

		const query = Object.assign(parsedQueryFromUrl, input.query);
		let queryString = exports.stringify(query, options);
		if (queryString) {
			queryString = `?${queryString}`;
		}

		let hash = getHash(input.url);
		if (input.fragmentIdentifier) {
			hash = `#${encode(input.fragmentIdentifier, options)}`;
		}

		return `${url}${queryString}${hash}`;
	}; 
} (queryString));

function getQueryString(url) {
    const pathEnd = url.indexOf("?") !== -1 ? url.indexOf("?") : undefined;
    const queryString = typeof pathEnd !== "undefined" ? url.substr(pathEnd) : "";
    return queryString;
}
function appendToQueryString(queryString, newQueryParams) {
    let queryParams = parseQueryString(queryString);
    queryParams = Object.assign(Object.assign({}, queryParams), newQueryParams);
    queryString = formatQueryString(queryParams);
    return queryString;
}
function parseQueryString(queryString$1) {
    return queryString.parse(queryString$1);
}
function formatQueryString(queryParams) {
    return queryString.stringify(queryParams);
}

function isWalletConnectSession(object) {
    return typeof object.bridge !== "undefined";
}
function parseWalletConnectUri(str) {
    const pathStart = str.indexOf(":");
    const pathEnd = str.indexOf("?") !== -1 ? str.indexOf("?") : undefined;
    const protocol = str.substring(0, pathStart);
    const path = str.substring(pathStart + 1, pathEnd);
    function parseRequiredParams(path) {
        const separator = "@";
        const values = path.split(separator);
        const requiredParams = {
            handshakeTopic: values[0],
            version: parseInt(values[1], 10),
        };
        return requiredParams;
    }
    const requiredParams = parseRequiredParams(path);
    const queryString = typeof pathEnd !== "undefined" ? str.substr(pathEnd) : "";
    function parseQueryParams(queryString) {
        const result = parseQueryString(queryString);
        const parameters = {
            key: result.key || "",
            bridge: result.bridge || "",
        };
        return parameters;
    }
    const queryParams = parseQueryParams(queryString);
    const result = Object.assign(Object.assign({ protocol }, requiredParams), queryParams);
    return result;
}

class NetworkMonitor {
    constructor() {
        this._eventEmitters = [];
        if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined") {
            window.addEventListener("online", () => this.trigger("online"));
            window.addEventListener("offline", () => this.trigger("offline"));
        }
    }
    on(event, callback) {
        this._eventEmitters.push({
            event,
            callback,
        });
    }
    trigger(event) {
        let eventEmitters = [];
        if (event) {
            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);
        }
        eventEmitters.forEach((eventEmitter) => {
            eventEmitter.callback();
        });
    }
}

const WS = typeof global.WebSocket !== "undefined" ? global.WebSocket : require("ws");
class SocketTransport {
    constructor(opts) {
        this.opts = opts;
        this._queue = [];
        this._events = [];
        this._subscriptions = [];
        this._protocol = opts.protocol;
        this._version = opts.version;
        this._url = "";
        this._netMonitor = null;
        this._socket = null;
        this._nextSocket = null;
        this._subscriptions = opts.subscriptions || [];
        this._netMonitor = opts.netMonitor || new NetworkMonitor();
        if (!opts.url || typeof opts.url !== "string") {
            throw new Error("Missing or invalid WebSocket url");
        }
        this._url = opts.url;
        this._netMonitor.on("online", () => this._socketCreate());
    }
    set readyState(value) {
    }
    get readyState() {
        return this._socket ? this._socket.readyState : -1;
    }
    set connecting(value) {
    }
    get connecting() {
        return this.readyState === 0;
    }
    set connected(value) {
    }
    get connected() {
        return this.readyState === 1;
    }
    set closing(value) {
    }
    get closing() {
        return this.readyState === 2;
    }
    set closed(value) {
    }
    get closed() {
        return this.readyState === 3;
    }
    open() {
        this._socketCreate();
    }
    close() {
        this._socketClose();
    }
    send(message, topic, silent) {
        if (!topic || typeof topic !== "string") {
            throw new Error("Missing or invalid topic field");
        }
        this._socketSend({
            topic: topic,
            type: "pub",
            payload: message,
            silent: !!silent,
        });
    }
    subscribe(topic) {
        this._socketSend({
            topic: topic,
            type: "sub",
            payload: "",
            silent: true,
        });
    }
    on(event, callback) {
        this._events.push({ event, callback });
    }
    _socketCreate() {
        if (this._nextSocket) {
            return;
        }
        const url = getWebSocketUrl(this._url, this._protocol, this._version);
        this._nextSocket = new WS(url);
        if (!this._nextSocket) {
            throw new Error("Failed to create socket");
        }
        this._nextSocket.onmessage = (event) => this._socketReceive(event);
        this._nextSocket.onopen = () => this._socketOpen();
        this._nextSocket.onerror = (event) => this._socketError(event);
        this._nextSocket.onclose = () => {
            setTimeout(() => {
                this._nextSocket = null;
                this._socketCreate();
            }, 1000);
        };
    }
    _socketOpen() {
        this._socketClose();
        this._socket = this._nextSocket;
        this._nextSocket = null;
        this._queueSubscriptions();
        this._pushQueue();
    }
    _socketClose() {
        if (this._socket) {
            this._socket.onclose = () => {
            };
            this._socket.close();
        }
    }
    _socketSend(socketMessage) {
        const message = JSON.stringify(socketMessage);
        if (this._socket && this._socket.readyState === 1) {
            this._socket.send(message);
        }
        else {
            this._setToQueue(socketMessage);
            this._socketCreate();
        }
    }
    async _socketReceive(event) {
        let socketMessage;
        try {
            socketMessage = JSON.parse(event.data);
        }
        catch (error) {
            return;
        }
        this._socketSend({
            topic: socketMessage.topic,
            type: "ack",
            payload: "",
            silent: true,
        });
        if (this._socket && this._socket.readyState === 1) {
            const events = this._events.filter(event => event.event === "message");
            if (events && events.length) {
                events.forEach(event => event.callback(socketMessage));
            }
        }
    }
    _socketError(e) {
        const events = this._events.filter(event => event.event === "error");
        if (events && events.length) {
            events.forEach(event => event.callback(e));
        }
    }
    _queueSubscriptions() {
        const subscriptions = this._subscriptions;
        subscriptions.forEach((topic) => this._queue.push({
            topic: topic,
            type: "sub",
            payload: "",
            silent: true,
        }));
        this._subscriptions = this.opts.subscriptions || [];
    }
    _setToQueue(socketMessage) {
        this._queue.push(socketMessage);
    }
    _pushQueue() {
        const queue = this._queue;
        queue.forEach((socketMessage) => this._socketSend(socketMessage));
        this._queue = [];
    }
}
function getWebSocketUrl(_url, protocol, version) {
    var _a, _b;
    const url = _url.startsWith("https")
        ? _url.replace("https", "wss")
        : _url.startsWith("http")
            ? _url.replace("http", "ws")
            : _url;
    const splitUrl = url.split("?");
    const params = isBrowser()
        ? {
            protocol,
            version,
            env: "browser",
            host: ((_a = getLocation()) === null || _a === void 0 ? void 0 : _a.host) || "",
        }
        : {
            protocol,
            version,
            env: ((_b = detectEnv()) === null || _b === void 0 ? void 0 : _b.name) || "",
        };
    const queryString = appendToQueryString(getQueryString(splitUrl[1] || ""), params);
    return splitUrl[0] + "?" + queryString;
}

const ERROR_SESSION_CONNECTED = "Session currently connected";
const ERROR_SESSION_DISCONNECTED = "Session currently disconnected";
const ERROR_SESSION_REJECTED = "Session Rejected";
const ERROR_MISSING_JSON_RPC = "Missing JSON RPC response";
const ERROR_MISSING_RESULT = `JSON-RPC success response must include "result" field`;
const ERROR_MISSING_ERROR = `JSON-RPC error response must include "error" field`;
const ERROR_MISSING_METHOD = `JSON RPC request must have valid "method" value`;
const ERROR_MISSING_ID = `JSON RPC request must have valid "id" value`;
const ERROR_MISSING_REQUIRED = "Missing one of the required parameters: bridge / uri / session";
const ERROR_INVALID_RESPONSE = "JSON RPC response format is invalid";
const ERROR_INVALID_URI = "URI format is invalid";
const ERROR_QRCODE_MODAL_NOT_PROVIDED = "QRCode Modal not provided";
const ERROR_QRCODE_MODAL_USER_CLOSED = "User close QRCode Modal";

class EventManager {
    constructor() {
        this._eventEmitters = [];
    }
    subscribe(eventEmitter) {
        this._eventEmitters.push(eventEmitter);
    }
    unsubscribe(event) {
        this._eventEmitters = this._eventEmitters.filter(x => x.event !== event);
    }
    trigger(payload) {
        let eventEmitters = [];
        let event;
        if (isJsonRpcRequest(payload)) {
            event = payload.method;
        }
        else if (isJsonRpcResponseSuccess(payload) || isJsonRpcResponseError(payload)) {
            event = `response:${payload.id}`;
        }
        else if (isInternalEvent(payload)) {
            event = payload.event;
        }
        else {
            event = "";
        }
        if (event) {
            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);
        }
        if ((!eventEmitters || !eventEmitters.length) &&
            !isReservedEvent(event) &&
            !isInternalEvent(event)) {
            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === "call_request");
        }
        eventEmitters.forEach((eventEmitter) => {
            if (isJsonRpcResponseError(payload)) {
                const error = new Error(payload.error.message);
                eventEmitter.callback(error, null);
            }
            else {
                eventEmitter.callback(null, payload);
            }
        });
    }
}

class SessionStorage {
    constructor(storageId = "walletconnect") {
        this.storageId = storageId;
    }
    getSession() {
        let session = null;
        const json = getLocal(this.storageId);
        if (json && isWalletConnectSession(json)) {
            session = json;
        }
        return session;
    }
    setSession(session) {
        setLocal(this.storageId, session);
        return session;
    }
    removeSession() {
        removeLocal(this.storageId);
    }
}

const domain = "walletconnect.org";
const alphanumerical = "abcdefghijklmnopqrstuvwxyz0123456789";
const bridges = alphanumerical.split("").map(char => `https://${char}.bridge.walletconnect.org`);
function extractHostname(url) {
    let hostname = url.indexOf("//") > -1 ? url.split("/")[2] : url.split("/")[0];
    hostname = hostname.split(":")[0];
    hostname = hostname.split("?")[0];
    return hostname;
}
function extractRootDomain(url) {
    return extractHostname(url)
        .split(".")
        .slice(-2)
        .join(".");
}
function randomBridgeIndex() {
    return Math.floor(Math.random() * bridges.length);
}
function selectRandomBridgeUrl() {
    return bridges[randomBridgeIndex()];
}
function shouldSelectRandomly(url) {
    return extractRootDomain(url) === domain;
}
function getBridgeUrl(url) {
    if (shouldSelectRandomly(url)) {
        return selectRandomBridgeUrl();
    }
    return url;
}

class Connector {
    constructor(opts) {
        this.protocol = "wc";
        this.version = 1;
        this._bridge = "";
        this._key = null;
        this._clientId = "";
        this._clientMeta = null;
        this._peerId = "";
        this._peerMeta = null;
        this._handshakeId = 0;
        this._handshakeTopic = "";
        this._connected = false;
        this._accounts = [];
        this._chainId = 0;
        this._networkId = 0;
        this._rpcUrl = "";
        this._eventManager = new EventManager();
        this._clientMeta = getClientMeta() || opts.connectorOpts.clientMeta || null;
        this._cryptoLib = opts.cryptoLib;
        this._sessionStorage = opts.sessionStorage || new SessionStorage(opts.connectorOpts.storageId);
        this._qrcodeModal = opts.connectorOpts.qrcodeModal;
        this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;
        this._signingMethods = [...signingMethods, ...(opts.connectorOpts.signingMethods || [])];
        if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {
            throw new Error(ERROR_MISSING_REQUIRED);
        }
        if (opts.connectorOpts.bridge) {
            this.bridge = getBridgeUrl(opts.connectorOpts.bridge);
        }
        if (opts.connectorOpts.uri) {
            this.uri = opts.connectorOpts.uri;
        }
        const session = opts.connectorOpts.session || this._getStorageSession();
        if (session) {
            this.session = session;
        }
        if (this.handshakeId) {
            this._subscribeToSessionResponse(this.handshakeId, "Session request rejected");
        }
        this._transport =
            opts.transport ||
                new SocketTransport({
                    protocol: this.protocol,
                    version: this.version,
                    url: this.bridge,
                    subscriptions: [this.clientId],
                });
        this._subscribeToInternalEvents();
        this._initTransport();
        if (opts.connectorOpts.uri) {
            this._subscribeToSessionRequest();
        }
        if (opts.pushServerOpts) {
            this._registerPushServer(opts.pushServerOpts);
        }
    }
    set bridge(value) {
        if (!value) {
            return;
        }
        this._bridge = value;
    }
    get bridge() {
        return this._bridge;
    }
    set key(value) {
        if (!value) {
            return;
        }
        const key = convertHexToArrayBuffer(value);
        this._key = key;
    }
    get key() {
        if (this._key) {
            const key = convertArrayBufferToHex(this._key);
            return key;
        }
        return "";
    }
    set clientId(value) {
        if (!value) {
            return;
        }
        this._clientId = value;
    }
    get clientId() {
        let clientId = this._clientId;
        if (!clientId) {
            clientId = this._clientId = uuid();
        }
        return this._clientId;
    }
    set peerId(value) {
        if (!value) {
            return;
        }
        this._peerId = value;
    }
    get peerId() {
        return this._peerId;
    }
    set clientMeta(value) {
    }
    get clientMeta() {
        let clientMeta = this._clientMeta;
        if (!clientMeta) {
            clientMeta = this._clientMeta = getClientMeta();
        }
        return clientMeta;
    }
    set peerMeta(value) {
        this._peerMeta = value;
    }
    get peerMeta() {
        const peerMeta = this._peerMeta;
        return peerMeta;
    }
    set handshakeTopic(value) {
        if (!value) {
            return;
        }
        this._handshakeTopic = value;
    }
    get handshakeTopic() {
        return this._handshakeTopic;
    }
    set handshakeId(value) {
        if (!value) {
            return;
        }
        this._handshakeId = value;
    }
    get handshakeId() {
        return this._handshakeId;
    }
    get uri() {
        const _uri = this._formatUri();
        return _uri;
    }
    set uri(value) {
        if (!value) {
            return;
        }
        const { handshakeTopic, bridge, key } = this._parseUri(value);
        this.handshakeTopic = handshakeTopic;
        this.bridge = bridge;
        this.key = key;
    }
    set chainId(value) {
        this._chainId = value;
    }
    get chainId() {
        const chainId = this._chainId;
        return chainId;
    }
    set networkId(value) {
        this._networkId = value;
    }
    get networkId() {
        const networkId = this._networkId;
        return networkId;
    }
    set accounts(value) {
        this._accounts = value;
    }
    get accounts() {
        const accounts = this._accounts;
        return accounts;
    }
    set rpcUrl(value) {
        this._rpcUrl = value;
    }
    get rpcUrl() {
        const rpcUrl = this._rpcUrl;
        return rpcUrl;
    }
    set connected(value) {
    }
    get connected() {
        return this._connected;
    }
    set pending(value) {
    }
    get pending() {
        return !!this._handshakeTopic;
    }
    get session() {
        return {
            connected: this.connected,
            accounts: this.accounts,
            chainId: this.chainId,
            bridge: this.bridge,
            key: this.key,
            clientId: this.clientId,
            clientMeta: this.clientMeta,
            peerId: this.peerId,
            peerMeta: this.peerMeta,
            handshakeId: this.handshakeId,
            handshakeTopic: this.handshakeTopic,
        };
    }
    set session(value) {
        if (!value) {
            return;
        }
        this._connected = value.connected;
        this.accounts = value.accounts;
        this.chainId = value.chainId;
        this.bridge = value.bridge;
        this.key = value.key;
        this.clientId = value.clientId;
        this.clientMeta = value.clientMeta;
        this.peerId = value.peerId;
        this.peerMeta = value.peerMeta;
        this.handshakeId = value.handshakeId;
        this.handshakeTopic = value.handshakeTopic;
    }
    on(event, callback) {
        const eventEmitter = {
            event,
            callback,
        };
        this._eventManager.subscribe(eventEmitter);
    }
    off(event) {
        this._eventManager.unsubscribe(event);
    }
    async createInstantRequest(instantRequest) {
        this._key = await this._generateKey();
        const request = this._formatRequest({
            method: "wc_instantRequest",
            params: [
                {
                    peerId: this.clientId,
                    peerMeta: this.clientMeta,
                    request: this._formatRequest(instantRequest),
                },
            ],
        });
        this.handshakeId = request.id;
        this.handshakeTopic = uuid();
        this._eventManager.trigger({
            event: "display_uri",
            params: [this.uri],
        });
        this.on("modal_closed", () => {
            throw new Error(ERROR_QRCODE_MODAL_USER_CLOSED);
        });
        const endInstantRequest = () => {
            this.killSession();
        };
        try {
            const result = await this._sendCallRequest(request);
            if (result) {
                endInstantRequest();
            }
            return result;
        }
        catch (error) {
            endInstantRequest();
            throw error;
        }
    }
    async connect(opts) {
        if (!this._qrcodeModal) {
            throw new Error(ERROR_QRCODE_MODAL_NOT_PROVIDED);
        }
        if (this.connected) {
            return {
                chainId: this.chainId,
                accounts: this.accounts,
            };
        }
        await this.createSession(opts);
        return new Promise(async (resolve, reject) => {
            this.on("modal_closed", () => reject(new Error(ERROR_QRCODE_MODAL_USER_CLOSED)));
            this.on("connect", (error, payload) => {
                if (error) {
                    return reject(error);
                }
                resolve(payload.params[0]);
            });
        });
    }
    async createSession(opts) {
        if (this._connected) {
            throw new Error(ERROR_SESSION_CONNECTED);
        }
        if (this.pending) {
            return;
        }
        this._key = await this._generateKey();
        const request = this._formatRequest({
            method: "wc_sessionRequest",
            params: [
                {
                    peerId: this.clientId,
                    peerMeta: this.clientMeta,
                    chainId: opts && opts.chainId ? opts.chainId : null,
                },
            ],
        });
        this.handshakeId = request.id;
        this.handshakeTopic = uuid();
        this._sendSessionRequest(request, "Session update rejected", {
            topic: this.handshakeTopic,
        });
        this._eventManager.trigger({
            event: "display_uri",
            params: [this.uri],
        });
    }
    approveSession(sessionStatus) {
        if (this._connected) {
            throw new Error(ERROR_SESSION_CONNECTED);
        }
        this.chainId = sessionStatus.chainId;
        this.accounts = sessionStatus.accounts;
        this.networkId = sessionStatus.networkId || 0;
        this.rpcUrl = sessionStatus.rpcUrl || "";
        const sessionParams = {
            approved: true,
            chainId: this.chainId,
            networkId: this.networkId,
            accounts: this.accounts,
            rpcUrl: this.rpcUrl,
            peerId: this.clientId,
            peerMeta: this.clientMeta,
        };
        const response = {
            id: this.handshakeId,
            jsonrpc: "2.0",
            result: sessionParams,
        };
        this._sendResponse(response);
        this._connected = true;
        this._setStorageSession();
        this._eventManager.trigger({
            event: "connect",
            params: [
                {
                    peerId: this.peerId,
                    peerMeta: this.peerMeta,
                    chainId: this.chainId,
                    accounts: this.accounts,
                },
            ],
        });
    }
    rejectSession(sessionError) {
        if (this._connected) {
            throw new Error(ERROR_SESSION_CONNECTED);
        }
        const message = sessionError && sessionError.message ? sessionError.message : ERROR_SESSION_REJECTED;
        const response = this._formatResponse({
            id: this.handshakeId,
            error: { message },
        });
        this._sendResponse(response);
        this._connected = false;
        this._eventManager.trigger({
            event: "disconnect",
            params: [{ message }],
        });
        this._removeStorageSession();
    }
    updateSession(sessionStatus) {
        if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
        }
        this.chainId = sessionStatus.chainId;
        this.accounts = sessionStatus.accounts;
        this.networkId = sessionStatus.networkId || 0;
        this.rpcUrl = sessionStatus.rpcUrl || "";
        const sessionParams = {
            approved: true,
            chainId: this.chainId,
            networkId: this.networkId,
            accounts: this.accounts,
            rpcUrl: this.rpcUrl,
        };
        const request = this._formatRequest({
            method: "wc_sessionUpdate",
            params: [sessionParams],
        });
        this._sendSessionRequest(request, "Session update rejected");
        this._eventManager.trigger({
            event: "session_update",
            params: [
                {
                    chainId: this.chainId,
                    accounts: this.accounts,
                },
            ],
        });
        this._manageStorageSession();
    }
    async killSession(sessionError) {
        const message = sessionError ? sessionError.message : "Session Disconnected";
        const sessionParams = {
            approved: false,
            chainId: null,
            networkId: null,
            accounts: null,
        };
        const request = this._formatRequest({
            method: "wc_sessionUpdate",
            params: [sessionParams],
        });
        await this._sendRequest(request);
        this._handleSessionDisconnect(message);
    }
    async sendTransaction(tx) {
        if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
        }
        const parsedTx = parseTransactionData(tx);
        const request = this._formatRequest({
            method: "eth_sendTransaction",
            params: [parsedTx],
        });
        const result = await this._sendCallRequest(request);
        return result;
    }
    async signTransaction(tx) {
        if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
        }
        const parsedTx = parseTransactionData(tx);
        const request = this._formatRequest({
            method: "eth_signTransaction",
            params: [parsedTx],
        });
        const result = await this._sendCallRequest(request);
        return result;
    }
    async signMessage(params) {
        if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
        }
        const request = this._formatRequest({
            method: "eth_sign",
            params,
        });
        const result = await this._sendCallRequest(request);
        return result;
    }
    async signPersonalMessage(params) {
        if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
        }
        params = parsePersonalSign(params);
        const request = this._formatRequest({
            method: "personal_sign",
            params,
        });
        const result = await this._sendCallRequest(request);
        return result;
    }
    async signTypedData(params) {
        if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
        }
        const request = this._formatRequest({
            method: "eth_signTypedData",
            params,
        });
        const result = await this._sendCallRequest(request);
        return result;
    }
    async updateChain(chainParams) {
        if (!this._connected) {
            throw new Error("Session currently disconnected");
        }
        const request = this._formatRequest({
            method: "wallet_updateChain",
            params: [chainParams],
        });
        const result = await this._sendCallRequest(request);
        return result;
    }
    unsafeSend(request, options) {
        this._sendRequest(request, options);
        this._eventManager.trigger({
            event: "call_request_sent",
            params: [{ request, options }],
        });
        return new Promise((resolve, reject) => {
            this._subscribeToResponse(request.id, (error, payload) => {
                if (error) {
                    reject(error);
                    return;
                }
                if (!payload) {
                    throw new Error(ERROR_MISSING_JSON_RPC);
                }
                resolve(payload);
            });
        });
    }
    async sendCustomRequest(request, options) {
        if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
        }
        switch (request.method) {
            case "eth_accounts":
                return this.accounts;
            case "eth_chainId":
                return convertNumberToHex(this.chainId);
            case "eth_sendTransaction":
            case "eth_signTransaction":
                if (request.params) {
                    request.params[0] = parseTransactionData(request.params[0]);
                }
                break;
            case "personal_sign":
                if (request.params) {
                    request.params = parsePersonalSign(request.params);
                }
                break;
        }
        const formattedRequest = this._formatRequest(request);
        const result = await this._sendCallRequest(formattedRequest, options);
        return result;
    }
    approveRequest(response) {
        if (isJsonRpcResponseSuccess(response)) {
            const formattedResponse = this._formatResponse(response);
            this._sendResponse(formattedResponse);
        }
        else {
            throw new Error(ERROR_MISSING_RESULT);
        }
    }
    rejectRequest(response) {
        if (isJsonRpcResponseError(response)) {
            const formattedResponse = this._formatResponse(response);
            this._sendResponse(formattedResponse);
        }
        else {
            throw new Error(ERROR_MISSING_ERROR);
        }
    }
    transportClose() {
        this._transport.close();
    }
    async _sendRequest(request, options) {
        const callRequest = this._formatRequest(request);
        const encryptionPayload = await this._encrypt(callRequest);
        const topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== "undefined" ? options.topic : this.peerId;
        const payload = JSON.stringify(encryptionPayload);
        const silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== "undefined"
            ? !options.forcePushNotification
            : isSilentPayload(callRequest);
        this._transport.send(payload, topic, silent);
    }
    async _sendResponse(response) {
        const encryptionPayload = await this._encrypt(response);
        const topic = this.peerId;
        const payload = JSON.stringify(encryptionPayload);
        const silent = true;
        this._transport.send(payload, topic, silent);
    }
    async _sendSessionRequest(request, errorMsg, options) {
        this._sendRequest(request, options);
        this._subscribeToSessionResponse(request.id, errorMsg);
    }
    _sendCallRequest(request, options) {
        this._sendRequest(request, options);
        this._eventManager.trigger({
            event: "call_request_sent",
            params: [{ request, options }],
        });
        return this._subscribeToCallResponse(request.id);
    }
    _formatRequest(request) {
        if (typeof request.method === "undefined") {
            throw new Error(ERROR_MISSING_METHOD);
        }
        const formattedRequest = {
            id: typeof request.id === "undefined" ? payloadId() : request.id,
            jsonrpc: "2.0",
            method: request.method,
            params: typeof request.params === "undefined" ? [] : request.params,
        };
        return formattedRequest;
    }
    _formatResponse(response) {
        if (typeof response.id === "undefined") {
            throw new Error(ERROR_MISSING_ID);
        }
        const baseResponse = { id: response.id, jsonrpc: "2.0" };
        if (isJsonRpcResponseError(response)) {
            const error = formatRpcError(response.error);
            const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), { error });
            return errorResponse;
        }
        else if (isJsonRpcResponseSuccess(response)) {
            const successResponse = Object.assign(Object.assign({}, baseResponse), response);
            return successResponse;
        }
        throw new Error(ERROR_INVALID_RESPONSE);
    }
    _handleSessionDisconnect(errorMsg) {
        const message = errorMsg || "Session Disconnected";
        if (!this._connected) {
            if (this._qrcodeModal) {
                this._qrcodeModal.close();
            }
            removeLocal(mobileLinkChoiceKey);
        }
        if (this._connected) {
            this._connected = false;
        }
        if (this._handshakeId) {
            this._handshakeId = 0;
        }
        if (this._handshakeTopic) {
            this._handshakeTopic = "";
        }
        if (this._peerId) {
            this._peerId = "";
        }
        this._eventManager.trigger({
            event: "disconnect",
            params: [{ message }],
        });
        this._removeStorageSession();
        this.transportClose();
    }
    _handleSessionResponse(errorMsg, sessionParams) {
        if (sessionParams) {
            if (sessionParams.approved) {
                if (!this._connected) {
                    this._connected = true;
                    if (sessionParams.chainId) {
                        this.chainId = sessionParams.chainId;
                    }
                    if (sessionParams.accounts) {
                        this.accounts = sessionParams.accounts;
                    }
                    if (sessionParams.peerId && !this.peerId) {
                        this.peerId = sessionParams.peerId;
                    }
                    if (sessionParams.peerMeta && !this.peerMeta) {
                        this.peerMeta = sessionParams.peerMeta;
                    }
                    this._eventManager.trigger({
                        event: "connect",
                        params: [
                            {
                                peerId: this.peerId,
                                peerMeta: this.peerMeta,
                                chainId: this.chainId,
                                accounts: this.accounts,
                            },
                        ],
                    });
                }
                else {
                    if (sessionParams.chainId) {
                        this.chainId = sessionParams.chainId;
                    }
                    if (sessionParams.accounts) {
                        this.accounts = sessionParams.accounts;
                    }
                    this._eventManager.trigger({
                        event: "session_update",
                        params: [
                            {
                                chainId: this.chainId,
                                accounts: this.accounts,
                            },
                        ],
                    });
                }
                this._manageStorageSession();
            }
            else {
                this._handleSessionDisconnect(errorMsg);
            }
        }
        else {
            this._handleSessionDisconnect(errorMsg);
        }
    }
    async _handleIncomingMessages(socketMessage) {
        const activeTopics = [this.clientId, this.handshakeTopic];
        if (!activeTopics.includes(socketMessage.topic)) {
            return;
        }
        let encryptionPayload;
        try {
            encryptionPayload = JSON.parse(socketMessage.payload);
        }
        catch (error) {
            return;
        }
        const payload = await this._decrypt(encryptionPayload);
        if (payload) {
            this._eventManager.trigger(payload);
        }
    }
    _subscribeToSessionRequest() {
        this._transport.subscribe(this.handshakeTopic);
    }
    _subscribeToResponse(id, callback) {
        this.on(`response:${id}`, callback);
    }
    _subscribeToSessionResponse(id, errorMsg) {
        this._subscribeToResponse(id, (error, payload) => {
            if (error) {
                this._handleSessionResponse(error.message);
                return;
            }
            if (isJsonRpcResponseSuccess(payload)) {
                this._handleSessionResponse(errorMsg, payload.result);
            }
            else if (payload.error && payload.error.message) {
                this._handleSessionResponse(payload.error.message);
            }
            else {
                this._handleSessionResponse(errorMsg);
            }
        });
    }
    _subscribeToCallResponse(id) {
        return new Promise((resolve, reject) => {
            this._subscribeToResponse(id, (error, payload) => {
                if (error) {
                    reject(error);
                    return;
                }
                if (isJsonRpcResponseSuccess(payload)) {
                    resolve(payload.result);
                }
                else if (payload.error && payload.error.message) {
                    reject(payload.error);
                }
                else {
                    reject(new Error(ERROR_INVALID_RESPONSE));
                }
            });
        });
    }
    _subscribeToInternalEvents() {
        this.on("display_uri", () => {
            if (this._qrcodeModal) {
                this._qrcodeModal.open(this.uri, () => {
                    this._eventManager.trigger({
                        event: "modal_closed",
                        params: [],
                    });
                }, this._qrcodeModalOptions);
            }
        });
        this.on("connect", () => {
            if (this._qrcodeModal) {
                this._qrcodeModal.close();
            }
        });
        this.on("call_request_sent", (error, payload) => {
            const { request } = payload.params[0];
            if (isMobile() && this._signingMethods.includes(request.method)) {
                const mobileLinkUrl = getLocal(mobileLinkChoiceKey);
                if (mobileLinkUrl) {
                    window.location.href = mobileLinkUrl.href;
                }
            }
        });
        this.on("wc_sessionRequest", (error, payload) => {
            if (error) {
                this._eventManager.trigger({
                    event: "error",
                    params: [
                        {
                            code: "SESSION_REQUEST_ERROR",
                            message: error.toString(),
                        },
                    ],
                });
            }
            this.handshakeId = payload.id;
            this.peerId = payload.params[0].peerId;
            this.peerMeta = payload.params[0].peerMeta;
            const internalPayload = Object.assign(Object.assign({}, payload), { method: "session_request" });
            this._eventManager.trigger(internalPayload);
        });
        this.on("wc_sessionUpdate", (error, payload) => {
            if (error) {
                this._handleSessionResponse(error.message);
            }
            this._handleSessionResponse("Session disconnected", payload.params[0]);
        });
    }
    _initTransport() {
        this._transport.on("message", (socketMessage) => this._handleIncomingMessages(socketMessage));
        this._transport.on("open", () => this._eventManager.trigger({ event: "transport_open", params: [] }));
        this._transport.on("close", () => this._eventManager.trigger({ event: "transport_close", params: [] }));
        this._transport.on("error", () => this._eventManager.trigger({
            event: "transport_error",
            params: ["Websocket connection failed"],
        }));
        this._transport.open();
    }
    _formatUri() {
        const protocol = this.protocol;
        const handshakeTopic = this.handshakeTopic;
        const version = this.version;
        const bridge = encodeURIComponent(this.bridge);
        const key = this.key;
        const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;
        return uri;
    }
    _parseUri(uri) {
        const result = parseWalletConnectUri(uri);
        if (result.protocol === this.protocol) {
            if (!result.handshakeTopic) {
                throw Error("Invalid or missing handshakeTopic parameter value");
            }
            const handshakeTopic = result.handshakeTopic;
            if (!result.bridge) {
                throw Error("Invalid or missing bridge url parameter value");
            }
            const bridge = decodeURIComponent(result.bridge);
            if (!result.key) {
                throw Error("Invalid or missing key parameter value");
            }
            const key = result.key;
            return { handshakeTopic, bridge, key };
        }
        else {
            throw new Error(ERROR_INVALID_URI);
        }
    }
    async _generateKey() {
        if (this._cryptoLib) {
            const result = await this._cryptoLib.generateKey();
            return result;
        }
        return null;
    }
    async _encrypt(data) {
        const key = this._key;
        if (this._cryptoLib && key) {
            const result = await this._cryptoLib.encrypt(data, key);
            return result;
        }
        return null;
    }
    async _decrypt(payload) {
        const key = this._key;
        if (this._cryptoLib && key) {
            const result = await this._cryptoLib.decrypt(payload, key);
            return result;
        }
        return null;
    }
    _getStorageSession() {
        let result = null;
        if (this._sessionStorage) {
            result = this._sessionStorage.getSession();
        }
        return result;
    }
    _setStorageSession() {
        if (this._sessionStorage) {
            this._sessionStorage.setSession(this.session);
        }
    }
    _removeStorageSession() {
        if (this._sessionStorage) {
            this._sessionStorage.removeSession();
        }
    }
    _manageStorageSession() {
        if (this._connected) {
            this._setStorageSession();
        }
        else {
            this._removeStorageSession();
        }
    }
    _registerPushServer(pushServerOpts) {
        if (!pushServerOpts.url || typeof pushServerOpts.url !== "string") {
            throw Error("Invalid or missing pushServerOpts.url parameter value");
        }
        if (!pushServerOpts.type || typeof pushServerOpts.type !== "string") {
            throw Error("Invalid or missing pushServerOpts.type parameter value");
        }
        if (!pushServerOpts.token || typeof pushServerOpts.token !== "string") {
            throw Error("Invalid or missing pushServerOpts.token parameter value");
        }
        const pushSubscription = {
            bridge: this.bridge,
            topic: this.clientId,
            type: pushServerOpts.type,
            token: pushServerOpts.token,
            peerName: "",
            language: pushServerOpts.language || "",
        };
        this.on("connect", async (error, payload) => {
            if (error) {
                throw error;
            }
            if (pushServerOpts.peerMeta) {
                const peerName = payload.params[0].peerMeta.name;
                pushSubscription.peerName = peerName;
            }
            try {
                const response = await fetch(`${pushServerOpts.url}/new`, {
                    method: "POST",
                    headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(pushSubscription),
                });
                const json = await response.json();
                if (!json.success) {
                    throw Error("Failed to register in Push Server");
                }
            }
            catch (error) {
                throw Error("Failed to register in Push Server");
            }
        });
    }
}

function randomBytes$1(length) {
    const browserCrypto = cjs.getBrowerCrypto();
    return browserCrypto.getRandomValues(new Uint8Array(length));
}

const LENGTH_256 = 256;

const AES_LENGTH = LENGTH_256;
const HMAC_LENGTH = LENGTH_256;
const AES_BROWSER_ALGO = "AES-CBC";
const HMAC_BROWSER_ALGO = `SHA-${AES_LENGTH}`;
const HMAC_BROWSER = "HMAC";

const ENCRYPT_OP = "encrypt";
const DECRYPT_OP = "decrypt";
const SIGN_OP = "sign";
const VERIFY_OP = "verify";

function getAlgo(type) {
    return type === AES_BROWSER_ALGO
        ? { length: AES_LENGTH, name: AES_BROWSER_ALGO }
        : {
            hash: { name: HMAC_BROWSER_ALGO },
            name: HMAC_BROWSER,
        };
}
function getOps(type) {
    return type === AES_BROWSER_ALGO ? [ENCRYPT_OP, DECRYPT_OP] : [SIGN_OP, VERIFY_OP];
}
async function browserImportKey(buffer, type = AES_BROWSER_ALGO) {
    return cjs.getSubtleCrypto().importKey("raw", buffer, getAlgo(type), true, getOps(type));
}
async function browserAesEncrypt(iv, key, data) {
    const subtle = cjs.getSubtleCrypto();
    const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);
    const result = await subtle.encrypt({
        iv,
        name: AES_BROWSER_ALGO,
    }, cryptoKey, data);
    return new Uint8Array(result);
}
async function browserAesDecrypt(iv, key, data) {
    const subtle = cjs.getSubtleCrypto();
    const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);
    const result = await subtle.decrypt({
        iv,
        name: AES_BROWSER_ALGO,
    }, cryptoKey, data);
    return new Uint8Array(result);
}
async function browserHmacSha256Sign(key, data) {
    const subtle = cjs.getSubtleCrypto();
    const cryptoKey = await browserImportKey(key, HMAC_BROWSER);
    const signature = await subtle.sign({
        length: HMAC_LENGTH,
        name: HMAC_BROWSER,
    }, cryptoKey, data);
    return new Uint8Array(signature);
}

function aesCbcEncrypt(iv, key, data) {
    return browserAesEncrypt(iv, key, data);
}
function aesCbcDecrypt(iv, key, data) {
    return browserAesDecrypt(iv, key, data);
}

async function hmacSha256Sign(key, msg) {
    const result = await browserHmacSha256Sign(key, msg);
    return result;
}

async function generateKey(length) {
    const _length = (length || 256) / 8;
    const bytes = randomBytes$1(_length);
    const result = convertBufferToArrayBuffer(arrayToBuffer(bytes));
    return result;
}
async function verifyHmac(payload, key) {
    const cipherText = hexToArray(payload.data);
    const iv = hexToArray(payload.iv);
    const hmac = hexToArray(payload.hmac);
    const hmacHex = arrayToHex(hmac, false);
    const unsigned = concatArrays$1(cipherText, iv);
    const chmac = await hmacSha256Sign(key, unsigned);
    const chmacHex = arrayToHex(chmac, false);
    if (removeHexPrefix(hmacHex) === removeHexPrefix(chmacHex)) {
        return true;
    }
    return false;
}
async function encrypt(data, key, providedIv) {
    const _key = bufferToArray(convertArrayBufferToBuffer(key));
    const ivArrayBuffer = providedIv || (await generateKey(128));
    const iv = bufferToArray(convertArrayBufferToBuffer(ivArrayBuffer));
    const ivHex = arrayToHex(iv, false);
    const contentString = JSON.stringify(data);
    const content = utf8ToArray(contentString);
    const cipherText = await aesCbcEncrypt(iv, _key, content);
    const cipherTextHex = arrayToHex(cipherText, false);
    const unsigned = concatArrays$1(cipherText, iv);
    const hmac = await hmacSha256Sign(_key, unsigned);
    const hmacHex = arrayToHex(hmac, false);
    return {
        data: cipherTextHex,
        hmac: hmacHex,
        iv: ivHex,
    };
}
async function decrypt(payload, key) {
    const _key = bufferToArray(convertArrayBufferToBuffer(key));
    if (!_key) {
        throw new Error("Missing key: required for decryption");
    }
    const verified = await verifyHmac(payload, _key);
    if (!verified) {
        return null;
    }
    const cipherText = hexToArray(payload.data);
    const iv = hexToArray(payload.iv);
    const buffer = await aesCbcDecrypt(iv, _key, cipherText);
    const utf8 = arrayToUtf8(buffer);
    let data;
    try {
        data = JSON.parse(utf8);
    }
    catch (error) {
        return null;
    }
    return data;
}

var cryptoLib = /*#__PURE__*/Object.freeze({
	__proto__: null,
	decrypt: decrypt,
	encrypt: encrypt,
	generateKey: generateKey,
	verifyHmac: verifyHmac
});

class WalletConnect extends Connector {
    constructor(connectorOpts, pushServerOpts) {
        super({
            cryptoLib,
            connectorOpts,
            pushServerOpts,
        });
    }
}

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var naclFast = {exports: {}};

(function (module) {
	(function(nacl) {

	// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
	// Public domain.
	//
	// Implementation derived from TweetNaCl version 20140427.
	// See for details: http://tweetnacl.cr.yp.to/

	var gf = function(init) {
	  var i, r = new Float64Array(16);
	  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
	  return r;
	};

	//  Pluggable, initialized in high-level API below.
	var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

	var _0 = new Uint8Array(16);
	var _9 = new Uint8Array(32); _9[0] = 9;

	var gf0 = gf(),
	    gf1 = gf([1]),
	    _121665 = gf([0xdb41, 1]),
	    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
	    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
	    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
	    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
	    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

	function ts64(x, i, h, l) {
	  x[i]   = (h >> 24) & 0xff;
	  x[i+1] = (h >> 16) & 0xff;
	  x[i+2] = (h >>  8) & 0xff;
	  x[i+3] = h & 0xff;
	  x[i+4] = (l >> 24)  & 0xff;
	  x[i+5] = (l >> 16)  & 0xff;
	  x[i+6] = (l >>  8)  & 0xff;
	  x[i+7] = l & 0xff;
	}

	function vn(x, xi, y, yi, n) {
	  var i,d = 0;
	  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
	  return (1 & ((d - 1) >>> 8)) - 1;
	}

	function crypto_verify_16(x, xi, y, yi) {
	  return vn(x,xi,y,yi,16);
	}

	function crypto_verify_32(x, xi, y, yi) {
	  return vn(x,xi,y,yi,32);
	}

	function core_salsa20(o, p, k, c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }
	   x0 =  x0 +  j0 | 0;
	   x1 =  x1 +  j1 | 0;
	   x2 =  x2 +  j2 | 0;
	   x3 =  x3 +  j3 | 0;
	   x4 =  x4 +  j4 | 0;
	   x5 =  x5 +  j5 | 0;
	   x6 =  x6 +  j6 | 0;
	   x7 =  x7 +  j7 | 0;
	   x8 =  x8 +  j8 | 0;
	   x9 =  x9 +  j9 | 0;
	  x10 = x10 + j10 | 0;
	  x11 = x11 + j11 | 0;
	  x12 = x12 + j12 | 0;
	  x13 = x13 + j13 | 0;
	  x14 = x14 + j14 | 0;
	  x15 = x15 + j15 | 0;

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x1 >>>  0 & 0xff;
	  o[ 5] = x1 >>>  8 & 0xff;
	  o[ 6] = x1 >>> 16 & 0xff;
	  o[ 7] = x1 >>> 24 & 0xff;

	  o[ 8] = x2 >>>  0 & 0xff;
	  o[ 9] = x2 >>>  8 & 0xff;
	  o[10] = x2 >>> 16 & 0xff;
	  o[11] = x2 >>> 24 & 0xff;

	  o[12] = x3 >>>  0 & 0xff;
	  o[13] = x3 >>>  8 & 0xff;
	  o[14] = x3 >>> 16 & 0xff;
	  o[15] = x3 >>> 24 & 0xff;

	  o[16] = x4 >>>  0 & 0xff;
	  o[17] = x4 >>>  8 & 0xff;
	  o[18] = x4 >>> 16 & 0xff;
	  o[19] = x4 >>> 24 & 0xff;

	  o[20] = x5 >>>  0 & 0xff;
	  o[21] = x5 >>>  8 & 0xff;
	  o[22] = x5 >>> 16 & 0xff;
	  o[23] = x5 >>> 24 & 0xff;

	  o[24] = x6 >>>  0 & 0xff;
	  o[25] = x6 >>>  8 & 0xff;
	  o[26] = x6 >>> 16 & 0xff;
	  o[27] = x6 >>> 24 & 0xff;

	  o[28] = x7 >>>  0 & 0xff;
	  o[29] = x7 >>>  8 & 0xff;
	  o[30] = x7 >>> 16 & 0xff;
	  o[31] = x7 >>> 24 & 0xff;

	  o[32] = x8 >>>  0 & 0xff;
	  o[33] = x8 >>>  8 & 0xff;
	  o[34] = x8 >>> 16 & 0xff;
	  o[35] = x8 >>> 24 & 0xff;

	  o[36] = x9 >>>  0 & 0xff;
	  o[37] = x9 >>>  8 & 0xff;
	  o[38] = x9 >>> 16 & 0xff;
	  o[39] = x9 >>> 24 & 0xff;

	  o[40] = x10 >>>  0 & 0xff;
	  o[41] = x10 >>>  8 & 0xff;
	  o[42] = x10 >>> 16 & 0xff;
	  o[43] = x10 >>> 24 & 0xff;

	  o[44] = x11 >>>  0 & 0xff;
	  o[45] = x11 >>>  8 & 0xff;
	  o[46] = x11 >>> 16 & 0xff;
	  o[47] = x11 >>> 24 & 0xff;

	  o[48] = x12 >>>  0 & 0xff;
	  o[49] = x12 >>>  8 & 0xff;
	  o[50] = x12 >>> 16 & 0xff;
	  o[51] = x12 >>> 24 & 0xff;

	  o[52] = x13 >>>  0 & 0xff;
	  o[53] = x13 >>>  8 & 0xff;
	  o[54] = x13 >>> 16 & 0xff;
	  o[55] = x13 >>> 24 & 0xff;

	  o[56] = x14 >>>  0 & 0xff;
	  o[57] = x14 >>>  8 & 0xff;
	  o[58] = x14 >>> 16 & 0xff;
	  o[59] = x14 >>> 24 & 0xff;

	  o[60] = x15 >>>  0 & 0xff;
	  o[61] = x15 >>>  8 & 0xff;
	  o[62] = x15 >>> 16 & 0xff;
	  o[63] = x15 >>> 24 & 0xff;
	}

	function core_hsalsa20(o,p,k,c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x5 >>>  0 & 0xff;
	  o[ 5] = x5 >>>  8 & 0xff;
	  o[ 6] = x5 >>> 16 & 0xff;
	  o[ 7] = x5 >>> 24 & 0xff;

	  o[ 8] = x10 >>>  0 & 0xff;
	  o[ 9] = x10 >>>  8 & 0xff;
	  o[10] = x10 >>> 16 & 0xff;
	  o[11] = x10 >>> 24 & 0xff;

	  o[12] = x15 >>>  0 & 0xff;
	  o[13] = x15 >>>  8 & 0xff;
	  o[14] = x15 >>> 16 & 0xff;
	  o[15] = x15 >>> 24 & 0xff;

	  o[16] = x6 >>>  0 & 0xff;
	  o[17] = x6 >>>  8 & 0xff;
	  o[18] = x6 >>> 16 & 0xff;
	  o[19] = x6 >>> 24 & 0xff;

	  o[20] = x7 >>>  0 & 0xff;
	  o[21] = x7 >>>  8 & 0xff;
	  o[22] = x7 >>> 16 & 0xff;
	  o[23] = x7 >>> 24 & 0xff;

	  o[24] = x8 >>>  0 & 0xff;
	  o[25] = x8 >>>  8 & 0xff;
	  o[26] = x8 >>> 16 & 0xff;
	  o[27] = x8 >>> 24 & 0xff;

	  o[28] = x9 >>>  0 & 0xff;
	  o[29] = x9 >>>  8 & 0xff;
	  o[30] = x9 >>> 16 & 0xff;
	  o[31] = x9 >>> 24 & 0xff;
	}

	function crypto_core_salsa20(out,inp,k,c) {
	  core_salsa20(out,inp,k,c);
	}

	function crypto_core_hsalsa20(out,inp,k,c) {
	  core_hsalsa20(out,inp,k,c);
	}

	var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
	            // "expand 32-byte k"

	function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	    mpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	  }
	  return 0;
	}

	function crypto_stream_salsa20(c,cpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = x[i];
	  }
	  return 0;
	}

	function crypto_stream(c,cpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20(c,cpos,d,sn,s);
	}

	function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
	}

	/*
	* Port of Andrew Moon's Poly1305-donna-16. Public domain.
	* https://github.com/floodyberry/poly1305-donna
	*/

	var poly1305 = function(key) {
	  this.buffer = new Uint8Array(16);
	  this.r = new Uint16Array(10);
	  this.h = new Uint16Array(10);
	  this.pad = new Uint16Array(8);
	  this.leftover = 0;
	  this.fin = 0;

	  var t0, t1, t2, t3, t4, t5, t6, t7;

	  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
	  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
	  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
	  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
	  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
	  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	  this.r[9] = ((t7 >>>  5)) & 0x007f;

	  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
	  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
	  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
	  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
	  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
	  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
	  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
	  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
	};

	poly1305.prototype.blocks = function(m, mpos, bytes) {
	  var hibit = this.fin ? 0 : (1 << 11);
	  var t0, t1, t2, t3, t4, t5, t6, t7, c;
	  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

	  var h0 = this.h[0],
	      h1 = this.h[1],
	      h2 = this.h[2],
	      h3 = this.h[3],
	      h4 = this.h[4],
	      h5 = this.h[5],
	      h6 = this.h[6],
	      h7 = this.h[7],
	      h8 = this.h[8],
	      h9 = this.h[9];

	  var r0 = this.r[0],
	      r1 = this.r[1],
	      r2 = this.r[2],
	      r3 = this.r[3],
	      r4 = this.r[4],
	      r5 = this.r[5],
	      r6 = this.r[6],
	      r7 = this.r[7],
	      r8 = this.r[8],
	      r9 = this.r[9];

	  while (bytes >= 16) {
	    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
	    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
	    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
	    h5 += ((t4 >>>  1)) & 0x1fff;
	    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
	    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	    h9 += ((t7 >>> 5)) | hibit;

	    c = 0;

	    d0 = c;
	    d0 += h0 * r0;
	    d0 += h1 * (5 * r9);
	    d0 += h2 * (5 * r8);
	    d0 += h3 * (5 * r7);
	    d0 += h4 * (5 * r6);
	    c = (d0 >>> 13); d0 &= 0x1fff;
	    d0 += h5 * (5 * r5);
	    d0 += h6 * (5 * r4);
	    d0 += h7 * (5 * r3);
	    d0 += h8 * (5 * r2);
	    d0 += h9 * (5 * r1);
	    c += (d0 >>> 13); d0 &= 0x1fff;

	    d1 = c;
	    d1 += h0 * r1;
	    d1 += h1 * r0;
	    d1 += h2 * (5 * r9);
	    d1 += h3 * (5 * r8);
	    d1 += h4 * (5 * r7);
	    c = (d1 >>> 13); d1 &= 0x1fff;
	    d1 += h5 * (5 * r6);
	    d1 += h6 * (5 * r5);
	    d1 += h7 * (5 * r4);
	    d1 += h8 * (5 * r3);
	    d1 += h9 * (5 * r2);
	    c += (d1 >>> 13); d1 &= 0x1fff;

	    d2 = c;
	    d2 += h0 * r2;
	    d2 += h1 * r1;
	    d2 += h2 * r0;
	    d2 += h3 * (5 * r9);
	    d2 += h4 * (5 * r8);
	    c = (d2 >>> 13); d2 &= 0x1fff;
	    d2 += h5 * (5 * r7);
	    d2 += h6 * (5 * r6);
	    d2 += h7 * (5 * r5);
	    d2 += h8 * (5 * r4);
	    d2 += h9 * (5 * r3);
	    c += (d2 >>> 13); d2 &= 0x1fff;

	    d3 = c;
	    d3 += h0 * r3;
	    d3 += h1 * r2;
	    d3 += h2 * r1;
	    d3 += h3 * r0;
	    d3 += h4 * (5 * r9);
	    c = (d3 >>> 13); d3 &= 0x1fff;
	    d3 += h5 * (5 * r8);
	    d3 += h6 * (5 * r7);
	    d3 += h7 * (5 * r6);
	    d3 += h8 * (5 * r5);
	    d3 += h9 * (5 * r4);
	    c += (d3 >>> 13); d3 &= 0x1fff;

	    d4 = c;
	    d4 += h0 * r4;
	    d4 += h1 * r3;
	    d4 += h2 * r2;
	    d4 += h3 * r1;
	    d4 += h4 * r0;
	    c = (d4 >>> 13); d4 &= 0x1fff;
	    d4 += h5 * (5 * r9);
	    d4 += h6 * (5 * r8);
	    d4 += h7 * (5 * r7);
	    d4 += h8 * (5 * r6);
	    d4 += h9 * (5 * r5);
	    c += (d4 >>> 13); d4 &= 0x1fff;

	    d5 = c;
	    d5 += h0 * r5;
	    d5 += h1 * r4;
	    d5 += h2 * r3;
	    d5 += h3 * r2;
	    d5 += h4 * r1;
	    c = (d5 >>> 13); d5 &= 0x1fff;
	    d5 += h5 * r0;
	    d5 += h6 * (5 * r9);
	    d5 += h7 * (5 * r8);
	    d5 += h8 * (5 * r7);
	    d5 += h9 * (5 * r6);
	    c += (d5 >>> 13); d5 &= 0x1fff;

	    d6 = c;
	    d6 += h0 * r6;
	    d6 += h1 * r5;
	    d6 += h2 * r4;
	    d6 += h3 * r3;
	    d6 += h4 * r2;
	    c = (d6 >>> 13); d6 &= 0x1fff;
	    d6 += h5 * r1;
	    d6 += h6 * r0;
	    d6 += h7 * (5 * r9);
	    d6 += h8 * (5 * r8);
	    d6 += h9 * (5 * r7);
	    c += (d6 >>> 13); d6 &= 0x1fff;

	    d7 = c;
	    d7 += h0 * r7;
	    d7 += h1 * r6;
	    d7 += h2 * r5;
	    d7 += h3 * r4;
	    d7 += h4 * r3;
	    c = (d7 >>> 13); d7 &= 0x1fff;
	    d7 += h5 * r2;
	    d7 += h6 * r1;
	    d7 += h7 * r0;
	    d7 += h8 * (5 * r9);
	    d7 += h9 * (5 * r8);
	    c += (d7 >>> 13); d7 &= 0x1fff;

	    d8 = c;
	    d8 += h0 * r8;
	    d8 += h1 * r7;
	    d8 += h2 * r6;
	    d8 += h3 * r5;
	    d8 += h4 * r4;
	    c = (d8 >>> 13); d8 &= 0x1fff;
	    d8 += h5 * r3;
	    d8 += h6 * r2;
	    d8 += h7 * r1;
	    d8 += h8 * r0;
	    d8 += h9 * (5 * r9);
	    c += (d8 >>> 13); d8 &= 0x1fff;

	    d9 = c;
	    d9 += h0 * r9;
	    d9 += h1 * r8;
	    d9 += h2 * r7;
	    d9 += h3 * r6;
	    d9 += h4 * r5;
	    c = (d9 >>> 13); d9 &= 0x1fff;
	    d9 += h5 * r4;
	    d9 += h6 * r3;
	    d9 += h7 * r2;
	    d9 += h8 * r1;
	    d9 += h9 * r0;
	    c += (d9 >>> 13); d9 &= 0x1fff;

	    c = (((c << 2) + c)) | 0;
	    c = (c + d0) | 0;
	    d0 = c & 0x1fff;
	    c = (c >>> 13);
	    d1 += c;

	    h0 = d0;
	    h1 = d1;
	    h2 = d2;
	    h3 = d3;
	    h4 = d4;
	    h5 = d5;
	    h6 = d6;
	    h7 = d7;
	    h8 = d8;
	    h9 = d9;

	    mpos += 16;
	    bytes -= 16;
	  }
	  this.h[0] = h0;
	  this.h[1] = h1;
	  this.h[2] = h2;
	  this.h[3] = h3;
	  this.h[4] = h4;
	  this.h[5] = h5;
	  this.h[6] = h6;
	  this.h[7] = h7;
	  this.h[8] = h8;
	  this.h[9] = h9;
	};

	poly1305.prototype.finish = function(mac, macpos) {
	  var g = new Uint16Array(10);
	  var c, mask, f, i;

	  if (this.leftover) {
	    i = this.leftover;
	    this.buffer[i++] = 1;
	    for (; i < 16; i++) this.buffer[i] = 0;
	    this.fin = 1;
	    this.blocks(this.buffer, 0, 16);
	  }

	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  for (i = 2; i < 10; i++) {
	    this.h[i] += c;
	    c = this.h[i] >>> 13;
	    this.h[i] &= 0x1fff;
	  }
	  this.h[0] += (c * 5);
	  c = this.h[0] >>> 13;
	  this.h[0] &= 0x1fff;
	  this.h[1] += c;
	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  this.h[2] += c;

	  g[0] = this.h[0] + 5;
	  c = g[0] >>> 13;
	  g[0] &= 0x1fff;
	  for (i = 1; i < 10; i++) {
	    g[i] = this.h[i] + c;
	    c = g[i] >>> 13;
	    g[i] &= 0x1fff;
	  }
	  g[9] -= (1 << 13);

	  mask = (c ^ 1) - 1;
	  for (i = 0; i < 10; i++) g[i] &= mask;
	  mask = ~mask;
	  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

	  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
	  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
	  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
	  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
	  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
	  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
	  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
	  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

	  f = this.h[0] + this.pad[0];
	  this.h[0] = f & 0xffff;
	  for (i = 1; i < 8; i++) {
	    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
	    this.h[i] = f & 0xffff;
	  }

	  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
	  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
	  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
	  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
	  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
	  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
	  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
	  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
	  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
	  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
	  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
	  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
	  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
	  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
	  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
	  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
	};

	poly1305.prototype.update = function(m, mpos, bytes) {
	  var i, want;

	  if (this.leftover) {
	    want = (16 - this.leftover);
	    if (want > bytes)
	      want = bytes;
	    for (i = 0; i < want; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    bytes -= want;
	    mpos += want;
	    this.leftover += want;
	    if (this.leftover < 16)
	      return;
	    this.blocks(this.buffer, 0, 16);
	    this.leftover = 0;
	  }

	  if (bytes >= 16) {
	    want = bytes - (bytes % 16);
	    this.blocks(m, mpos, want);
	    mpos += want;
	    bytes -= want;
	  }

	  if (bytes) {
	    for (i = 0; i < bytes; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    this.leftover += bytes;
	  }
	};

	function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
	  var s = new poly1305(k);
	  s.update(m, mpos, n);
	  s.finish(out, outpos);
	  return 0;
	}

	function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
	  var x = new Uint8Array(16);
	  crypto_onetimeauth(x,0,m,mpos,n,k);
	  return crypto_verify_16(h,hpos,x,0);
	}

	function crypto_secretbox(c,m,d,n,k) {
	  var i;
	  if (d < 32) return -1;
	  crypto_stream_xor(c,0,m,0,d,n,k);
	  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
	  for (i = 0; i < 16; i++) c[i] = 0;
	  return 0;
	}

	function crypto_secretbox_open(m,c,d,n,k) {
	  var i;
	  var x = new Uint8Array(32);
	  if (d < 32) return -1;
	  crypto_stream(x,0,32,n,k);
	  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
	  crypto_stream_xor(m,0,c,0,d,n,k);
	  for (i = 0; i < 32; i++) m[i] = 0;
	  return 0;
	}

	function set25519(r, a) {
	  var i;
	  for (i = 0; i < 16; i++) r[i] = a[i]|0;
	}

	function car25519(o) {
	  var i, v, c = 1;
	  for (i = 0; i < 16; i++) {
	    v = o[i] + c + 65535;
	    c = Math.floor(v / 65536);
	    o[i] = v - c * 65536;
	  }
	  o[0] += c-1 + 37 * (c-1);
	}

	function sel25519(p, q, b) {
	  var t, c = ~(b-1);
	  for (var i = 0; i < 16; i++) {
	    t = c & (p[i] ^ q[i]);
	    p[i] ^= t;
	    q[i] ^= t;
	  }
	}

	function pack25519(o, n) {
	  var i, j, b;
	  var m = gf(), t = gf();
	  for (i = 0; i < 16; i++) t[i] = n[i];
	  car25519(t);
	  car25519(t);
	  car25519(t);
	  for (j = 0; j < 2; j++) {
	    m[0] = t[0] - 0xffed;
	    for (i = 1; i < 15; i++) {
	      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
	      m[i-1] &= 0xffff;
	    }
	    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
	    b = (m[15]>>16) & 1;
	    m[14] &= 0xffff;
	    sel25519(t, m, 1-b);
	  }
	  for (i = 0; i < 16; i++) {
	    o[2*i] = t[i] & 0xff;
	    o[2*i+1] = t[i]>>8;
	  }
	}

	function neq25519(a, b) {
	  var c = new Uint8Array(32), d = new Uint8Array(32);
	  pack25519(c, a);
	  pack25519(d, b);
	  return crypto_verify_32(c, 0, d, 0);
	}

	function par25519(a) {
	  var d = new Uint8Array(32);
	  pack25519(d, a);
	  return d[0] & 1;
	}

	function unpack25519(o, n) {
	  var i;
	  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
	  o[15] &= 0x7fff;
	}

	function A(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
	}

	function Z(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
	}

	function M(o, a, b) {
	  var v, c,
	     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
	     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
	    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
	    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
	    b0 = b[0],
	    b1 = b[1],
	    b2 = b[2],
	    b3 = b[3],
	    b4 = b[4],
	    b5 = b[5],
	    b6 = b[6],
	    b7 = b[7],
	    b8 = b[8],
	    b9 = b[9],
	    b10 = b[10],
	    b11 = b[11],
	    b12 = b[12],
	    b13 = b[13],
	    b14 = b[14],
	    b15 = b[15];

	  v = a[0];
	  t0 += v * b0;
	  t1 += v * b1;
	  t2 += v * b2;
	  t3 += v * b3;
	  t4 += v * b4;
	  t5 += v * b5;
	  t6 += v * b6;
	  t7 += v * b7;
	  t8 += v * b8;
	  t9 += v * b9;
	  t10 += v * b10;
	  t11 += v * b11;
	  t12 += v * b12;
	  t13 += v * b13;
	  t14 += v * b14;
	  t15 += v * b15;
	  v = a[1];
	  t1 += v * b0;
	  t2 += v * b1;
	  t3 += v * b2;
	  t4 += v * b3;
	  t5 += v * b4;
	  t6 += v * b5;
	  t7 += v * b6;
	  t8 += v * b7;
	  t9 += v * b8;
	  t10 += v * b9;
	  t11 += v * b10;
	  t12 += v * b11;
	  t13 += v * b12;
	  t14 += v * b13;
	  t15 += v * b14;
	  t16 += v * b15;
	  v = a[2];
	  t2 += v * b0;
	  t3 += v * b1;
	  t4 += v * b2;
	  t5 += v * b3;
	  t6 += v * b4;
	  t7 += v * b5;
	  t8 += v * b6;
	  t9 += v * b7;
	  t10 += v * b8;
	  t11 += v * b9;
	  t12 += v * b10;
	  t13 += v * b11;
	  t14 += v * b12;
	  t15 += v * b13;
	  t16 += v * b14;
	  t17 += v * b15;
	  v = a[3];
	  t3 += v * b0;
	  t4 += v * b1;
	  t5 += v * b2;
	  t6 += v * b3;
	  t7 += v * b4;
	  t8 += v * b5;
	  t9 += v * b6;
	  t10 += v * b7;
	  t11 += v * b8;
	  t12 += v * b9;
	  t13 += v * b10;
	  t14 += v * b11;
	  t15 += v * b12;
	  t16 += v * b13;
	  t17 += v * b14;
	  t18 += v * b15;
	  v = a[4];
	  t4 += v * b0;
	  t5 += v * b1;
	  t6 += v * b2;
	  t7 += v * b3;
	  t8 += v * b4;
	  t9 += v * b5;
	  t10 += v * b6;
	  t11 += v * b7;
	  t12 += v * b8;
	  t13 += v * b9;
	  t14 += v * b10;
	  t15 += v * b11;
	  t16 += v * b12;
	  t17 += v * b13;
	  t18 += v * b14;
	  t19 += v * b15;
	  v = a[5];
	  t5 += v * b0;
	  t6 += v * b1;
	  t7 += v * b2;
	  t8 += v * b3;
	  t9 += v * b4;
	  t10 += v * b5;
	  t11 += v * b6;
	  t12 += v * b7;
	  t13 += v * b8;
	  t14 += v * b9;
	  t15 += v * b10;
	  t16 += v * b11;
	  t17 += v * b12;
	  t18 += v * b13;
	  t19 += v * b14;
	  t20 += v * b15;
	  v = a[6];
	  t6 += v * b0;
	  t7 += v * b1;
	  t8 += v * b2;
	  t9 += v * b3;
	  t10 += v * b4;
	  t11 += v * b5;
	  t12 += v * b6;
	  t13 += v * b7;
	  t14 += v * b8;
	  t15 += v * b9;
	  t16 += v * b10;
	  t17 += v * b11;
	  t18 += v * b12;
	  t19 += v * b13;
	  t20 += v * b14;
	  t21 += v * b15;
	  v = a[7];
	  t7 += v * b0;
	  t8 += v * b1;
	  t9 += v * b2;
	  t10 += v * b3;
	  t11 += v * b4;
	  t12 += v * b5;
	  t13 += v * b6;
	  t14 += v * b7;
	  t15 += v * b8;
	  t16 += v * b9;
	  t17 += v * b10;
	  t18 += v * b11;
	  t19 += v * b12;
	  t20 += v * b13;
	  t21 += v * b14;
	  t22 += v * b15;
	  v = a[8];
	  t8 += v * b0;
	  t9 += v * b1;
	  t10 += v * b2;
	  t11 += v * b3;
	  t12 += v * b4;
	  t13 += v * b5;
	  t14 += v * b6;
	  t15 += v * b7;
	  t16 += v * b8;
	  t17 += v * b9;
	  t18 += v * b10;
	  t19 += v * b11;
	  t20 += v * b12;
	  t21 += v * b13;
	  t22 += v * b14;
	  t23 += v * b15;
	  v = a[9];
	  t9 += v * b0;
	  t10 += v * b1;
	  t11 += v * b2;
	  t12 += v * b3;
	  t13 += v * b4;
	  t14 += v * b5;
	  t15 += v * b6;
	  t16 += v * b7;
	  t17 += v * b8;
	  t18 += v * b9;
	  t19 += v * b10;
	  t20 += v * b11;
	  t21 += v * b12;
	  t22 += v * b13;
	  t23 += v * b14;
	  t24 += v * b15;
	  v = a[10];
	  t10 += v * b0;
	  t11 += v * b1;
	  t12 += v * b2;
	  t13 += v * b3;
	  t14 += v * b4;
	  t15 += v * b5;
	  t16 += v * b6;
	  t17 += v * b7;
	  t18 += v * b8;
	  t19 += v * b9;
	  t20 += v * b10;
	  t21 += v * b11;
	  t22 += v * b12;
	  t23 += v * b13;
	  t24 += v * b14;
	  t25 += v * b15;
	  v = a[11];
	  t11 += v * b0;
	  t12 += v * b1;
	  t13 += v * b2;
	  t14 += v * b3;
	  t15 += v * b4;
	  t16 += v * b5;
	  t17 += v * b6;
	  t18 += v * b7;
	  t19 += v * b8;
	  t20 += v * b9;
	  t21 += v * b10;
	  t22 += v * b11;
	  t23 += v * b12;
	  t24 += v * b13;
	  t25 += v * b14;
	  t26 += v * b15;
	  v = a[12];
	  t12 += v * b0;
	  t13 += v * b1;
	  t14 += v * b2;
	  t15 += v * b3;
	  t16 += v * b4;
	  t17 += v * b5;
	  t18 += v * b6;
	  t19 += v * b7;
	  t20 += v * b8;
	  t21 += v * b9;
	  t22 += v * b10;
	  t23 += v * b11;
	  t24 += v * b12;
	  t25 += v * b13;
	  t26 += v * b14;
	  t27 += v * b15;
	  v = a[13];
	  t13 += v * b0;
	  t14 += v * b1;
	  t15 += v * b2;
	  t16 += v * b3;
	  t17 += v * b4;
	  t18 += v * b5;
	  t19 += v * b6;
	  t20 += v * b7;
	  t21 += v * b8;
	  t22 += v * b9;
	  t23 += v * b10;
	  t24 += v * b11;
	  t25 += v * b12;
	  t26 += v * b13;
	  t27 += v * b14;
	  t28 += v * b15;
	  v = a[14];
	  t14 += v * b0;
	  t15 += v * b1;
	  t16 += v * b2;
	  t17 += v * b3;
	  t18 += v * b4;
	  t19 += v * b5;
	  t20 += v * b6;
	  t21 += v * b7;
	  t22 += v * b8;
	  t23 += v * b9;
	  t24 += v * b10;
	  t25 += v * b11;
	  t26 += v * b12;
	  t27 += v * b13;
	  t28 += v * b14;
	  t29 += v * b15;
	  v = a[15];
	  t15 += v * b0;
	  t16 += v * b1;
	  t17 += v * b2;
	  t18 += v * b3;
	  t19 += v * b4;
	  t20 += v * b5;
	  t21 += v * b6;
	  t22 += v * b7;
	  t23 += v * b8;
	  t24 += v * b9;
	  t25 += v * b10;
	  t26 += v * b11;
	  t27 += v * b12;
	  t28 += v * b13;
	  t29 += v * b14;
	  t30 += v * b15;

	  t0  += 38 * t16;
	  t1  += 38 * t17;
	  t2  += 38 * t18;
	  t3  += 38 * t19;
	  t4  += 38 * t20;
	  t5  += 38 * t21;
	  t6  += 38 * t22;
	  t7  += 38 * t23;
	  t8  += 38 * t24;
	  t9  += 38 * t25;
	  t10 += 38 * t26;
	  t11 += 38 * t27;
	  t12 += 38 * t28;
	  t13 += 38 * t29;
	  t14 += 38 * t30;
	  // t15 left as is

	  // first car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  // second car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  o[ 0] = t0;
	  o[ 1] = t1;
	  o[ 2] = t2;
	  o[ 3] = t3;
	  o[ 4] = t4;
	  o[ 5] = t5;
	  o[ 6] = t6;
	  o[ 7] = t7;
	  o[ 8] = t8;
	  o[ 9] = t9;
	  o[10] = t10;
	  o[11] = t11;
	  o[12] = t12;
	  o[13] = t13;
	  o[14] = t14;
	  o[15] = t15;
	}

	function S(o, a) {
	  M(o, a, a);
	}

	function inv25519(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 253; a >= 0; a--) {
	    S(c, c);
	    if(a !== 2 && a !== 4) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function pow2523(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 250; a >= 0; a--) {
	      S(c, c);
	      if(a !== 1) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function crypto_scalarmult(q, n, p) {
	  var z = new Uint8Array(32);
	  var x = new Float64Array(80), r, i;
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf();
	  for (i = 0; i < 31; i++) z[i] = n[i];
	  z[31]=(n[31]&127)|64;
	  z[0]&=248;
	  unpack25519(x,p);
	  for (i = 0; i < 16; i++) {
	    b[i]=x[i];
	    d[i]=a[i]=c[i]=0;
	  }
	  a[0]=d[0]=1;
	  for (i=254; i>=0; --i) {
	    r=(z[i>>>3]>>>(i&7))&1;
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	    A(e,a,c);
	    Z(a,a,c);
	    A(c,b,d);
	    Z(b,b,d);
	    S(d,e);
	    S(f,a);
	    M(a,c,a);
	    M(c,b,e);
	    A(e,a,c);
	    Z(a,a,c);
	    S(b,a);
	    Z(c,d,f);
	    M(a,c,_121665);
	    A(a,a,d);
	    M(c,c,a);
	    M(a,d,f);
	    M(d,b,x);
	    S(b,e);
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	  }
	  for (i = 0; i < 16; i++) {
	    x[i+16]=a[i];
	    x[i+32]=c[i];
	    x[i+48]=b[i];
	    x[i+64]=d[i];
	  }
	  var x32 = x.subarray(32);
	  var x16 = x.subarray(16);
	  inv25519(x32,x32);
	  M(x16,x16,x32);
	  pack25519(q,x16);
	  return 0;
	}

	function crypto_scalarmult_base(q, n) {
	  return crypto_scalarmult(q, n, _9);
	}

	function crypto_box_keypair(y, x) {
	  randombytes(x, 32);
	  return crypto_scalarmult_base(y, x);
	}

	function crypto_box_beforenm(k, y, x) {
	  var s = new Uint8Array(32);
	  crypto_scalarmult(s, x, y);
	  return crypto_core_hsalsa20(k, _0, s, sigma);
	}

	var crypto_box_afternm = crypto_secretbox;
	var crypto_box_open_afternm = crypto_secretbox_open;

	function crypto_box(c, m, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_afternm(c, m, d, n, k);
	}

	function crypto_box_open(m, c, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_open_afternm(m, c, d, n, k);
	}

	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function crypto_hashblocks_hl(hh, hl, m, n) {
	  var wh = new Int32Array(16), wl = new Int32Array(16),
	      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
	      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
	      th, tl, i, j, h, l, a, b, c, d;

	  var ah0 = hh[0],
	      ah1 = hh[1],
	      ah2 = hh[2],
	      ah3 = hh[3],
	      ah4 = hh[4],
	      ah5 = hh[5],
	      ah6 = hh[6],
	      ah7 = hh[7],

	      al0 = hl[0],
	      al1 = hl[1],
	      al2 = hl[2],
	      al3 = hl[3],
	      al4 = hl[4],
	      al5 = hl[5],
	      al6 = hl[6],
	      al7 = hl[7];

	  var pos = 0;
	  while (n >= 128) {
	    for (i = 0; i < 16; i++) {
	      j = 8 * i + pos;
	      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
	      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
	    }
	    for (i = 0; i < 80; i++) {
	      bh0 = ah0;
	      bh1 = ah1;
	      bh2 = ah2;
	      bh3 = ah3;
	      bh4 = ah4;
	      bh5 = ah5;
	      bh6 = ah6;
	      bh7 = ah7;

	      bl0 = al0;
	      bl1 = al1;
	      bl2 = al2;
	      bl3 = al3;
	      bl4 = al4;
	      bl5 = al5;
	      bl6 = al6;
	      bl7 = al7;

	      // add
	      h = ah7;
	      l = al7;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma1
	      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
	      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Ch
	      h = (ah4 & ah5) ^ (~ah4 & ah6);
	      l = (al4 & al5) ^ (~al4 & al6);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // K
	      h = K[i*2];
	      l = K[i*2+1];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // w
	      h = wh[i%16];
	      l = wl[i%16];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      th = c & 0xffff | d << 16;
	      tl = a & 0xffff | b << 16;

	      // add
	      h = th;
	      l = tl;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma0
	      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
	      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Maj
	      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
	      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh7 = (c & 0xffff) | (d << 16);
	      bl7 = (a & 0xffff) | (b << 16);

	      // add
	      h = bh3;
	      l = bl3;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      h = th;
	      l = tl;

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh3 = (c & 0xffff) | (d << 16);
	      bl3 = (a & 0xffff) | (b << 16);

	      ah1 = bh0;
	      ah2 = bh1;
	      ah3 = bh2;
	      ah4 = bh3;
	      ah5 = bh4;
	      ah6 = bh5;
	      ah7 = bh6;
	      ah0 = bh7;

	      al1 = bl0;
	      al2 = bl1;
	      al3 = bl2;
	      al4 = bl3;
	      al5 = bl4;
	      al6 = bl5;
	      al7 = bl6;
	      al0 = bl7;

	      if (i%16 === 15) {
	        for (j = 0; j < 16; j++) {
	          // add
	          h = wh[j];
	          l = wl[j];

	          a = l & 0xffff; b = l >>> 16;
	          c = h & 0xffff; d = h >>> 16;

	          h = wh[(j+9)%16];
	          l = wl[(j+9)%16];

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma0
	          th = wh[(j+1)%16];
	          tl = wl[(j+1)%16];
	          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
	          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma1
	          th = wh[(j+14)%16];
	          tl = wl[(j+14)%16];
	          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
	          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          b += a >>> 16;
	          c += b >>> 16;
	          d += c >>> 16;

	          wh[j] = (c & 0xffff) | (d << 16);
	          wl[j] = (a & 0xffff) | (b << 16);
	        }
	      }
	    }

	    // add
	    h = ah0;
	    l = al0;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[0];
	    l = hl[0];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[0] = ah0 = (c & 0xffff) | (d << 16);
	    hl[0] = al0 = (a & 0xffff) | (b << 16);

	    h = ah1;
	    l = al1;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[1];
	    l = hl[1];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[1] = ah1 = (c & 0xffff) | (d << 16);
	    hl[1] = al1 = (a & 0xffff) | (b << 16);

	    h = ah2;
	    l = al2;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[2];
	    l = hl[2];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[2] = ah2 = (c & 0xffff) | (d << 16);
	    hl[2] = al2 = (a & 0xffff) | (b << 16);

	    h = ah3;
	    l = al3;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[3];
	    l = hl[3];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[3] = ah3 = (c & 0xffff) | (d << 16);
	    hl[3] = al3 = (a & 0xffff) | (b << 16);

	    h = ah4;
	    l = al4;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[4];
	    l = hl[4];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[4] = ah4 = (c & 0xffff) | (d << 16);
	    hl[4] = al4 = (a & 0xffff) | (b << 16);

	    h = ah5;
	    l = al5;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[5];
	    l = hl[5];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[5] = ah5 = (c & 0xffff) | (d << 16);
	    hl[5] = al5 = (a & 0xffff) | (b << 16);

	    h = ah6;
	    l = al6;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[6];
	    l = hl[6];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[6] = ah6 = (c & 0xffff) | (d << 16);
	    hl[6] = al6 = (a & 0xffff) | (b << 16);

	    h = ah7;
	    l = al7;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[7];
	    l = hl[7];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[7] = ah7 = (c & 0xffff) | (d << 16);
	    hl[7] = al7 = (a & 0xffff) | (b << 16);

	    pos += 128;
	    n -= 128;
	  }

	  return n;
	}

	function crypto_hash(out, m, n) {
	  var hh = new Int32Array(8),
	      hl = new Int32Array(8),
	      x = new Uint8Array(256),
	      i, b = n;

	  hh[0] = 0x6a09e667;
	  hh[1] = 0xbb67ae85;
	  hh[2] = 0x3c6ef372;
	  hh[3] = 0xa54ff53a;
	  hh[4] = 0x510e527f;
	  hh[5] = 0x9b05688c;
	  hh[6] = 0x1f83d9ab;
	  hh[7] = 0x5be0cd19;

	  hl[0] = 0xf3bcc908;
	  hl[1] = 0x84caa73b;
	  hl[2] = 0xfe94f82b;
	  hl[3] = 0x5f1d36f1;
	  hl[4] = 0xade682d1;
	  hl[5] = 0x2b3e6c1f;
	  hl[6] = 0xfb41bd6b;
	  hl[7] = 0x137e2179;

	  crypto_hashblocks_hl(hh, hl, m, n);
	  n %= 128;

	  for (i = 0; i < n; i++) x[i] = m[b-n+i];
	  x[n] = 128;

	  n = 256-128*(n<112?1:0);
	  x[n-9] = 0;
	  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
	  crypto_hashblocks_hl(hh, hl, x, n);

	  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

	  return 0;
	}

	function add(p, q) {
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf(),
	      g = gf(), h = gf(), t = gf();

	  Z(a, p[1], p[0]);
	  Z(t, q[1], q[0]);
	  M(a, a, t);
	  A(b, p[0], p[1]);
	  A(t, q[0], q[1]);
	  M(b, b, t);
	  M(c, p[3], q[3]);
	  M(c, c, D2);
	  M(d, p[2], q[2]);
	  A(d, d, d);
	  Z(e, b, a);
	  Z(f, d, c);
	  A(g, d, c);
	  A(h, b, a);

	  M(p[0], e, f);
	  M(p[1], h, g);
	  M(p[2], g, f);
	  M(p[3], e, h);
	}

	function cswap(p, q, b) {
	  var i;
	  for (i = 0; i < 4; i++) {
	    sel25519(p[i], q[i], b);
	  }
	}

	function pack(r, p) {
	  var tx = gf(), ty = gf(), zi = gf();
	  inv25519(zi, p[2]);
	  M(tx, p[0], zi);
	  M(ty, p[1], zi);
	  pack25519(r, ty);
	  r[31] ^= par25519(tx) << 7;
	}

	function scalarmult(p, q, s) {
	  var b, i;
	  set25519(p[0], gf0);
	  set25519(p[1], gf1);
	  set25519(p[2], gf1);
	  set25519(p[3], gf0);
	  for (i = 255; i >= 0; --i) {
	    b = (s[(i/8)|0] >> (i&7)) & 1;
	    cswap(p, q, b);
	    add(q, p);
	    add(p, p);
	    cswap(p, q, b);
	  }
	}

	function scalarbase(p, s) {
	  var q = [gf(), gf(), gf(), gf()];
	  set25519(q[0], X);
	  set25519(q[1], Y);
	  set25519(q[2], gf1);
	  M(q[3], X, Y);
	  scalarmult(p, q, s);
	}

	function crypto_sign_keypair(pk, sk, seeded) {
	  var d = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()];
	  var i;

	  if (!seeded) randombytes(sk, 32);
	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  scalarbase(p, d);
	  pack(pk, p);

	  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
	  return 0;
	}

	var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

	function modL(r, x) {
	  var carry, i, j, k;
	  for (i = 63; i >= 32; --i) {
	    carry = 0;
	    for (j = i - 32, k = i - 12; j < k; ++j) {
	      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
	      carry = Math.floor((x[j] + 128) / 256);
	      x[j] -= carry * 256;
	    }
	    x[j] += carry;
	    x[i] = 0;
	  }
	  carry = 0;
	  for (j = 0; j < 32; j++) {
	    x[j] += carry - (x[31] >> 4) * L[j];
	    carry = x[j] >> 8;
	    x[j] &= 255;
	  }
	  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
	  for (i = 0; i < 32; i++) {
	    x[i+1] += x[i] >> 8;
	    r[i] = x[i] & 255;
	  }
	}

	function reduce(r) {
	  var x = new Float64Array(64), i;
	  for (i = 0; i < 64; i++) x[i] = r[i];
	  for (i = 0; i < 64; i++) r[i] = 0;
	  modL(r, x);
	}

	// Note: difference from C - smlen returned, not passed as argument.
	function crypto_sign(sm, m, n, sk) {
	  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
	  var i, j, x = new Float64Array(64);
	  var p = [gf(), gf(), gf(), gf()];

	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  var smlen = n + 64;
	  for (i = 0; i < n; i++) sm[64 + i] = m[i];
	  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

	  crypto_hash(r, sm.subarray(32), n+32);
	  reduce(r);
	  scalarbase(p, r);
	  pack(sm, p);

	  for (i = 32; i < 64; i++) sm[i] = sk[i];
	  crypto_hash(h, sm, n + 64);
	  reduce(h);

	  for (i = 0; i < 64; i++) x[i] = 0;
	  for (i = 0; i < 32; i++) x[i] = r[i];
	  for (i = 0; i < 32; i++) {
	    for (j = 0; j < 32; j++) {
	      x[i+j] += h[i] * d[j];
	    }
	  }

	  modL(sm.subarray(32), x);
	  return smlen;
	}

	function unpackneg(r, p) {
	  var t = gf(), chk = gf(), num = gf(),
	      den = gf(), den2 = gf(), den4 = gf(),
	      den6 = gf();

	  set25519(r[2], gf1);
	  unpack25519(r[1], p);
	  S(num, r[1]);
	  M(den, num, D);
	  Z(num, num, r[2]);
	  A(den, r[2], den);

	  S(den2, den);
	  S(den4, den2);
	  M(den6, den4, den2);
	  M(t, den6, num);
	  M(t, t, den);

	  pow2523(t, t);
	  M(t, t, num);
	  M(t, t, den);
	  M(t, t, den);
	  M(r[0], t, den);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) M(r[0], r[0], I);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) return -1;

	  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

	  M(r[3], r[0], r[1]);
	  return 0;
	}

	function crypto_sign_open(m, sm, n, pk) {
	  var i;
	  var t = new Uint8Array(32), h = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()],
	      q = [gf(), gf(), gf(), gf()];

	  if (n < 64) return -1;

	  if (unpackneg(q, pk)) return -1;

	  for (i = 0; i < n; i++) m[i] = sm[i];
	  for (i = 0; i < 32; i++) m[i+32] = pk[i];
	  crypto_hash(h, m, n);
	  reduce(h);
	  scalarmult(p, q, h);

	  scalarbase(q, sm.subarray(32));
	  add(p, q);
	  pack(t, p);

	  n -= 64;
	  if (crypto_verify_32(sm, 0, t, 0)) {
	    for (i = 0; i < n; i++) m[i] = 0;
	    return -1;
	  }

	  for (i = 0; i < n; i++) m[i] = sm[i + 64];
	  return n;
	}

	var crypto_secretbox_KEYBYTES = 32,
	    crypto_secretbox_NONCEBYTES = 24,
	    crypto_secretbox_ZEROBYTES = 32,
	    crypto_secretbox_BOXZEROBYTES = 16,
	    crypto_scalarmult_BYTES = 32,
	    crypto_scalarmult_SCALARBYTES = 32,
	    crypto_box_PUBLICKEYBYTES = 32,
	    crypto_box_SECRETKEYBYTES = 32,
	    crypto_box_BEFORENMBYTES = 32,
	    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
	    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
	    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
	    crypto_sign_BYTES = 64,
	    crypto_sign_PUBLICKEYBYTES = 32,
	    crypto_sign_SECRETKEYBYTES = 64,
	    crypto_sign_SEEDBYTES = 32,
	    crypto_hash_BYTES = 64;

	nacl.lowlevel = {
	  crypto_core_hsalsa20: crypto_core_hsalsa20,
	  crypto_stream_xor: crypto_stream_xor,
	  crypto_stream: crypto_stream,
	  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
	  crypto_stream_salsa20: crypto_stream_salsa20,
	  crypto_onetimeauth: crypto_onetimeauth,
	  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
	  crypto_verify_16: crypto_verify_16,
	  crypto_verify_32: crypto_verify_32,
	  crypto_secretbox: crypto_secretbox,
	  crypto_secretbox_open: crypto_secretbox_open,
	  crypto_scalarmult: crypto_scalarmult,
	  crypto_scalarmult_base: crypto_scalarmult_base,
	  crypto_box_beforenm: crypto_box_beforenm,
	  crypto_box_afternm: crypto_box_afternm,
	  crypto_box: crypto_box,
	  crypto_box_open: crypto_box_open,
	  crypto_box_keypair: crypto_box_keypair,
	  crypto_hash: crypto_hash,
	  crypto_sign: crypto_sign,
	  crypto_sign_keypair: crypto_sign_keypair,
	  crypto_sign_open: crypto_sign_open,

	  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
	  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
	  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
	  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
	  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
	  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
	  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
	  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
	  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
	  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
	  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
	  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
	  crypto_sign_BYTES: crypto_sign_BYTES,
	  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
	  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
	  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
	  crypto_hash_BYTES: crypto_hash_BYTES,

	  gf: gf,
	  D: D,
	  L: L,
	  pack25519: pack25519,
	  unpack25519: unpack25519,
	  M: M,
	  A: A,
	  S: S,
	  Z: Z,
	  pow2523: pow2523,
	  add: add,
	  set25519: set25519,
	  modL: modL,
	  scalarmult: scalarmult,
	  scalarbase: scalarbase,
	};

	/* High-level API */

	function checkLengths(k, n) {
	  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
	  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
	}

	function checkBoxLengths(pk, sk) {
	  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
	  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
	}

	function checkArrayTypes() {
	  for (var i = 0; i < arguments.length; i++) {
	    if (!(arguments[i] instanceof Uint8Array))
	      throw new TypeError('unexpected type, use Uint8Array');
	  }
	}

	function cleanup(arr) {
	  for (var i = 0; i < arr.length; i++) arr[i] = 0;
	}

	nacl.randomBytes = function(n) {
	  var b = new Uint8Array(n);
	  randombytes(b, n);
	  return b;
	};

	nacl.secretbox = function(msg, nonce, key) {
	  checkArrayTypes(msg, nonce, key);
	  checkLengths(key, nonce);
	  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
	  var c = new Uint8Array(m.length);
	  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
	  crypto_secretbox(c, m, m.length, nonce, key);
	  return c.subarray(crypto_secretbox_BOXZEROBYTES);
	};

	nacl.secretbox.open = function(box, nonce, key) {
	  checkArrayTypes(box, nonce, key);
	  checkLengths(key, nonce);
	  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
	  var m = new Uint8Array(c.length);
	  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
	  if (c.length < 32) return null;
	  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
	  return m.subarray(crypto_secretbox_ZEROBYTES);
	};

	nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
	nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
	nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

	nacl.scalarMult = function(n, p) {
	  checkArrayTypes(n, p);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult(q, n, p);
	  return q;
	};

	nacl.scalarMult.base = function(n) {
	  checkArrayTypes(n);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult_base(q, n);
	  return q;
	};

	nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
	nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

	nacl.box = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox(msg, nonce, k);
	};

	nacl.box.before = function(publicKey, secretKey) {
	  checkArrayTypes(publicKey, secretKey);
	  checkBoxLengths(publicKey, secretKey);
	  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
	  crypto_box_beforenm(k, publicKey, secretKey);
	  return k;
	};

	nacl.box.after = nacl.secretbox;

	nacl.box.open = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox.open(msg, nonce, k);
	};

	nacl.box.open.after = nacl.secretbox.open;

	nacl.box.keyPair = function() {
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
	  crypto_box_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.box.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  crypto_scalarmult_base(pk, secretKey);
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
	nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
	nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
	nacl.box.nonceLength = crypto_box_NONCEBYTES;
	nacl.box.overheadLength = nacl.secretbox.overheadLength;

	nacl.sign = function(msg, secretKey) {
	  checkArrayTypes(msg, secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
	  crypto_sign(signedMsg, msg, msg.length, secretKey);
	  return signedMsg;
	};

	nacl.sign.open = function(signedMsg, publicKey) {
	  checkArrayTypes(signedMsg, publicKey);
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var tmp = new Uint8Array(signedMsg.length);
	  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
	  if (mlen < 0) return null;
	  var m = new Uint8Array(mlen);
	  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
	  return m;
	};

	nacl.sign.detached = function(msg, secretKey) {
	  var signedMsg = nacl.sign(msg, secretKey);
	  var sig = new Uint8Array(crypto_sign_BYTES);
	  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
	  return sig;
	};

	nacl.sign.detached.verify = function(msg, sig, publicKey) {
	  checkArrayTypes(msg, sig, publicKey);
	  if (sig.length !== crypto_sign_BYTES)
	    throw new Error('bad signature size');
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var i;
	  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
	  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
	  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
	};

	nacl.sign.keyPair = function() {
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  crypto_sign_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.sign.keyPair.fromSeed = function(seed) {
	  checkArrayTypes(seed);
	  if (seed.length !== crypto_sign_SEEDBYTES)
	    throw new Error('bad seed size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  for (var i = 0; i < 32; i++) sk[i] = seed[i];
	  crypto_sign_keypair(pk, sk, true);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
	nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
	nacl.sign.seedLength = crypto_sign_SEEDBYTES;
	nacl.sign.signatureLength = crypto_sign_BYTES;

	nacl.hash = function(msg) {
	  checkArrayTypes(msg);
	  var h = new Uint8Array(crypto_hash_BYTES);
	  crypto_hash(h, msg, msg.length);
	  return h;
	};

	nacl.hash.hashLength = crypto_hash_BYTES;

	nacl.verify = function(x, y) {
	  checkArrayTypes(x, y);
	  // Zero length arguments are considered not equal.
	  if (x.length === 0 || y.length === 0) return false;
	  if (x.length !== y.length) return false;
	  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
	};

	nacl.setPRNG = function(fn) {
	  randombytes = fn;
	};

	(function() {
	  // Initialize PRNG if environment provides CSPRNG.
	  // If not, methods calling randombytes will throw.
	  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
	  if (crypto && crypto.getRandomValues) {
	    // Browsers.
	    var QUOTA = 65536;
	    nacl.setPRNG(function(x, n) {
	      var i, v = new Uint8Array(n);
	      for (i = 0; i < n; i += QUOTA) {
	        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
	      }
	      for (i = 0; i < n; i++) x[i] = v[i];
	      cleanup(v);
	    });
	  } else if (typeof commonjsRequire !== 'undefined') {
	    // Node.js.
	    crypto = require$$0$1;
	    if (crypto && crypto.randomBytes) {
	      nacl.setPRNG(function(x, n) {
	        var i, v = crypto.randomBytes(n);
	        for (i = 0; i < n; i++) x[i] = v[i];
	        cleanup(v);
	      });
	    }
	  }
	})();

	})(module.exports ? module.exports : (self.nacl = self.nacl || {})); 
} (naclFast));

var naclFastExports = naclFast.exports;
var nacl = /*@__PURE__*/getDefaultExportFromCjs(naclFastExports);

var sha512$1 = {exports: {}};

/*
 * [js-sha512]{@link https://github.com/emn178/js-sha512}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2018
 * @license MIT
 */

(function (module) {
	/*jslint bitwise: true */
	(function () {

	  var INPUT_ERROR = 'input is invalid type';
	  var FINALIZE_ERROR = 'finalize already called';
	  var WINDOW = typeof window === 'object';
	  var root = WINDOW ? window : {};
	  if (root.JS_SHA512_NO_WINDOW) {
	    WINDOW = false;
	  }
	  var WEB_WORKER = !WINDOW && typeof self === 'object';
	  var NODE_JS = !root.JS_SHA512_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
	  if (NODE_JS) {
	    root = commonjsGlobal;
	  } else if (WEB_WORKER) {
	    root = self;
	  }
	  var COMMON_JS = !root.JS_SHA512_NO_COMMON_JS && 'object' === 'object' && module.exports;
	  var ARRAY_BUFFER = !root.JS_SHA512_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var EXTRA = [-2147483648, 8388608, 32768, 128];
	  var SHIFT = [24, 16, 8, 0];
	  var K = [
	    0x428A2F98, 0xD728AE22, 0x71374491, 0x23EF65CD,
	    0xB5C0FBCF, 0xEC4D3B2F, 0xE9B5DBA5, 0x8189DBBC,
	    0x3956C25B, 0xF348B538, 0x59F111F1, 0xB605D019,
	    0x923F82A4, 0xAF194F9B, 0xAB1C5ED5, 0xDA6D8118,
	    0xD807AA98, 0xA3030242, 0x12835B01, 0x45706FBE,
	    0x243185BE, 0x4EE4B28C, 0x550C7DC3, 0xD5FFB4E2,
	    0x72BE5D74, 0xF27B896F, 0x80DEB1FE, 0x3B1696B1,
	    0x9BDC06A7, 0x25C71235, 0xC19BF174, 0xCF692694,
	    0xE49B69C1, 0x9EF14AD2, 0xEFBE4786, 0x384F25E3,
	    0x0FC19DC6, 0x8B8CD5B5, 0x240CA1CC, 0x77AC9C65,
	    0x2DE92C6F, 0x592B0275, 0x4A7484AA, 0x6EA6E483,
	    0x5CB0A9DC, 0xBD41FBD4, 0x76F988DA, 0x831153B5,
	    0x983E5152, 0xEE66DFAB, 0xA831C66D, 0x2DB43210,
	    0xB00327C8, 0x98FB213F, 0xBF597FC7, 0xBEEF0EE4,
	    0xC6E00BF3, 0x3DA88FC2, 0xD5A79147, 0x930AA725,
	    0x06CA6351, 0xE003826F, 0x14292967, 0x0A0E6E70,
	    0x27B70A85, 0x46D22FFC, 0x2E1B2138, 0x5C26C926,
	    0x4D2C6DFC, 0x5AC42AED, 0x53380D13, 0x9D95B3DF,
	    0x650A7354, 0x8BAF63DE, 0x766A0ABB, 0x3C77B2A8,
	    0x81C2C92E, 0x47EDAEE6, 0x92722C85, 0x1482353B,
	    0xA2BFE8A1, 0x4CF10364, 0xA81A664B, 0xBC423001,
	    0xC24B8B70, 0xD0F89791, 0xC76C51A3, 0x0654BE30,
	    0xD192E819, 0xD6EF5218, 0xD6990624, 0x5565A910,
	    0xF40E3585, 0x5771202A, 0x106AA070, 0x32BBD1B8,
	    0x19A4C116, 0xB8D2D0C8, 0x1E376C08, 0x5141AB53,
	    0x2748774C, 0xDF8EEB99, 0x34B0BCB5, 0xE19B48A8,
	    0x391C0CB3, 0xC5C95A63, 0x4ED8AA4A, 0xE3418ACB,
	    0x5B9CCA4F, 0x7763E373, 0x682E6FF3, 0xD6B2B8A3,
	    0x748F82EE, 0x5DEFB2FC, 0x78A5636F, 0x43172F60,
	    0x84C87814, 0xA1F0AB72, 0x8CC70208, 0x1A6439EC,
	    0x90BEFFFA, 0x23631E28, 0xA4506CEB, 0xDE82BDE9,
	    0xBEF9A3F7, 0xB2C67915, 0xC67178F2, 0xE372532B,
	    0xCA273ECE, 0xEA26619C, 0xD186B8C7, 0x21C0C207,
	    0xEADA7DD6, 0xCDE0EB1E, 0xF57D4F7F, 0xEE6ED178,
	    0x06F067AA, 0x72176FBA, 0x0A637DC5, 0xA2C898A6,
	    0x113F9804, 0xBEF90DAE, 0x1B710B35, 0x131C471B,
	    0x28DB77F5, 0x23047D84, 0x32CAAB7B, 0x40C72493,
	    0x3C9EBE0A, 0x15C9BEBC, 0x431D67C4, 0x9C100D4C,
	    0x4CC5D4BE, 0xCB3E42B6, 0x597F299C, 0xFC657E2A,
	    0x5FCB6FAB, 0x3AD6FAEC, 0x6C44198C, 0x4A475817
	  ];

	  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

	  var blocks = [];

	  if (root.JS_SHA512_NO_NODE_JS || !Array.isArray) {
	    Array.isArray = function (obj) {
	      return Object.prototype.toString.call(obj) === '[object Array]';
	    };
	  }

	  if (ARRAY_BUFFER && (root.JS_SHA512_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
	    ArrayBuffer.isView = function (obj) {
	      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
	    };
	  }

	  var createOutputMethod = function (outputType, bits) {
	    return function (message) {
	      return new Sha512(bits, true).update(message)[outputType]();
	    };
	  };

	  var createMethod = function (bits) {
	    var method = createOutputMethod('hex', bits);
	    method.create = function () {
	      return new Sha512(bits);
	    };
	    method.update = function (message) {
	      return method.create().update(message);
	    };
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createOutputMethod(type, bits);
	    }
	    return method;
	  };

	  var createHmacOutputMethod = function (outputType, bits) {
	    return function (key, message) {
	      return new HmacSha512(key, bits, true).update(message)[outputType]();
	    };
	  };

	  var createHmacMethod = function (bits) {
	    var method = createHmacOutputMethod('hex', bits);
	    method.create = function (key) {
	      return new HmacSha512(key, bits);
	    };
	    method.update = function (key, message) {
	      return method.create(key).update(message);
	    };
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createHmacOutputMethod(type, bits);
	    }
	    return method;
	  };

	  function Sha512(bits, sharedMemory) {
	    if (sharedMemory) {
	      blocks[0] = blocks[1] = blocks[2] = blocks[3] = blocks[4] =
	      blocks[5] = blocks[6] = blocks[7] = blocks[8] =
	      blocks[9] = blocks[10] = blocks[11] = blocks[12] =
	      blocks[13] = blocks[14] = blocks[15] = blocks[16] =
	      blocks[17] = blocks[18] = blocks[19] = blocks[20] =
	      blocks[21] = blocks[22] = blocks[23] = blocks[24] =
	      blocks[25] = blocks[26] = blocks[27] = blocks[28] =
	      blocks[29] = blocks[30] = blocks[31] = blocks[32] = 0;
	      this.blocks = blocks;
	    } else {
	      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	    }

	    if (bits == 384) {
	      this.h0h = 0xCBBB9D5D;
	      this.h0l = 0xC1059ED8;
	      this.h1h = 0x629A292A;
	      this.h1l = 0x367CD507;
	      this.h2h = 0x9159015A;
	      this.h2l = 0x3070DD17;
	      this.h3h = 0x152FECD8;
	      this.h3l = 0xF70E5939;
	      this.h4h = 0x67332667;
	      this.h4l = 0xFFC00B31;
	      this.h5h = 0x8EB44A87;
	      this.h5l = 0x68581511;
	      this.h6h = 0xDB0C2E0D;
	      this.h6l = 0x64F98FA7;
	      this.h7h = 0x47B5481D;
	      this.h7l = 0xBEFA4FA4;
	    } else if (bits == 256) {
	      this.h0h = 0x22312194;
	      this.h0l = 0xFC2BF72C;
	      this.h1h = 0x9F555FA3;
	      this.h1l = 0xC84C64C2;
	      this.h2h = 0x2393B86B;
	      this.h2l = 0x6F53B151;
	      this.h3h = 0x96387719;
	      this.h3l = 0x5940EABD;
	      this.h4h = 0x96283EE2;
	      this.h4l = 0xA88EFFE3;
	      this.h5h = 0xBE5E1E25;
	      this.h5l = 0x53863992;
	      this.h6h = 0x2B0199FC;
	      this.h6l = 0x2C85B8AA;
	      this.h7h = 0x0EB72DDC;
	      this.h7l = 0x81C52CA2;
	    } else if (bits == 224) {
	      this.h0h = 0x8C3D37C8;
	      this.h0l = 0x19544DA2;
	      this.h1h = 0x73E19966;
	      this.h1l = 0x89DCD4D6;
	      this.h2h = 0x1DFAB7AE;
	      this.h2l = 0x32FF9C82;
	      this.h3h = 0x679DD514;
	      this.h3l = 0x582F9FCF;
	      this.h4h = 0x0F6D2B69;
	      this.h4l = 0x7BD44DA8;
	      this.h5h = 0x77E36F73;
	      this.h5l = 0x04C48942;
	      this.h6h = 0x3F9D85A8;
	      this.h6l = 0x6A1D36C8;
	      this.h7h = 0x1112E6AD;
	      this.h7l = 0x91D692A1;
	    } else { // 512
	      this.h0h = 0x6A09E667;
	      this.h0l = 0xF3BCC908;
	      this.h1h = 0xBB67AE85;
	      this.h1l = 0x84CAA73B;
	      this.h2h = 0x3C6EF372;
	      this.h2l = 0xFE94F82B;
	      this.h3h = 0xA54FF53A;
	      this.h3l = 0x5F1D36F1;
	      this.h4h = 0x510E527F;
	      this.h4l = 0xADE682D1;
	      this.h5h = 0x9B05688C;
	      this.h5l = 0x2B3E6C1F;
	      this.h6h = 0x1F83D9AB;
	      this.h6l = 0xFB41BD6B;
	      this.h7h = 0x5BE0CD19;
	      this.h7l = 0x137E2179;
	    }
	    this.bits = bits;

	    this.block = this.start = this.bytes = this.hBytes = 0;
	    this.finalized = this.hashed = false;
	  }

	  Sha512.prototype.update = function (message) {
	    if (this.finalized) {
	      throw new Error(FINALIZE_ERROR);
	    }
	    var notString, type = typeof message;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (message === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
	          message = new Uint8Array(message);
	        } else if (!Array.isArray(message)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var code, index = 0, i, length = message.length, blocks = this.blocks;

	    while (index < length) {
	      if (this.hashed) {
	        this.hashed = false;
	        blocks[0] = this.block;
	        blocks[1] = blocks[2] = blocks[3] = blocks[4] =
	        blocks[5] = blocks[6] = blocks[7] = blocks[8] =
	        blocks[9] = blocks[10] = blocks[11] = blocks[12] =
	        blocks[13] = blocks[14] = blocks[15] = blocks[16] =
	        blocks[17] = blocks[18] = blocks[19] = blocks[20] =
	        blocks[21] = blocks[22] = blocks[23] = blocks[24] =
	        blocks[25] = blocks[26] = blocks[27] = blocks[28] =
	        blocks[29] = blocks[30] = blocks[31] = blocks[32] = 0;
	      }

	      if(notString) {
	        for (i = this.start; index < length && i < 128; ++index) {
	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
	        }
	      } else {
	        for (i = this.start; index < length && i < 128; ++index) {
	          code = message.charCodeAt(index);
	          if (code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          }
	        }
	      }

	      this.lastByteIndex = i;
	      this.bytes += i - this.start;
	      if (i >= 128) {
	        this.block = blocks[32];
	        this.start = i - 128;
	        this.hash();
	        this.hashed = true;
	      } else {
	        this.start = i;
	      }
	    }
	    if (this.bytes > 4294967295) {
	      this.hBytes += this.bytes / 4294967296 << 0;
	      this.bytes = this.bytes % 4294967296;
	    }
	    return this;
	  };

	  Sha512.prototype.finalize = function () {
	    if (this.finalized) {
	      return;
	    }
	    this.finalized = true;
	    var blocks = this.blocks, i = this.lastByteIndex;
	    blocks[32] = this.block;
	    blocks[i >> 2] |= EXTRA[i & 3];
	    this.block = blocks[32];
	    if (i >= 112) {
	      if (!this.hashed) {
	        this.hash();
	      }
	      blocks[0] = this.block;
	      blocks[1] = blocks[2] = blocks[3] = blocks[4] =
	      blocks[5] = blocks[6] = blocks[7] = blocks[8] =
	      blocks[9] = blocks[10] = blocks[11] = blocks[12] =
	      blocks[13] = blocks[14] = blocks[15] = blocks[16] =
	      blocks[17] = blocks[18] = blocks[19] = blocks[20] =
	      blocks[21] = blocks[22] = blocks[23] = blocks[24] =
	      blocks[25] = blocks[26] = blocks[27] = blocks[28] =
	      blocks[29] = blocks[30] = blocks[31] = blocks[32] = 0;
	    }
	    blocks[30] = this.hBytes << 3 | this.bytes >>> 29;
	    blocks[31] = this.bytes << 3;
	    this.hash();
	  };

	  Sha512.prototype.hash = function () {
	    var h0h = this.h0h, h0l = this.h0l, h1h = this.h1h, h1l = this.h1l,
	      h2h = this.h2h, h2l = this.h2l, h3h = this.h3h, h3l = this.h3l,
	      h4h = this.h4h, h4l = this.h4l, h5h = this.h5h, h5l = this.h5l,
	      h6h = this.h6h, h6l = this.h6l, h7h = this.h7h, h7l = this.h7l,
	      blocks = this.blocks, j, s0h, s0l, s1h, s1l, c1, c2, c3, c4,
	      abh, abl, dah, dal, cdh, cdl, bch, bcl,
	      majh, majl, t1h, t1l, t2h, t2l, chh, chl;

	    for (j = 32; j < 160; j += 2) {
	      t1h = blocks[j - 30];
	      t1l = blocks[j - 29];
	      s0h = ((t1h >>> 1) | (t1l << 31)) ^ ((t1h >>> 8) | (t1l << 24)) ^ (t1h >>> 7);
	      s0l = ((t1l >>> 1) | (t1h << 31)) ^ ((t1l >>> 8) | (t1h << 24)) ^ ((t1l >>> 7) | t1h << 25);

	      t1h = blocks[j - 4];
	      t1l = blocks[j - 3];
	      s1h = ((t1h >>> 19) | (t1l << 13)) ^ ((t1l >>> 29) | (t1h << 3)) ^ (t1h >>> 6);
	      s1l = ((t1l >>> 19) | (t1h << 13)) ^ ((t1h >>> 29) | (t1l << 3)) ^ ((t1l >>> 6) | t1h << 26);

	      t1h = blocks[j - 32];
	      t1l = blocks[j - 31];
	      t2h = blocks[j - 14];
	      t2l = blocks[j - 13];

	      c1 = (t2l & 0xFFFF) + (t1l & 0xFFFF) + (s0l & 0xFFFF) + (s1l & 0xFFFF);
	      c2 = (t2l >>> 16) + (t1l >>> 16) + (s0l >>> 16) + (s1l >>> 16) + (c1 >>> 16);
	      c3 = (t2h & 0xFFFF) + (t1h & 0xFFFF) + (s0h & 0xFFFF) + (s1h & 0xFFFF) + (c2 >>> 16);
	      c4 = (t2h >>> 16) + (t1h >>> 16) + (s0h >>> 16) + (s1h >>> 16) + (c3 >>> 16);

	      blocks[j] = (c4 << 16) | (c3 & 0xFFFF);
	      blocks[j + 1] = (c2 << 16) | (c1 & 0xFFFF);
	    }

	    var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;
	    bch = bh & ch;
	    bcl = bl & cl;
	    for (j = 0; j < 160; j += 8) {
	      s0h = ((ah >>> 28) | (al << 4)) ^ ((al >>> 2) | (ah << 30)) ^ ((al >>> 7) | (ah << 25));
	      s0l = ((al >>> 28) | (ah << 4)) ^ ((ah >>> 2) | (al << 30)) ^ ((ah >>> 7) | (al << 25));

	      s1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((el >>> 9) | (eh << 23));
	      s1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((eh >>> 9) | (el << 23));

	      abh = ah & bh;
	      abl = al & bl;
	      majh = abh ^ (ah & ch) ^ bch;
	      majl = abl ^ (al & cl) ^ bcl;

	      chh = (eh & fh) ^ (~eh & gh);
	      chl = (el & fl) ^ (~el & gl);

	      t1h = blocks[j];
	      t1l = blocks[j + 1];
	      t2h = K[j];
	      t2l = K[j + 1];

	      c1 = (t2l & 0xFFFF) + (t1l & 0xFFFF) + (chl & 0xFFFF) + (s1l & 0xFFFF) + (hl & 0xFFFF);
	      c2 = (t2l >>> 16) + (t1l >>> 16) + (chl >>> 16) + (s1l >>> 16) + (hl >>> 16) + (c1 >>> 16);
	      c3 = (t2h & 0xFFFF) + (t1h & 0xFFFF) + (chh & 0xFFFF) + (s1h & 0xFFFF) + (hh & 0xFFFF) + (c2 >>> 16);
	      c4 = (t2h >>> 16) + (t1h >>> 16) + (chh >>> 16) + (s1h >>> 16) + (hh >>> 16) + (c3 >>> 16);

	      t1h = (c4 << 16) | (c3 & 0xFFFF);
	      t1l = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (majl & 0xFFFF) + (s0l & 0xFFFF);
	      c2 = (majl >>> 16) + (s0l >>> 16) + (c1 >>> 16);
	      c3 = (majh & 0xFFFF) + (s0h & 0xFFFF) + (c2 >>> 16);
	      c4 = (majh >>> 16) + (s0h >>> 16) + (c3 >>> 16);

	      t2h = (c4 << 16) | (c3 & 0xFFFF);
	      t2l = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (dl & 0xFFFF) + (t1l & 0xFFFF);
	      c2 = (dl >>> 16) + (t1l >>> 16) + (c1 >>> 16);
	      c3 = (dh & 0xFFFF) + (t1h & 0xFFFF) + (c2 >>> 16);
	      c4 = (dh >>> 16) + (t1h >>> 16) + (c3 >>> 16);

	      hh = (c4 << 16) | (c3 & 0xFFFF);
	      hl = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (t2l & 0xFFFF) + (t1l & 0xFFFF);
	      c2 = (t2l >>> 16) + (t1l >>> 16) + (c1 >>> 16);
	      c3 = (t2h & 0xFFFF) + (t1h & 0xFFFF) + (c2 >>> 16);
	      c4 = (t2h >>> 16) + (t1h >>> 16) + (c3 >>> 16);

	      dh = (c4 << 16) | (c3 & 0xFFFF);
	      dl = (c2 << 16) | (c1 & 0xFFFF);

	      s0h = ((dh >>> 28) | (dl << 4)) ^ ((dl >>> 2) | (dh << 30)) ^ ((dl >>> 7) | (dh << 25));
	      s0l = ((dl >>> 28) | (dh << 4)) ^ ((dh >>> 2) | (dl << 30)) ^ ((dh >>> 7) | (dl << 25));

	      s1h = ((hh >>> 14) | (hl << 18)) ^ ((hh >>> 18) | (hl << 14)) ^ ((hl >>> 9) | (hh << 23));
	      s1l = ((hl >>> 14) | (hh << 18)) ^ ((hl >>> 18) | (hh << 14)) ^ ((hh >>> 9) | (hl << 23));

	      dah = dh & ah;
	      dal = dl & al;
	      majh = dah ^ (dh & bh) ^ abh;
	      majl = dal ^ (dl & bl) ^ abl;

	      chh = (hh & eh) ^ (~hh & fh);
	      chl = (hl & el) ^ (~hl & fl);

	      t1h = blocks[j + 2];
	      t1l = blocks[j + 3];
	      t2h = K[j + 2];
	      t2l = K[j + 3];

	      c1 = (t2l & 0xFFFF) + (t1l & 0xFFFF) + (chl & 0xFFFF) + (s1l & 0xFFFF) + (gl & 0xFFFF);
	      c2 = (t2l >>> 16) + (t1l >>> 16) + (chl >>> 16) + (s1l >>> 16) + (gl >>> 16) + (c1 >>> 16);
	      c3 = (t2h & 0xFFFF) + (t1h & 0xFFFF) + (chh & 0xFFFF) + (s1h & 0xFFFF) + (gh & 0xFFFF) + (c2 >>> 16);
	      c4 = (t2h >>> 16) + (t1h >>> 16) + (chh >>> 16) + (s1h >>> 16) + (gh >>> 16) + (c3 >>> 16);

	      t1h = (c4 << 16) | (c3 & 0xFFFF);
	      t1l = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (majl & 0xFFFF) + (s0l & 0xFFFF);
	      c2 = (majl >>> 16) + (s0l >>> 16) + (c1 >>> 16);
	      c3 = (majh & 0xFFFF) + (s0h & 0xFFFF) + (c2 >>> 16);
	      c4 = (majh >>> 16) + (s0h >>> 16) + (c3 >>> 16);

	      t2h = (c4 << 16) | (c3 & 0xFFFF);
	      t2l = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (cl & 0xFFFF) + (t1l & 0xFFFF);
	      c2 = (cl >>> 16) + (t1l >>> 16) + (c1 >>> 16);
	      c3 = (ch & 0xFFFF) + (t1h & 0xFFFF) + (c2 >>> 16);
	      c4 = (ch >>> 16) + (t1h >>> 16) + (c3 >>> 16);

	      gh = (c4 << 16) | (c3 & 0xFFFF);
	      gl = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (t2l & 0xFFFF) + (t1l & 0xFFFF);
	      c2 = (t2l >>> 16) + (t1l >>> 16) + (c1 >>> 16);
	      c3 = (t2h & 0xFFFF) + (t1h & 0xFFFF) + (c2 >>> 16);
	      c4 = (t2h >>> 16) + (t1h >>> 16) + (c3 >>> 16);

	      ch = (c4 << 16) | (c3 & 0xFFFF);
	      cl = (c2 << 16) | (c1 & 0xFFFF);

	      s0h = ((ch >>> 28) | (cl << 4)) ^ ((cl >>> 2) | (ch << 30)) ^ ((cl >>> 7) | (ch << 25));
	      s0l = ((cl >>> 28) | (ch << 4)) ^ ((ch >>> 2) | (cl << 30)) ^ ((ch >>> 7) | (cl << 25));

	      s1h = ((gh >>> 14) | (gl << 18)) ^ ((gh >>> 18) | (gl << 14)) ^ ((gl >>> 9) | (gh << 23));
	      s1l = ((gl >>> 14) | (gh << 18)) ^ ((gl >>> 18) | (gh << 14)) ^ ((gh >>> 9) | (gl << 23));

	      cdh = ch & dh;
	      cdl = cl & dl;
	      majh = cdh ^ (ch & ah) ^ dah;
	      majl = cdl ^ (cl & al) ^ dal;

	      chh = (gh & hh) ^ (~gh & eh);
	      chl = (gl & hl) ^ (~gl & el);

	      t1h = blocks[j + 4];
	      t1l = blocks[j + 5];
	      t2h = K[j + 4];
	      t2l = K[j + 5];

	      c1 = (t2l & 0xFFFF) + (t1l & 0xFFFF) + (chl & 0xFFFF) + (s1l & 0xFFFF) + (fl & 0xFFFF);
	      c2 = (t2l >>> 16) + (t1l >>> 16) + (chl >>> 16) + (s1l >>> 16) + (fl >>> 16) + (c1 >>> 16);
	      c3 = (t2h & 0xFFFF) + (t1h & 0xFFFF) + (chh & 0xFFFF) + (s1h & 0xFFFF) + (fh & 0xFFFF) + (c2 >>> 16);
	      c4 = (t2h >>> 16) + (t1h >>> 16) + (chh >>> 16) + (s1h >>> 16) + (fh >>> 16) + (c3 >>> 16);

	      t1h = (c4 << 16) | (c3 & 0xFFFF);
	      t1l = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (majl & 0xFFFF) + (s0l & 0xFFFF);
	      c2 = (majl >>> 16) + (s0l >>> 16) + (c1 >>> 16);
	      c3 = (majh & 0xFFFF) + (s0h & 0xFFFF) + (c2 >>> 16);
	      c4 = (majh >>> 16) + (s0h >>> 16) + (c3 >>> 16);

	      t2h = (c4 << 16) | (c3 & 0xFFFF);
	      t2l = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (bl & 0xFFFF) + (t1l & 0xFFFF);
	      c2 = (bl >>> 16) + (t1l >>> 16) + (c1 >>> 16);
	      c3 = (bh & 0xFFFF) + (t1h & 0xFFFF) + (c2 >>> 16);
	      c4 = (bh >>> 16) + (t1h >>> 16) + (c3 >>> 16);

	      fh = (c4 << 16) | (c3 & 0xFFFF);
	      fl = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (t2l & 0xFFFF) + (t1l & 0xFFFF);
	      c2 = (t2l >>> 16) + (t1l >>> 16) + (c1 >>> 16);
	      c3 = (t2h & 0xFFFF) + (t1h & 0xFFFF) + (c2 >>> 16);
	      c4 = (t2h >>> 16) + (t1h >>> 16) + (c3 >>> 16);

	      bh = (c4 << 16) | (c3 & 0xFFFF);
	      bl = (c2 << 16) | (c1 & 0xFFFF);

	      s0h = ((bh >>> 28) | (bl << 4)) ^ ((bl >>> 2) | (bh << 30)) ^ ((bl >>> 7) | (bh << 25));
	      s0l = ((bl >>> 28) | (bh << 4)) ^ ((bh >>> 2) | (bl << 30)) ^ ((bh >>> 7) | (bl << 25));

	      s1h = ((fh >>> 14) | (fl << 18)) ^ ((fh >>> 18) | (fl << 14)) ^ ((fl >>> 9) | (fh << 23));
	      s1l = ((fl >>> 14) | (fh << 18)) ^ ((fl >>> 18) | (fh << 14)) ^ ((fh >>> 9) | (fl << 23));

	      bch = bh & ch;
	      bcl = bl & cl;
	      majh = bch ^ (bh & dh) ^ cdh;
	      majl = bcl ^ (bl & dl) ^ cdl;

	      chh = (fh & gh) ^ (~fh & hh);
	      chl = (fl & gl) ^ (~fl & hl);

	      t1h = blocks[j + 6];
	      t1l = blocks[j + 7];
	      t2h = K[j + 6];
	      t2l = K[j + 7];

	      c1 = (t2l & 0xFFFF) + (t1l & 0xFFFF) + (chl & 0xFFFF) + (s1l & 0xFFFF) + (el & 0xFFFF);
	      c2 = (t2l >>> 16) + (t1l >>> 16) + (chl >>> 16) + (s1l >>> 16) + (el >>> 16) + (c1 >>> 16);
	      c3 = (t2h & 0xFFFF) + (t1h & 0xFFFF) + (chh & 0xFFFF) + (s1h & 0xFFFF) + (eh & 0xFFFF) + (c2 >>> 16);
	      c4 = (t2h >>> 16) + (t1h >>> 16) + (chh >>> 16) + (s1h >>> 16) + (eh >>> 16) + (c3 >>> 16);

	      t1h = (c4 << 16) | (c3 & 0xFFFF);
	      t1l = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (majl & 0xFFFF) + (s0l & 0xFFFF);
	      c2 = (majl >>> 16) + (s0l >>> 16) + (c1 >>> 16);
	      c3 = (majh & 0xFFFF) + (s0h & 0xFFFF) + (c2 >>> 16);
	      c4 = (majh >>> 16) + (s0h >>> 16) + (c3 >>> 16);

	      t2h = (c4 << 16) | (c3 & 0xFFFF);
	      t2l = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (al & 0xFFFF) + (t1l & 0xFFFF);
	      c2 = (al >>> 16) + (t1l >>> 16) + (c1 >>> 16);
	      c3 = (ah & 0xFFFF) + (t1h & 0xFFFF) + (c2 >>> 16);
	      c4 = (ah >>> 16) + (t1h >>> 16) + (c3 >>> 16);

	      eh = (c4 << 16) | (c3 & 0xFFFF);
	      el = (c2 << 16) | (c1 & 0xFFFF);

	      c1 = (t2l & 0xFFFF) + (t1l & 0xFFFF);
	      c2 = (t2l >>> 16) + (t1l >>> 16) + (c1 >>> 16);
	      c3 = (t2h & 0xFFFF) + (t1h & 0xFFFF) + (c2 >>> 16);
	      c4 = (t2h >>> 16) + (t1h >>> 16) + (c3 >>> 16);

	      ah = (c4 << 16) | (c3 & 0xFFFF);
	      al = (c2 << 16) | (c1 & 0xFFFF);
	    }

	    c1 = (h0l & 0xFFFF) + (al & 0xFFFF);
	    c2 = (h0l >>> 16) + (al >>> 16) + (c1 >>> 16);
	    c3 = (h0h & 0xFFFF) + (ah & 0xFFFF) + (c2 >>> 16);
	    c4 = (h0h >>> 16) + (ah >>> 16) + (c3 >>> 16);

	    this.h0h = (c4 << 16) | (c3 & 0xFFFF);
	    this.h0l = (c2 << 16) | (c1 & 0xFFFF);

	    c1 = (h1l & 0xFFFF) + (bl & 0xFFFF);
	    c2 = (h1l >>> 16) + (bl >>> 16) + (c1 >>> 16);
	    c3 = (h1h & 0xFFFF) + (bh & 0xFFFF) + (c2 >>> 16);
	    c4 = (h1h >>> 16) + (bh >>> 16) + (c3 >>> 16);

	    this.h1h = (c4 << 16) | (c3 & 0xFFFF);
	    this.h1l = (c2 << 16) | (c1 & 0xFFFF);

	    c1 = (h2l & 0xFFFF) + (cl & 0xFFFF);
	    c2 = (h2l >>> 16) + (cl >>> 16) + (c1 >>> 16);
	    c3 = (h2h & 0xFFFF) + (ch & 0xFFFF) + (c2 >>> 16);
	    c4 = (h2h >>> 16) + (ch >>> 16) + (c3 >>> 16);

	    this.h2h = (c4 << 16) | (c3 & 0xFFFF);
	    this.h2l = (c2 << 16) | (c1 & 0xFFFF);

	    c1 = (h3l & 0xFFFF) + (dl & 0xFFFF);
	    c2 = (h3l >>> 16) + (dl >>> 16) + (c1 >>> 16);
	    c3 = (h3h & 0xFFFF) + (dh & 0xFFFF) + (c2 >>> 16);
	    c4 = (h3h >>> 16) + (dh >>> 16) + (c3 >>> 16);

	    this.h3h = (c4 << 16) | (c3 & 0xFFFF);
	    this.h3l = (c2 << 16) | (c1 & 0xFFFF);

	    c1 = (h4l & 0xFFFF) + (el & 0xFFFF);
	    c2 = (h4l >>> 16) + (el >>> 16) + (c1 >>> 16);
	    c3 = (h4h & 0xFFFF) + (eh & 0xFFFF) + (c2 >>> 16);
	    c4 = (h4h >>> 16) + (eh >>> 16) + (c3 >>> 16);

	    this.h4h = (c4 << 16) | (c3 & 0xFFFF);
	    this.h4l = (c2 << 16) | (c1 & 0xFFFF);

	    c1 = (h5l & 0xFFFF) + (fl & 0xFFFF);
	    c2 = (h5l >>> 16) + (fl >>> 16) + (c1 >>> 16);
	    c3 = (h5h & 0xFFFF) + (fh & 0xFFFF) + (c2 >>> 16);
	    c4 = (h5h >>> 16) + (fh >>> 16) + (c3 >>> 16);

	    this.h5h = (c4 << 16) | (c3 & 0xFFFF);
	    this.h5l = (c2 << 16) | (c1 & 0xFFFF);

	    c1 = (h6l & 0xFFFF) + (gl & 0xFFFF);
	    c2 = (h6l >>> 16) + (gl >>> 16) + (c1 >>> 16);
	    c3 = (h6h & 0xFFFF) + (gh & 0xFFFF) + (c2 >>> 16);
	    c4 = (h6h >>> 16) + (gh >>> 16) + (c3 >>> 16);

	    this.h6h = (c4 << 16) | (c3 & 0xFFFF);
	    this.h6l = (c2 << 16) | (c1 & 0xFFFF);

	    c1 = (h7l & 0xFFFF) + (hl & 0xFFFF);
	    c2 = (h7l >>> 16) + (hl >>> 16) + (c1 >>> 16);
	    c3 = (h7h & 0xFFFF) + (hh & 0xFFFF) + (c2 >>> 16);
	    c4 = (h7h >>> 16) + (hh >>> 16) + (c3 >>> 16);

	    this.h7h = (c4 << 16) | (c3 & 0xFFFF);
	    this.h7l = (c2 << 16) | (c1 & 0xFFFF);
	  };

	  Sha512.prototype.hex = function () {
	    this.finalize();

	    var h0h = this.h0h, h0l = this.h0l, h1h = this.h1h, h1l = this.h1l,
	      h2h = this.h2h, h2l = this.h2l, h3h = this.h3h, h3l = this.h3l,
	      h4h = this.h4h, h4l = this.h4l, h5h = this.h5h, h5l = this.h5l,
	      h6h = this.h6h, h6l = this.h6l, h7h = this.h7h, h7l = this.h7l,
	      bits = this.bits;

	    var hex = HEX_CHARS[(h0h >> 28) & 0x0F] + HEX_CHARS[(h0h >> 24) & 0x0F] +
	      HEX_CHARS[(h0h >> 20) & 0x0F] + HEX_CHARS[(h0h >> 16) & 0x0F] +
	      HEX_CHARS[(h0h >> 12) & 0x0F] + HEX_CHARS[(h0h >> 8) & 0x0F] +
	      HEX_CHARS[(h0h >> 4) & 0x0F] + HEX_CHARS[h0h & 0x0F] +
	      HEX_CHARS[(h0l >> 28) & 0x0F] + HEX_CHARS[(h0l >> 24) & 0x0F] +
	      HEX_CHARS[(h0l >> 20) & 0x0F] + HEX_CHARS[(h0l >> 16) & 0x0F] +
	      HEX_CHARS[(h0l >> 12) & 0x0F] + HEX_CHARS[(h0l >> 8) & 0x0F] +
	      HEX_CHARS[(h0l >> 4) & 0x0F] + HEX_CHARS[h0l & 0x0F] +
	      HEX_CHARS[(h1h >> 28) & 0x0F] + HEX_CHARS[(h1h >> 24) & 0x0F] +
	      HEX_CHARS[(h1h >> 20) & 0x0F] + HEX_CHARS[(h1h >> 16) & 0x0F] +
	      HEX_CHARS[(h1h >> 12) & 0x0F] + HEX_CHARS[(h1h >> 8) & 0x0F] +
	      HEX_CHARS[(h1h >> 4) & 0x0F] + HEX_CHARS[h1h & 0x0F] +
	      HEX_CHARS[(h1l >> 28) & 0x0F] + HEX_CHARS[(h1l >> 24) & 0x0F] +
	      HEX_CHARS[(h1l >> 20) & 0x0F] + HEX_CHARS[(h1l >> 16) & 0x0F] +
	      HEX_CHARS[(h1l >> 12) & 0x0F] + HEX_CHARS[(h1l >> 8) & 0x0F] +
	      HEX_CHARS[(h1l >> 4) & 0x0F] + HEX_CHARS[h1l & 0x0F] +
	      HEX_CHARS[(h2h >> 28) & 0x0F] + HEX_CHARS[(h2h >> 24) & 0x0F] +
	      HEX_CHARS[(h2h >> 20) & 0x0F] + HEX_CHARS[(h2h >> 16) & 0x0F] +
	      HEX_CHARS[(h2h >> 12) & 0x0F] + HEX_CHARS[(h2h >> 8) & 0x0F] +
	      HEX_CHARS[(h2h >> 4) & 0x0F] + HEX_CHARS[h2h & 0x0F] +
	      HEX_CHARS[(h2l >> 28) & 0x0F] + HEX_CHARS[(h2l >> 24) & 0x0F] +
	      HEX_CHARS[(h2l >> 20) & 0x0F] + HEX_CHARS[(h2l >> 16) & 0x0F] +
	      HEX_CHARS[(h2l >> 12) & 0x0F] + HEX_CHARS[(h2l >> 8) & 0x0F] +
	      HEX_CHARS[(h2l >> 4) & 0x0F] + HEX_CHARS[h2l & 0x0F] +
	      HEX_CHARS[(h3h >> 28) & 0x0F] + HEX_CHARS[(h3h >> 24) & 0x0F] +
	      HEX_CHARS[(h3h >> 20) & 0x0F] + HEX_CHARS[(h3h >> 16) & 0x0F] +
	      HEX_CHARS[(h3h >> 12) & 0x0F] + HEX_CHARS[(h3h >> 8) & 0x0F] +
	      HEX_CHARS[(h3h >> 4) & 0x0F] + HEX_CHARS[h3h & 0x0F];
	    if (bits >= 256) {
	      hex += HEX_CHARS[(h3l >> 28) & 0x0F] + HEX_CHARS[(h3l >> 24) & 0x0F] +
	        HEX_CHARS[(h3l >> 20) & 0x0F] + HEX_CHARS[(h3l >> 16) & 0x0F] +
	        HEX_CHARS[(h3l >> 12) & 0x0F] + HEX_CHARS[(h3l >> 8) & 0x0F] +
	        HEX_CHARS[(h3l >> 4) & 0x0F] + HEX_CHARS[h3l & 0x0F];
	    }
	    if (bits >= 384) {
	      hex += HEX_CHARS[(h4h >> 28) & 0x0F] + HEX_CHARS[(h4h >> 24) & 0x0F] +
	        HEX_CHARS[(h4h >> 20) & 0x0F] + HEX_CHARS[(h4h >> 16) & 0x0F] +
	        HEX_CHARS[(h4h >> 12) & 0x0F] + HEX_CHARS[(h4h >> 8) & 0x0F] +
	        HEX_CHARS[(h4h >> 4) & 0x0F] + HEX_CHARS[h4h & 0x0F] +
	        HEX_CHARS[(h4l >> 28) & 0x0F] + HEX_CHARS[(h4l >> 24) & 0x0F] +
	        HEX_CHARS[(h4l >> 20) & 0x0F] + HEX_CHARS[(h4l >> 16) & 0x0F] +
	        HEX_CHARS[(h4l >> 12) & 0x0F] + HEX_CHARS[(h4l >> 8) & 0x0F] +
	        HEX_CHARS[(h4l >> 4) & 0x0F] + HEX_CHARS[h4l & 0x0F] +
	        HEX_CHARS[(h5h >> 28) & 0x0F] + HEX_CHARS[(h5h >> 24) & 0x0F] +
	        HEX_CHARS[(h5h >> 20) & 0x0F] + HEX_CHARS[(h5h >> 16) & 0x0F] +
	        HEX_CHARS[(h5h >> 12) & 0x0F] + HEX_CHARS[(h5h >> 8) & 0x0F] +
	        HEX_CHARS[(h5h >> 4) & 0x0F] + HEX_CHARS[h5h & 0x0F] +
	        HEX_CHARS[(h5l >> 28) & 0x0F] + HEX_CHARS[(h5l >> 24) & 0x0F] +
	        HEX_CHARS[(h5l >> 20) & 0x0F] + HEX_CHARS[(h5l >> 16) & 0x0F] +
	        HEX_CHARS[(h5l >> 12) & 0x0F] + HEX_CHARS[(h5l >> 8) & 0x0F] +
	        HEX_CHARS[(h5l >> 4) & 0x0F] + HEX_CHARS[h5l & 0x0F];
	    }
	    if (bits == 512) {
	      hex += HEX_CHARS[(h6h >> 28) & 0x0F] + HEX_CHARS[(h6h >> 24) & 0x0F] +
	        HEX_CHARS[(h6h >> 20) & 0x0F] + HEX_CHARS[(h6h >> 16) & 0x0F] +
	        HEX_CHARS[(h6h >> 12) & 0x0F] + HEX_CHARS[(h6h >> 8) & 0x0F] +
	        HEX_CHARS[(h6h >> 4) & 0x0F] + HEX_CHARS[h6h & 0x0F] +
	        HEX_CHARS[(h6l >> 28) & 0x0F] + HEX_CHARS[(h6l >> 24) & 0x0F] +
	        HEX_CHARS[(h6l >> 20) & 0x0F] + HEX_CHARS[(h6l >> 16) & 0x0F] +
	        HEX_CHARS[(h6l >> 12) & 0x0F] + HEX_CHARS[(h6l >> 8) & 0x0F] +
	        HEX_CHARS[(h6l >> 4) & 0x0F] + HEX_CHARS[h6l & 0x0F] +
	        HEX_CHARS[(h7h >> 28) & 0x0F] + HEX_CHARS[(h7h >> 24) & 0x0F] +
	        HEX_CHARS[(h7h >> 20) & 0x0F] + HEX_CHARS[(h7h >> 16) & 0x0F] +
	        HEX_CHARS[(h7h >> 12) & 0x0F] + HEX_CHARS[(h7h >> 8) & 0x0F] +
	        HEX_CHARS[(h7h >> 4) & 0x0F] + HEX_CHARS[h7h & 0x0F] +
	        HEX_CHARS[(h7l >> 28) & 0x0F] + HEX_CHARS[(h7l >> 24) & 0x0F] +
	        HEX_CHARS[(h7l >> 20) & 0x0F] + HEX_CHARS[(h7l >> 16) & 0x0F] +
	        HEX_CHARS[(h7l >> 12) & 0x0F] + HEX_CHARS[(h7l >> 8) & 0x0F] +
	        HEX_CHARS[(h7l >> 4) & 0x0F] + HEX_CHARS[h7l & 0x0F];
	    }
	    return hex;
	  };

	  Sha512.prototype.toString = Sha512.prototype.hex;

	  Sha512.prototype.digest = function () {
	    this.finalize();

	    var h0h = this.h0h, h0l = this.h0l, h1h = this.h1h, h1l = this.h1l,
	      h2h = this.h2h, h2l = this.h2l, h3h = this.h3h, h3l = this.h3l,
	      h4h = this.h4h, h4l = this.h4l, h5h = this.h5h, h5l = this.h5l,
	      h6h = this.h6h, h6l = this.h6l, h7h = this.h7h, h7l = this.h7l,
	      bits = this.bits;

	    var arr = [
	      (h0h >> 24) & 0xFF, (h0h >> 16) & 0xFF, (h0h >> 8) & 0xFF, h0h & 0xFF,
	      (h0l >> 24) & 0xFF, (h0l >> 16) & 0xFF, (h0l >> 8) & 0xFF, h0l & 0xFF,
	      (h1h >> 24) & 0xFF, (h1h >> 16) & 0xFF, (h1h >> 8) & 0xFF, h1h & 0xFF,
	      (h1l >> 24) & 0xFF, (h1l >> 16) & 0xFF, (h1l >> 8) & 0xFF, h1l & 0xFF,
	      (h2h >> 24) & 0xFF, (h2h >> 16) & 0xFF, (h2h >> 8) & 0xFF, h2h & 0xFF,
	      (h2l >> 24) & 0xFF, (h2l >> 16) & 0xFF, (h2l >> 8) & 0xFF, h2l & 0xFF,
	      (h3h >> 24) & 0xFF, (h3h >> 16) & 0xFF, (h3h >> 8) & 0xFF, h3h & 0xFF
	    ];

	    if (bits >= 256) {
	      arr.push((h3l >> 24) & 0xFF, (h3l >> 16) & 0xFF, (h3l >> 8) & 0xFF, h3l & 0xFF);
	    }
	    if (bits >= 384) {
	      arr.push(
	        (h4h >> 24) & 0xFF, (h4h >> 16) & 0xFF, (h4h >> 8) & 0xFF, h4h & 0xFF,
	        (h4l >> 24) & 0xFF, (h4l >> 16) & 0xFF, (h4l >> 8) & 0xFF, h4l & 0xFF,
	        (h5h >> 24) & 0xFF, (h5h >> 16) & 0xFF, (h5h >> 8) & 0xFF, h5h & 0xFF,
	        (h5l >> 24) & 0xFF, (h5l >> 16) & 0xFF, (h5l >> 8) & 0xFF, h5l & 0xFF
	      );
	    }
	    if (bits == 512) {
	      arr.push(
	        (h6h >> 24) & 0xFF, (h6h >> 16) & 0xFF, (h6h >> 8) & 0xFF, h6h & 0xFF,
	        (h6l >> 24) & 0xFF, (h6l >> 16) & 0xFF, (h6l >> 8) & 0xFF, h6l & 0xFF,
	        (h7h >> 24) & 0xFF, (h7h >> 16) & 0xFF, (h7h >> 8) & 0xFF, h7h & 0xFF,
	        (h7l >> 24) & 0xFF, (h7l >> 16) & 0xFF, (h7l >> 8) & 0xFF, h7l & 0xFF
	      );
	    }
	    return arr;
	  };

	  Sha512.prototype.array = Sha512.prototype.digest;

	  Sha512.prototype.arrayBuffer = function () {
	    this.finalize();

	    var bits = this.bits;
	    var buffer = new ArrayBuffer(bits / 8);
	    var dataView = new DataView(buffer);
	    dataView.setUint32(0, this.h0h);
	    dataView.setUint32(4, this.h0l);
	    dataView.setUint32(8, this.h1h);
	    dataView.setUint32(12, this.h1l);
	    dataView.setUint32(16, this.h2h);
	    dataView.setUint32(20, this.h2l);
	    dataView.setUint32(24, this.h3h);

	    if (bits >= 256) {
	      dataView.setUint32(28, this.h3l);
	    }
	    if (bits >= 384) {
	      dataView.setUint32(32, this.h4h);
	      dataView.setUint32(36, this.h4l);
	      dataView.setUint32(40, this.h5h);
	      dataView.setUint32(44, this.h5l);
	    }
	    if (bits == 512) {
	      dataView.setUint32(48, this.h6h);
	      dataView.setUint32(52, this.h6l);
	      dataView.setUint32(56, this.h7h);
	      dataView.setUint32(60, this.h7l);
	    }
	    return buffer;
	  };

	  Sha512.prototype.clone = function () {
	    var hash = new Sha512(this.bits, false);
	    this.copyTo(hash);
	    return hash;
	  };

	  Sha512.prototype.copyTo = function (hash) {
	    var i = 0, attrs = [
	      'h0h', 'h0l', 'h1h', 'h1l', 'h2h', 'h2l', 'h3h', 'h3l', 'h4h', 'h4l', 'h5h', 'h5l', 'h6h', 'h6l', 'h7h', 'h7l',
	      'start', 'bytes', 'hBytes', 'finalized', 'hashed', 'lastByteIndex'
	    ];
	    for (i = 0; i < attrs.length; ++i) {
	      hash[attrs[i]] = this[attrs[i]];
	    }
	    for (i = 0; i < this.blocks.length; ++i) {
	      hash.blocks[i] = this.blocks[i];
	    }
	  };

	  function HmacSha512(key, bits, sharedMemory) {
	    var notString, type = typeof key;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (key === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
	          key = new Uint8Array(key);
	        } else if (!Array.isArray(key)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var length = key.length;
	    if (!notString) {
	      var bytes = [], length = key.length, index = 0, code;
	      for (var i = 0; i < length; ++i) {
	        code = key.charCodeAt(i);
	        if (code < 0x80) {
	          bytes[index++] = code;
	        } else if (code < 0x800) {
	          bytes[index++] = (0xc0 | (code >> 6));
	          bytes[index++] = (0x80 | (code & 0x3f));
	        } else if (code < 0xd800 || code >= 0xe000) {
	          bytes[index++] = (0xe0 | (code >> 12));
	          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
	          bytes[index++] = (0x80 | (code & 0x3f));
	        } else {
	          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));
	          bytes[index++] = (0xf0 | (code >> 18));
	          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));
	          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
	          bytes[index++] = (0x80 | (code & 0x3f));
	        }
	      }
	      key = bytes;
	    }

	    if (key.length > 128) {
	      key = (new Sha512(bits, true)).update(key).array();
	    }

	    var oKeyPad = [], iKeyPad = [];
	    for (var i = 0; i < 128; ++i) {
	      var b = key[i] || 0;
	      oKeyPad[i] = 0x5c ^ b;
	      iKeyPad[i] = 0x36 ^ b;
	    }

	    Sha512.call(this, bits, sharedMemory);

	    this.update(iKeyPad);
	    this.oKeyPad = oKeyPad;
	    this.inner = true;
	    this.sharedMemory = sharedMemory;
	  }
	  HmacSha512.prototype = new Sha512();

	  HmacSha512.prototype.finalize = function () {
	    Sha512.prototype.finalize.call(this);
	    if (this.inner) {
	      this.inner = false;
	      var innerHash = this.array();
	      Sha512.call(this, this.bits, this.sharedMemory);
	      this.update(this.oKeyPad);
	      this.update(innerHash);
	      Sha512.prototype.finalize.call(this);
	    }
	  };

	  HmacSha512.prototype.clone = function () {
	    var hash = new HmacSha512([], this.bits, false);
	    this.copyTo(hash);
	    hash.inner = this.inner;
	    for (var i = 0; i < this.oKeyPad.length; ++i) {
	      hash.oKeyPad[i] = this.oKeyPad[i];
	    }
	    return hash;
	  };

	  var exports = createMethod(512);
	  exports.sha512 = exports;
	  exports.sha384 = createMethod(384);
	  exports.sha512_256 = createMethod(256);
	  exports.sha512_224 = createMethod(224);
	  exports.sha512.hmac = createHmacMethod(512);
	  exports.sha384.hmac = createHmacMethod(384);
	  exports.sha512_256.hmac = createHmacMethod(256);
	  exports.sha512_224.hmac = createHmacMethod(224);

	  if (COMMON_JS) {
	    module.exports = exports;
	  } else {
	    root.sha512 = exports.sha512;
	    root.sha384 = exports.sha384;
	    root.sha512_256 = exports.sha512_256;
	    root.sha512_224 = exports.sha512_224;
	  }
	})(); 
} (sha512$1));

var sha512Exports = sha512$1.exports;
var sha512 = /*@__PURE__*/getDefaultExportFromCjs(sha512Exports);

var jsonBigint = {exports: {}};

var stringify = {exports: {}};

var bignumber = {exports: {}};

(function (module) {
(function (globalObject) {

	/*
	 *      bignumber.js v9.1.2
	 *      A JavaScript library for arbitrary-precision arithmetic.
	 *      https://github.com/MikeMcl/bignumber.js
	 *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
	 *      MIT Licensed.
	 *
	 *      BigNumber.prototype methods     |  BigNumber methods
	 *                                      |
	 *      absoluteValue            abs    |  clone
	 *      comparedTo                      |  config               set
	 *      decimalPlaces            dp     |      DECIMAL_PLACES
	 *      dividedBy                div    |      ROUNDING_MODE
	 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
	 *      exponentiatedBy          pow    |      RANGE
	 *      integerValue                    |      CRYPTO
	 *      isEqualTo                eq     |      MODULO_MODE
	 *      isFinite                        |      POW_PRECISION
	 *      isGreaterThan            gt     |      FORMAT
	 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
	 *      isInteger                       |  isBigNumber
	 *      isLessThan               lt     |  maximum              max
	 *      isLessThanOrEqualTo      lte    |  minimum              min
	 *      isNaN                           |  random
	 *      isNegative                      |  sum
	 *      isPositive                      |
	 *      isZero                          |
	 *      minus                           |
	 *      modulo                   mod    |
	 *      multipliedBy             times  |
	 *      negated                         |
	 *      plus                            |
	 *      precision                sd     |
	 *      shiftedBy                       |
	 *      squareRoot               sqrt   |
	 *      toExponential                   |
	 *      toFixed                         |
	 *      toFormat                        |
	 *      toFraction                      |
	 *      toJSON                          |
	 *      toNumber                        |
	 *      toPrecision                     |
	 *      toString                        |
	 *      valueOf                         |
	 *
	 */


	  var BigNumber,
	    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
	    mathceil = Math.ceil,
	    mathfloor = Math.floor,

	    bignumberError = '[BigNumber Error] ',
	    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

	    BASE = 1e14,
	    LOG_BASE = 14,
	    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
	    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
	    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
	    SQRT_BASE = 1e7,

	    // EDITABLE
	    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
	    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
	    MAX = 1E9;                                   // 0 to MAX_INT32


	  /*
	   * Create and return a BigNumber constructor.
	   */
	  function clone(configObject) {
	    var div, convertBase, parseNumeric,
	      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
	      ONE = new BigNumber(1),


	      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


	      // The default values below must be integers within the inclusive ranges stated.
	      // The values can also be changed at run-time using BigNumber.set.

	      // The maximum number of decimal places for operations involving division.
	      DECIMAL_PLACES = 20,                     // 0 to MAX

	      // The rounding mode used when rounding to the above decimal places, and when using
	      // toExponential, toFixed, toFormat and toPrecision, and round (default value).
	      // UP         0 Away from zero.
	      // DOWN       1 Towards zero.
	      // CEIL       2 Towards +Infinity.
	      // FLOOR      3 Towards -Infinity.
	      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	      ROUNDING_MODE = 4,                       // 0 to 8

	      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

	      // The exponent value at and beneath which toString returns exponential notation.
	      // Number type: -7
	      TO_EXP_NEG = -7,                         // 0 to -MAX

	      // The exponent value at and above which toString returns exponential notation.
	      // Number type: 21
	      TO_EXP_POS = 21,                         // 0 to MAX

	      // RANGE : [MIN_EXP, MAX_EXP]

	      // The minimum exponent value, beneath which underflow to zero occurs.
	      // Number type: -324  (5e-324)
	      MIN_EXP = -1e7,                          // -1 to -MAX

	      // The maximum exponent value, above which overflow to Infinity occurs.
	      // Number type:  308  (1.7976931348623157e+308)
	      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
	      MAX_EXP = 1e7,                           // 1 to MAX

	      // Whether to use cryptographically-secure random number generation, if available.
	      CRYPTO = false,                          // true or false

	      // The modulo mode used when calculating the modulus: a mod n.
	      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	      // The remainder (r) is calculated as: r = a - n * q.
	      //
	      // UP        0 The remainder is positive if the dividend is negative, else is negative.
	      // DOWN      1 The remainder has the same sign as the dividend.
	      //             This modulo mode is commonly known as 'truncated division' and is
	      //             equivalent to (a % n) in JavaScript.
	      // FLOOR     3 The remainder has the same sign as the divisor (Python %).
	      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
	      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
	      //             The remainder is always positive.
	      //
	      // The truncated division, floored division, Euclidian division and IEEE 754 remainder
	      // modes are commonly used for the modulus operation.
	      // Although the other rounding modes can also be used, they may not give useful results.
	      MODULO_MODE = 1,                         // 0 to 9

	      // The maximum number of significant digits of the result of the exponentiatedBy operation.
	      // If POW_PRECISION is 0, there will be unlimited significant digits.
	      POW_PRECISION = 0,                       // 0 to MAX

	      // The format specification used by the BigNumber.prototype.toFormat method.
	      FORMAT = {
	        prefix: '',
	        groupSize: 3,
	        secondaryGroupSize: 0,
	        groupSeparator: ',',
	        decimalSeparator: '.',
	        fractionGroupSize: 0,
	        fractionGroupSeparator: '\xA0',        // non-breaking space
	        suffix: ''
	      },

	      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
	      // '-', '.', whitespace, or repeated character.
	      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
	      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
	      alphabetHasNormalDecimalDigits = true;


	    //------------------------------------------------------------------------------------------


	    // CONSTRUCTOR


	    /*
	     * The BigNumber constructor and exported function.
	     * Create and return a new instance of a BigNumber object.
	     *
	     * v {number|string|BigNumber} A numeric value.
	     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
	     */
	    function BigNumber(v, b) {
	      var alphabet, c, caseChanged, e, i, isNum, len, str,
	        x = this;

	      // Enable constructor call without `new`.
	      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

	      if (b == null) {

	        if (v && v._isBigNumber === true) {
	          x.s = v.s;

	          if (!v.c || v.e > MAX_EXP) {
	            x.c = x.e = null;
	          } else if (v.e < MIN_EXP) {
	            x.c = [x.e = 0];
	          } else {
	            x.e = v.e;
	            x.c = v.c.slice();
	          }

	          return;
	        }

	        if ((isNum = typeof v == 'number') && v * 0 == 0) {

	          // Use `1 / n` to handle minus zero also.
	          x.s = 1 / v < 0 ? (v = -v, -1) : 1;

	          // Fast path for integers, where n < 2147483648 (2**31).
	          if (v === ~~v) {
	            for (e = 0, i = v; i >= 10; i /= 10, e++);

	            if (e > MAX_EXP) {
	              x.c = x.e = null;
	            } else {
	              x.e = e;
	              x.c = [v];
	            }

	            return;
	          }

	          str = String(v);
	        } else {

	          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

	          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
	        }

	        // Decimal point?
	        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

	        // Exponential form?
	        if ((i = str.search(/e/i)) > 0) {

	          // Determine exponent.
	          if (e < 0) e = i;
	          e += +str.slice(i + 1);
	          str = str.substring(0, i);
	        } else if (e < 0) {

	          // Integer.
	          e = str.length;
	        }

	      } else {

	        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	        intCheck(b, 2, ALPHABET.length, 'Base');

	        // Allow exponential notation to be used with base 10 argument, while
	        // also rounding to DECIMAL_PLACES as with other bases.
	        if (b == 10 && alphabetHasNormalDecimalDigits) {
	          x = new BigNumber(v);
	          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
	        }

	        str = String(v);

	        if (isNum = typeof v == 'number') {

	          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
	          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

	          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

	          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
	            throw Error
	             (tooManyDigits + v);
	          }
	        } else {
	          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
	        }

	        alphabet = ALPHABET.slice(0, b);
	        e = i = 0;

	        // Check that str is a valid base b number.
	        // Don't use RegExp, so alphabet can contain special characters.
	        for (len = str.length; i < len; i++) {
	          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
	            if (c == '.') {

	              // If '.' is not the first character and it has not be found before.
	              if (i > e) {
	                e = len;
	                continue;
	              }
	            } else if (!caseChanged) {

	              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
	              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
	                  str == str.toLowerCase() && (str = str.toUpperCase())) {
	                caseChanged = true;
	                i = -1;
	                e = 0;
	                continue;
	              }
	            }

	            return parseNumeric(x, String(v), isNum, b);
	          }
	        }

	        // Prevent later check for length on converted number.
	        isNum = false;
	        str = convertBase(str, b, 10, x.s);

	        // Decimal point?
	        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
	        else e = str.length;
	      }

	      // Determine leading zeros.
	      for (i = 0; str.charCodeAt(i) === 48; i++);

	      // Determine trailing zeros.
	      for (len = str.length; str.charCodeAt(--len) === 48;);

	      if (str = str.slice(i, ++len)) {
	        len -= i;

	        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	        if (isNum && BigNumber.DEBUG &&
	          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
	            throw Error
	             (tooManyDigits + (x.s * v));
	        }

	         // Overflow?
	        if ((e = e - i - 1) > MAX_EXP) {

	          // Infinity.
	          x.c = x.e = null;

	        // Underflow?
	        } else if (e < MIN_EXP) {

	          // Zero.
	          x.c = [x.e = 0];
	        } else {
	          x.e = e;
	          x.c = [];

	          // Transform base

	          // e is the base 10 exponent.
	          // i is where to slice str to get the first element of the coefficient array.
	          i = (e + 1) % LOG_BASE;
	          if (e < 0) i += LOG_BASE;  // i < 1

	          if (i < len) {
	            if (i) x.c.push(+str.slice(0, i));

	            for (len -= LOG_BASE; i < len;) {
	              x.c.push(+str.slice(i, i += LOG_BASE));
	            }

	            i = LOG_BASE - (str = str.slice(i)).length;
	          } else {
	            i -= len;
	          }

	          for (; i--; str += '0');
	          x.c.push(+str);
	        }
	      } else {

	        // Zero.
	        x.c = [x.e = 0];
	      }
	    }


	    // CONSTRUCTOR PROPERTIES


	    BigNumber.clone = clone;

	    BigNumber.ROUND_UP = 0;
	    BigNumber.ROUND_DOWN = 1;
	    BigNumber.ROUND_CEIL = 2;
	    BigNumber.ROUND_FLOOR = 3;
	    BigNumber.ROUND_HALF_UP = 4;
	    BigNumber.ROUND_HALF_DOWN = 5;
	    BigNumber.ROUND_HALF_EVEN = 6;
	    BigNumber.ROUND_HALF_CEIL = 7;
	    BigNumber.ROUND_HALF_FLOOR = 8;
	    BigNumber.EUCLID = 9;


	    /*
	     * Configure infrequently-changing library-wide settings.
	     *
	     * Accept an object with the following optional properties (if the value of a property is
	     * a number, it must be an integer within the inclusive range stated):
	     *
	     *   DECIMAL_PLACES   {number}           0 to MAX
	     *   ROUNDING_MODE    {number}           0 to 8
	     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
	     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
	     *   CRYPTO           {boolean}          true or false
	     *   MODULO_MODE      {number}           0 to 9
	     *   POW_PRECISION       {number}           0 to MAX
	     *   ALPHABET         {string}           A string of two or more unique characters which does
	     *                                       not contain '.'.
	     *   FORMAT           {object}           An object with some of the following properties:
	     *     prefix                 {string}
	     *     groupSize              {number}
	     *     secondaryGroupSize     {number}
	     *     groupSeparator         {string}
	     *     decimalSeparator       {string}
	     *     fractionGroupSize      {number}
	     *     fractionGroupSeparator {string}
	     *     suffix                 {string}
	     *
	     * (The values assigned to the above FORMAT object properties are not checked for validity.)
	     *
	     * E.g.
	     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
	     *
	     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
	     *
	     * Return an object with the properties current values.
	     */
	    BigNumber.config = BigNumber.set = function (obj) {
	      var p, v;

	      if (obj != null) {

	        if (typeof obj == 'object') {

	          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
	          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
	            v = obj[p];
	            intCheck(v, 0, MAX, p);
	            DECIMAL_PLACES = v;
	          }

	          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
	          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
	            v = obj[p];
	            intCheck(v, 0, 8, p);
	            ROUNDING_MODE = v;
	          }

	          // EXPONENTIAL_AT {number|number[]}
	          // Integer, -MAX to MAX inclusive or
	          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
	          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
	            v = obj[p];
	            if (v && v.pop) {
	              intCheck(v[0], -1e9, 0, p);
	              intCheck(v[1], 0, MAX, p);
	              TO_EXP_NEG = v[0];
	              TO_EXP_POS = v[1];
	            } else {
	              intCheck(v, -1e9, MAX, p);
	              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
	            }
	          }

	          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
	          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
	          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
	          if (obj.hasOwnProperty(p = 'RANGE')) {
	            v = obj[p];
	            if (v && v.pop) {
	              intCheck(v[0], -1e9, -1, p);
	              intCheck(v[1], 1, MAX, p);
	              MIN_EXP = v[0];
	              MAX_EXP = v[1];
	            } else {
	              intCheck(v, -1e9, MAX, p);
	              if (v) {
	                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
	              } else {
	                throw Error
	                 (bignumberError + p + ' cannot be zero: ' + v);
	              }
	            }
	          }

	          // CRYPTO {boolean} true or false.
	          // '[BigNumber Error] CRYPTO not true or false: {v}'
	          // '[BigNumber Error] crypto unavailable'
	          if (obj.hasOwnProperty(p = 'CRYPTO')) {
	            v = obj[p];
	            if (v === !!v) {
	              if (v) {
	                if (typeof crypto != 'undefined' && crypto &&
	                 (crypto.getRandomValues || crypto.randomBytes)) {
	                  CRYPTO = v;
	                } else {
	                  CRYPTO = !v;
	                  throw Error
	                   (bignumberError + 'crypto unavailable');
	                }
	              } else {
	                CRYPTO = v;
	              }
	            } else {
	              throw Error
	               (bignumberError + p + ' not true or false: ' + v);
	            }
	          }

	          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
	          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
	            v = obj[p];
	            intCheck(v, 0, 9, p);
	            MODULO_MODE = v;
	          }

	          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
	          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
	            v = obj[p];
	            intCheck(v, 0, MAX, p);
	            POW_PRECISION = v;
	          }

	          // FORMAT {object}
	          // '[BigNumber Error] FORMAT not an object: {v}'
	          if (obj.hasOwnProperty(p = 'FORMAT')) {
	            v = obj[p];
	            if (typeof v == 'object') FORMAT = v;
	            else throw Error
	             (bignumberError + p + ' not an object: ' + v);
	          }

	          // ALPHABET {string}
	          // '[BigNumber Error] ALPHABET invalid: {v}'
	          if (obj.hasOwnProperty(p = 'ALPHABET')) {
	            v = obj[p];

	            // Disallow if less than two characters,
	            // or if it contains '+', '-', '.', whitespace, or a repeated character.
	            if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
	              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
	              ALPHABET = v;
	            } else {
	              throw Error
	               (bignumberError + p + ' invalid: ' + v);
	            }
	          }

	        } else {

	          // '[BigNumber Error] Object expected: {v}'
	          throw Error
	           (bignumberError + 'Object expected: ' + obj);
	        }
	      }

	      return {
	        DECIMAL_PLACES: DECIMAL_PLACES,
	        ROUNDING_MODE: ROUNDING_MODE,
	        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
	        RANGE: [MIN_EXP, MAX_EXP],
	        CRYPTO: CRYPTO,
	        MODULO_MODE: MODULO_MODE,
	        POW_PRECISION: POW_PRECISION,
	        FORMAT: FORMAT,
	        ALPHABET: ALPHABET
	      };
	    };


	    /*
	     * Return true if v is a BigNumber instance, otherwise return false.
	     *
	     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
	     *
	     * v {any}
	     *
	     * '[BigNumber Error] Invalid BigNumber: {v}'
	     */
	    BigNumber.isBigNumber = function (v) {
	      if (!v || v._isBigNumber !== true) return false;
	      if (!BigNumber.DEBUG) return true;

	      var i, n,
	        c = v.c,
	        e = v.e,
	        s = v.s;

	      out: if ({}.toString.call(c) == '[object Array]') {

	        if ((s === 1 || s === -1) && e >= -1e9 && e <= MAX && e === mathfloor(e)) {

	          // If the first element is zero, the BigNumber value must be zero.
	          if (c[0] === 0) {
	            if (e === 0 && c.length === 1) return true;
	            break out;
	          }

	          // Calculate number of digits that c[0] should have, based on the exponent.
	          i = (e + 1) % LOG_BASE;
	          if (i < 1) i += LOG_BASE;

	          // Calculate number of digits of c[0].
	          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
	          if (String(c[0]).length == i) {

	            for (i = 0; i < c.length; i++) {
	              n = c[i];
	              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
	            }

	            // Last element cannot be zero, unless it is the only element.
	            if (n !== 0) return true;
	          }
	        }

	      // Infinity/NaN
	      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
	        return true;
	      }

	      throw Error
	        (bignumberError + 'Invalid BigNumber: ' + v);
	    };


	    /*
	     * Return a new BigNumber whose value is the maximum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.maximum = BigNumber.max = function () {
	      return maxOrMin(arguments, -1);
	    };


	    /*
	     * Return a new BigNumber whose value is the minimum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.minimum = BigNumber.min = function () {
	      return maxOrMin(arguments, 1);
	    };


	    /*
	     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
	     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
	     * zeros are produced).
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
	     * '[BigNumber Error] crypto unavailable'
	     */
	    BigNumber.random = (function () {
	      var pow2_53 = 0x20000000000000;

	      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
	      // Check if Math.random() produces more than 32 bits of randomness.
	      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
	      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
	      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
	       ? function () { return mathfloor(Math.random() * pow2_53); }
	       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
	         (Math.random() * 0x800000 | 0); };

	      return function (dp) {
	        var a, b, e, k, v,
	          i = 0,
	          c = [],
	          rand = new BigNumber(ONE);

	        if (dp == null) dp = DECIMAL_PLACES;
	        else intCheck(dp, 0, MAX);

	        k = mathceil(dp / LOG_BASE);

	        if (CRYPTO) {

	          // Browsers supporting crypto.getRandomValues.
	          if (crypto.getRandomValues) {

	            a = crypto.getRandomValues(new Uint32Array(k *= 2));

	            for (; i < k;) {

	              // 53 bits:
	              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
	              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
	              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
	              //                                     11111 11111111 11111111
	              // 0x20000 is 2^21.
	              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

	              // Rejection sampling:
	              // 0 <= v < 9007199254740992
	              // Probability that v >= 9e15, is
	              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
	              if (v >= 9e15) {
	                b = crypto.getRandomValues(new Uint32Array(2));
	                a[i] = b[0];
	                a[i + 1] = b[1];
	              } else {

	                // 0 <= v <= 8999999999999999
	                // 0 <= (v % 1e14) <= 99999999999999
	                c.push(v % 1e14);
	                i += 2;
	              }
	            }
	            i = k / 2;

	          // Node.js supporting crypto.randomBytes.
	          } else if (crypto.randomBytes) {

	            // buffer
	            a = crypto.randomBytes(k *= 7);

	            for (; i < k;) {

	              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
	              // 0x100000000 is 2^32, 0x1000000 is 2^24
	              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
	              // 0 <= v < 9007199254740992
	              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
	                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
	                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

	              if (v >= 9e15) {
	                crypto.randomBytes(7).copy(a, i);
	              } else {

	                // 0 <= (v % 1e14) <= 99999999999999
	                c.push(v % 1e14);
	                i += 7;
	              }
	            }
	            i = k / 7;
	          } else {
	            CRYPTO = false;
	            throw Error
	             (bignumberError + 'crypto unavailable');
	          }
	        }

	        // Use Math.random.
	        if (!CRYPTO) {

	          for (; i < k;) {
	            v = random53bitInt();
	            if (v < 9e15) c[i++] = v % 1e14;
	          }
	        }

	        k = c[--i];
	        dp %= LOG_BASE;

	        // Convert trailing digits to zeros according to dp.
	        if (k && dp) {
	          v = POWS_TEN[LOG_BASE - dp];
	          c[i] = mathfloor(k / v) * v;
	        }

	        // Remove trailing elements which are zero.
	        for (; c[i] === 0; c.pop(), i--);

	        // Zero?
	        if (i < 0) {
	          c = [e = 0];
	        } else {

	          // Remove leading elements which are zero and adjust exponent accordingly.
	          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

	          // Count the digits of the first element of c to determine leading zeros, and...
	          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

	          // adjust the exponent accordingly.
	          if (i < LOG_BASE) e -= LOG_BASE - i;
	        }

	        rand.e = e;
	        rand.c = c;
	        return rand;
	      };
	    })();


	    /*
	     * Return a BigNumber whose value is the sum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.sum = function () {
	      var i = 1,
	        args = arguments,
	        sum = new BigNumber(args[0]);
	      for (; i < args.length;) sum = sum.plus(args[i++]);
	      return sum;
	    };


	    // PRIVATE FUNCTIONS


	    // Called by BigNumber and BigNumber.prototype.toString.
	    convertBase = (function () {
	      var decimal = '0123456789';

	      /*
	       * Convert string of baseIn to an array of numbers of baseOut.
	       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
	       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
	       */
	      function toBaseOut(str, baseIn, baseOut, alphabet) {
	        var j,
	          arr = [0],
	          arrL,
	          i = 0,
	          len = str.length;

	        for (; i < len;) {
	          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

	          arr[0] += alphabet.indexOf(str.charAt(i++));

	          for (j = 0; j < arr.length; j++) {

	            if (arr[j] > baseOut - 1) {
	              if (arr[j + 1] == null) arr[j + 1] = 0;
	              arr[j + 1] += arr[j] / baseOut | 0;
	              arr[j] %= baseOut;
	            }
	          }
	        }

	        return arr.reverse();
	      }

	      // Convert a numeric string of baseIn to a numeric string of baseOut.
	      // If the caller is toString, we are converting from base 10 to baseOut.
	      // If the caller is BigNumber, we are converting from baseIn to base 10.
	      return function (str, baseIn, baseOut, sign, callerIsToString) {
	        var alphabet, d, e, k, r, x, xc, y,
	          i = str.indexOf('.'),
	          dp = DECIMAL_PLACES,
	          rm = ROUNDING_MODE;

	        // Non-integer.
	        if (i >= 0) {
	          k = POW_PRECISION;

	          // Unlimited precision.
	          POW_PRECISION = 0;
	          str = str.replace('.', '');
	          y = new BigNumber(baseIn);
	          x = y.pow(str.length - i);
	          POW_PRECISION = k;

	          // Convert str as if an integer, then restore the fraction part by dividing the
	          // result by its base raised to a power.

	          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
	           10, baseOut, decimal);
	          y.e = y.c.length;
	        }

	        // Convert the number as integer.

	        xc = toBaseOut(str, baseIn, baseOut, callerIsToString
	         ? (alphabet = ALPHABET, decimal)
	         : (alphabet = decimal, ALPHABET));

	        // xc now represents str as an integer and converted to baseOut. e is the exponent.
	        e = k = xc.length;

	        // Remove trailing zeros.
	        for (; xc[--k] == 0; xc.pop());

	        // Zero?
	        if (!xc[0]) return alphabet.charAt(0);

	        // Does str represent an integer? If so, no need for the division.
	        if (i < 0) {
	          --e;
	        } else {
	          x.c = xc;
	          x.e = e;

	          // The sign is needed for correct rounding.
	          x.s = sign;
	          x = div(x, y, dp, rm, baseOut);
	          xc = x.c;
	          r = x.r;
	          e = x.e;
	        }

	        // xc now represents str converted to baseOut.

	        // THe index of the rounding digit.
	        d = e + dp + 1;

	        // The rounding digit: the digit to the right of the digit that may be rounded up.
	        i = xc[d];

	        // Look at the rounding digits and mode to determine whether to round up.

	        k = baseOut / 2;
	        r = r || d < 0 || xc[d + 1] != null;

	        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
	               rm == (x.s < 0 ? 8 : 7));

	        // If the index of the rounding digit is not greater than zero, or xc represents
	        // zero, then the result of the base conversion is zero or, if rounding up, a value
	        // such as 0.00001.
	        if (d < 1 || !xc[0]) {

	          // 1^-dp or 0
	          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
	        } else {

	          // Truncate xc to the required number of decimal places.
	          xc.length = d;

	          // Round up?
	          if (r) {

	            // Rounding up may mean the previous digit has to be rounded up and so on.
	            for (--baseOut; ++xc[--d] > baseOut;) {
	              xc[d] = 0;

	              if (!d) {
	                ++e;
	                xc = [1].concat(xc);
	              }
	            }
	          }

	          // Determine trailing zeros.
	          for (k = xc.length; !xc[--k];);

	          // E.g. [4, 11, 15] becomes 4bf.
	          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

	          // Add leading zeros, decimal point and trailing zeros as required.
	          str = toFixedPoint(str, e, alphabet.charAt(0));
	        }

	        // The caller will add the sign.
	        return str;
	      };
	    })();


	    // Perform division in the specified base. Called by div and convertBase.
	    div = (function () {

	      // Assume non-zero x and k.
	      function multiply(x, k, base) {
	        var m, temp, xlo, xhi,
	          carry = 0,
	          i = x.length,
	          klo = k % SQRT_BASE,
	          khi = k / SQRT_BASE | 0;

	        for (x = x.slice(); i--;) {
	          xlo = x[i] % SQRT_BASE;
	          xhi = x[i] / SQRT_BASE | 0;
	          m = khi * xlo + xhi * klo;
	          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
	          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
	          x[i] = temp % base;
	        }

	        if (carry) x = [carry].concat(x);

	        return x;
	      }

	      function compare(a, b, aL, bL) {
	        var i, cmp;

	        if (aL != bL) {
	          cmp = aL > bL ? 1 : -1;
	        } else {

	          for (i = cmp = 0; i < aL; i++) {

	            if (a[i] != b[i]) {
	              cmp = a[i] > b[i] ? 1 : -1;
	              break;
	            }
	          }
	        }

	        return cmp;
	      }

	      function subtract(a, b, aL, base) {
	        var i = 0;

	        // Subtract b from a.
	        for (; aL--;) {
	          a[aL] -= i;
	          i = a[aL] < b[aL] ? 1 : 0;
	          a[aL] = i * base + a[aL] - b[aL];
	        }

	        // Remove leading zeros.
	        for (; !a[0] && a.length > 1; a.splice(0, 1));
	      }

	      // x: dividend, y: divisor.
	      return function (x, y, dp, rm, base) {
	        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
	          yL, yz,
	          s = x.s == y.s ? 1 : -1,
	          xc = x.c,
	          yc = y.c;

	        // Either NaN, Infinity or 0?
	        if (!xc || !xc[0] || !yc || !yc[0]) {

	          return new BigNumber(

	           // Return NaN if either NaN, or both Infinity or 0.
	           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

	            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
	            xc && xc[0] == 0 || !yc ? s * 0 : s / 0
	         );
	        }

	        q = new BigNumber(s);
	        qc = q.c = [];
	        e = x.e - y.e;
	        s = dp + e + 1;

	        if (!base) {
	          base = BASE;
	          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
	          s = s / LOG_BASE | 0;
	        }

	        // Result exponent may be one less then the current value of e.
	        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
	        for (i = 0; yc[i] == (xc[i] || 0); i++);

	        if (yc[i] > (xc[i] || 0)) e--;

	        if (s < 0) {
	          qc.push(1);
	          more = true;
	        } else {
	          xL = xc.length;
	          yL = yc.length;
	          i = 0;
	          s += 2;

	          // Normalise xc and yc so highest order digit of yc is >= base / 2.

	          n = mathfloor(base / (yc[0] + 1));

	          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
	          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
	          if (n > 1) {
	            yc = multiply(yc, n, base);
	            xc = multiply(xc, n, base);
	            yL = yc.length;
	            xL = xc.length;
	          }

	          xi = yL;
	          rem = xc.slice(0, yL);
	          remL = rem.length;

	          // Add zeros to make remainder as long as divisor.
	          for (; remL < yL; rem[remL++] = 0);
	          yz = yc.slice();
	          yz = [0].concat(yz);
	          yc0 = yc[0];
	          if (yc[1] >= base / 2) yc0++;
	          // Not necessary, but to prevent trial digit n > base, when using base 3.
	          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

	          do {
	            n = 0;

	            // Compare divisor and remainder.
	            cmp = compare(yc, rem, yL, remL);

	            // If divisor < remainder.
	            if (cmp < 0) {

	              // Calculate trial digit, n.

	              rem0 = rem[0];
	              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

	              // n is how many times the divisor goes into the current remainder.
	              n = mathfloor(rem0 / yc0);

	              //  Algorithm:
	              //  product = divisor multiplied by trial digit (n).
	              //  Compare product and remainder.
	              //  If product is greater than remainder:
	              //    Subtract divisor from product, decrement trial digit.
	              //  Subtract product from remainder.
	              //  If product was less than remainder at the last compare:
	              //    Compare new remainder and divisor.
	              //    If remainder is greater than divisor:
	              //      Subtract divisor from remainder, increment trial digit.

	              if (n > 1) {

	                // n may be > base only when base is 3.
	                if (n >= base) n = base - 1;

	                // product = divisor * trial digit.
	                prod = multiply(yc, n, base);
	                prodL = prod.length;
	                remL = rem.length;

	                // Compare product and remainder.
	                // If product > remainder then trial digit n too high.
	                // n is 1 too high about 5% of the time, and is not known to have
	                // ever been more than 1 too high.
	                while (compare(prod, rem, prodL, remL) == 1) {
	                  n--;

	                  // Subtract divisor from product.
	                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
	                  prodL = prod.length;
	                  cmp = 1;
	                }
	              } else {

	                // n is 0 or 1, cmp is -1.
	                // If n is 0, there is no need to compare yc and rem again below,
	                // so change cmp to 1 to avoid it.
	                // If n is 1, leave cmp as -1, so yc and rem are compared again.
	                if (n == 0) {

	                  // divisor < remainder, so n must be at least 1.
	                  cmp = n = 1;
	                }

	                // product = divisor
	                prod = yc.slice();
	                prodL = prod.length;
	              }

	              if (prodL < remL) prod = [0].concat(prod);

	              // Subtract product from remainder.
	              subtract(rem, prod, remL, base);
	              remL = rem.length;

	               // If product was < remainder.
	              if (cmp == -1) {

	                // Compare divisor and new remainder.
	                // If divisor < new remainder, subtract divisor from remainder.
	                // Trial digit n too low.
	                // n is 1 too low about 5% of the time, and very rarely 2 too low.
	                while (compare(yc, rem, yL, remL) < 1) {
	                  n++;

	                  // Subtract divisor from remainder.
	                  subtract(rem, yL < remL ? yz : yc, remL, base);
	                  remL = rem.length;
	                }
	              }
	            } else if (cmp === 0) {
	              n++;
	              rem = [0];
	            } // else cmp === 1 and n will be 0

	            // Add the next digit, n, to the result array.
	            qc[i++] = n;

	            // Update the remainder.
	            if (rem[0]) {
	              rem[remL++] = xc[xi] || 0;
	            } else {
	              rem = [xc[xi]];
	              remL = 1;
	            }
	          } while ((xi++ < xL || rem[0] != null) && s--);

	          more = rem[0] != null;

	          // Leading zero?
	          if (!qc[0]) qc.splice(0, 1);
	        }

	        if (base == BASE) {

	          // To calculate q.e, first get the number of digits of qc[0].
	          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

	          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

	        // Caller is convertBase.
	        } else {
	          q.e = e;
	          q.r = +more;
	        }

	        return q;
	      };
	    })();


	    /*
	     * Return a string representing the value of BigNumber n in fixed-point or exponential
	     * notation rounded to the specified decimal places or significant digits.
	     *
	     * n: a BigNumber.
	     * i: the index of the last digit required (i.e. the digit that may be rounded up).
	     * rm: the rounding mode.
	     * id: 1 (toExponential) or 2 (toPrecision).
	     */
	    function format(n, i, rm, id) {
	      var c0, e, ne, len, str;

	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);

	      if (!n.c) return n.toString();

	      c0 = n.c[0];
	      ne = n.e;

	      if (i == null) {
	        str = coeffToString(n.c);
	        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
	         ? toExponential(str, ne)
	         : toFixedPoint(str, ne, '0');
	      } else {
	        n = round(new BigNumber(n), i, rm);

	        // n.e may have changed if the value was rounded up.
	        e = n.e;

	        str = coeffToString(n.c);
	        len = str.length;

	        // toPrecision returns exponential notation if the number of significant digits
	        // specified is less than the number of digits necessary to represent the integer
	        // part of the value in fixed-point notation.

	        // Exponential notation.
	        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

	          // Append zeros?
	          for (; len < i; str += '0', len++);
	          str = toExponential(str, e);

	        // Fixed-point notation.
	        } else {
	          i -= ne;
	          str = toFixedPoint(str, e, '0');

	          // Append zeros?
	          if (e + 1 > len) {
	            if (--i > 0) for (str += '.'; i--; str += '0');
	          } else {
	            i += e - len;
	            if (i > 0) {
	              if (e + 1 == len) str += '.';
	              for (; i--; str += '0');
	            }
	          }
	        }
	      }

	      return n.s < 0 && c0 ? '-' + str : str;
	    }


	    // Handle BigNumber.max and BigNumber.min.
	    // If any number is NaN, return NaN.
	    function maxOrMin(args, n) {
	      var k, y,
	        i = 1,
	        x = new BigNumber(args[0]);

	      for (; i < args.length; i++) {
	        y = new BigNumber(args[i]);
	        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
	          x = y;
	        }
	      }

	      return x;
	    }


	    /*
	     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
	     * Called by minus, plus and times.
	     */
	    function normalise(n, c, e) {
	      var i = 1,
	        j = c.length;

	       // Remove trailing zeros.
	      for (; !c[--j]; c.pop());

	      // Calculate the base 10 exponent. First get the number of digits of c[0].
	      for (j = c[0]; j >= 10; j /= 10, i++);

	      // Overflow?
	      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

	        // Infinity.
	        n.c = n.e = null;

	      // Underflow?
	      } else if (e < MIN_EXP) {

	        // Zero.
	        n.c = [n.e = 0];
	      } else {
	        n.e = e;
	        n.c = c;
	      }

	      return n;
	    }


	    // Handle values that fail the validity test in BigNumber.
	    parseNumeric = (function () {
	      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
	        dotAfter = /^([^.]+)\.$/,
	        dotBefore = /^\.([^.]+)$/,
	        isInfinityOrNaN = /^-?(Infinity|NaN)$/,
	        whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

	      return function (x, str, isNum, b) {
	        var base,
	          s = isNum ? str : str.replace(whitespaceOrPlus, '');

	        // No exception on ±Infinity or NaN.
	        if (isInfinityOrNaN.test(s)) {
	          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
	        } else {
	          if (!isNum) {

	            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
	            s = s.replace(basePrefix, function (m, p1, p2) {
	              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
	              return !b || b == base ? p1 : m;
	            });

	            if (b) {
	              base = b;

	              // E.g. '1.' to '1', '.1' to '0.1'
	              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
	            }

	            if (str != s) return new BigNumber(s, base);
	          }

	          // '[BigNumber Error] Not a number: {n}'
	          // '[BigNumber Error] Not a base {b} number: {n}'
	          if (BigNumber.DEBUG) {
	            throw Error
	              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
	          }

	          // NaN
	          x.s = null;
	        }

	        x.c = x.e = null;
	      }
	    })();


	    /*
	     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
	     * If r is truthy, it is known that there are more digits after the rounding digit.
	     */
	    function round(x, sd, rm, r) {
	      var d, i, j, k, n, ni, rd,
	        xc = x.c,
	        pows10 = POWS_TEN;

	      // if x is not Infinity or NaN...
	      if (xc) {

	        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
	        // n is a base 1e14 number, the value of the element of array x.c containing rd.
	        // ni is the index of n within x.c.
	        // d is the number of digits of n.
	        // i is the index of rd within n including leading zeros.
	        // j is the actual index of rd within n (if < 0, rd is a leading zero).
	        out: {

	          // Get the number of digits of the first element of xc.
	          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
	          i = sd - d;

	          // If the rounding digit is in the first element of xc...
	          if (i < 0) {
	            i += LOG_BASE;
	            j = sd;
	            n = xc[ni = 0];

	            // Get the rounding digit at index j of n.
	            rd = mathfloor(n / pows10[d - j - 1] % 10);
	          } else {
	            ni = mathceil((i + 1) / LOG_BASE);

	            if (ni >= xc.length) {

	              if (r) {

	                // Needed by sqrt.
	                for (; xc.length <= ni; xc.push(0));
	                n = rd = 0;
	                d = 1;
	                i %= LOG_BASE;
	                j = i - LOG_BASE + 1;
	              } else {
	                break out;
	              }
	            } else {
	              n = k = xc[ni];

	              // Get the number of digits of n.
	              for (d = 1; k >= 10; k /= 10, d++);

	              // Get the index of rd within n.
	              i %= LOG_BASE;

	              // Get the index of rd within n, adjusted for leading zeros.
	              // The number of leading zeros of n is given by LOG_BASE - d.
	              j = i - LOG_BASE + d;

	              // Get the rounding digit at index j of n.
	              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
	            }
	          }

	          r = r || sd < 0 ||

	          // Are there any non-zero digits after the rounding digit?
	          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
	          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
	           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

	          r = rm < 4
	           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

	            // Check whether the digit to the left of the rounding digit is odd.
	            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
	             rm == (x.s < 0 ? 8 : 7));

	          if (sd < 1 || !xc[0]) {
	            xc.length = 0;

	            if (r) {

	              // Convert sd to decimal places.
	              sd -= x.e + 1;

	              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
	              x.e = -sd || 0;
	            } else {

	              // Zero.
	              xc[0] = x.e = 0;
	            }

	            return x;
	          }

	          // Remove excess digits.
	          if (i == 0) {
	            xc.length = ni;
	            k = 1;
	            ni--;
	          } else {
	            xc.length = ni + 1;
	            k = pows10[LOG_BASE - i];

	            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	            // j > 0 means i > number of leading zeros of n.
	            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
	          }

	          // Round up?
	          if (r) {

	            for (; ;) {

	              // If the digit to be rounded up is in the first element of xc...
	              if (ni == 0) {

	                // i will be the length of xc[0] before k is added.
	                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
	                j = xc[0] += k;
	                for (k = 1; j >= 10; j /= 10, k++);

	                // if i != k the length has increased.
	                if (i != k) {
	                  x.e++;
	                  if (xc[0] == BASE) xc[0] = 1;
	                }

	                break;
	              } else {
	                xc[ni] += k;
	                if (xc[ni] != BASE) break;
	                xc[ni--] = 0;
	                k = 1;
	              }
	            }
	          }

	          // Remove trailing zeros.
	          for (i = xc.length; xc[--i] === 0; xc.pop());
	        }

	        // Overflow? Infinity.
	        if (x.e > MAX_EXP) {
	          x.c = x.e = null;

	        // Underflow? Zero.
	        } else if (x.e < MIN_EXP) {
	          x.c = [x.e = 0];
	        }
	      }

	      return x;
	    }


	    function valueOf(n) {
	      var str,
	        e = n.e;

	      if (e === null) return n.toString();

	      str = coeffToString(n.c);

	      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	        ? toExponential(str, e)
	        : toFixedPoint(str, e, '0');

	      return n.s < 0 ? '-' + str : str;
	    }


	    // PROTOTYPE/INSTANCE METHODS


	    /*
	     * Return a new BigNumber whose value is the absolute value of this BigNumber.
	     */
	    P.absoluteValue = P.abs = function () {
	      var x = new BigNumber(this);
	      if (x.s < 0) x.s = 1;
	      return x;
	    };


	    /*
	     * Return
	     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
	     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
	     *   0 if they have the same value,
	     *   or null if the value of either is NaN.
	     */
	    P.comparedTo = function (y, b) {
	      return compare(this, new BigNumber(y, b));
	    };


	    /*
	     * If dp is undefined or null or true or false, return the number of decimal places of the
	     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	     *
	     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
	     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
	     * ROUNDING_MODE if rm is omitted.
	     *
	     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.decimalPlaces = P.dp = function (dp, rm) {
	      var c, n, v,
	        x = this;

	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        if (rm == null) rm = ROUNDING_MODE;
	        else intCheck(rm, 0, 8);

	        return round(new BigNumber(x), dp + x.e + 1, rm);
	      }

	      if (!(c = x.c)) return null;
	      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

	      // Subtract the number of trailing zeros of the last number.
	      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
	      if (n < 0) n = 0;

	      return n;
	    };


	    /*
	     *  n / 0 = I
	     *  n / N = N
	     *  n / I = 0
	     *  0 / n = 0
	     *  0 / 0 = N
	     *  0 / N = N
	     *  0 / I = 0
	     *  N / n = N
	     *  N / 0 = N
	     *  N / N = N
	     *  N / I = N
	     *  I / n = I
	     *  I / 0 = I
	     *  I / N = N
	     *  I / I = N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
	     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	     */
	    P.dividedBy = P.div = function (y, b) {
	      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
	    };


	    /*
	     * Return a new BigNumber whose value is the integer part of dividing the value of this
	     * BigNumber by the value of BigNumber(y, b).
	     */
	    P.dividedToIntegerBy = P.idiv = function (y, b) {
	      return div(this, new BigNumber(y, b), 0, 1);
	    };


	    /*
	     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
	     *
	     * If m is present, return the result modulo m.
	     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
	     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
	     *
	     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
	     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
	     *
	     * n {number|string|BigNumber} The exponent. An integer.
	     * [m] {number|string|BigNumber} The modulus.
	     *
	     * '[BigNumber Error] Exponent not an integer: {n}'
	     */
	    P.exponentiatedBy = P.pow = function (n, m) {
	      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
	        x = this;

	      n = new BigNumber(n);

	      // Allow NaN and ±Infinity, but not other non-integers.
	      if (n.c && !n.isInteger()) {
	        throw Error
	          (bignumberError + 'Exponent not an integer: ' + valueOf(n));
	      }

	      if (m != null) m = new BigNumber(m);

	      // Exponent of MAX_SAFE_INTEGER is 15.
	      nIsBig = n.e > 14;

	      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
	      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

	        // The sign of the result of pow when x is negative depends on the evenness of n.
	        // If +n overflows to ±Infinity, the evenness of n would be not be known.
	        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
	        return m ? y.mod(m) : y;
	      }

	      nIsNeg = n.s < 0;

	      if (m) {

	        // x % m returns NaN if abs(m) is zero, or m is NaN.
	        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

	        isModExp = !nIsNeg && x.isInteger() && m.isInteger();

	        if (isModExp) x = x.mod(m);

	      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
	      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
	      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
	        // [1, 240000000]
	        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
	        // [80000000000000]  [99999750000000]
	        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

	        // If x is negative and n is odd, k = -0, else k = 0.
	        k = x.s < 0 && isOdd(n) ? -0 : 0;

	        // If x >= 1, k = ±Infinity.
	        if (x.e > -1) k = 1 / k;

	        // If n is negative return ±0, else return ±Infinity.
	        return new BigNumber(nIsNeg ? 1 / k : k);

	      } else if (POW_PRECISION) {

	        // Truncating each coefficient array to a length of k after each multiplication
	        // equates to truncating significant digits to POW_PRECISION + [28, 41],
	        // i.e. there will be a minimum of 28 guard digits retained.
	        k = mathceil(POW_PRECISION / LOG_BASE + 2);
	      }

	      if (nIsBig) {
	        half = new BigNumber(0.5);
	        if (nIsNeg) n.s = 1;
	        nIsOdd = isOdd(n);
	      } else {
	        i = Math.abs(+valueOf(n));
	        nIsOdd = i % 2;
	      }

	      y = new BigNumber(ONE);

	      // Performs 54 loop iterations for n of 9007199254740991.
	      for (; ;) {

	        if (nIsOdd) {
	          y = y.times(x);
	          if (!y.c) break;

	          if (k) {
	            if (y.c.length > k) y.c.length = k;
	          } else if (isModExp) {
	            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
	          }
	        }

	        if (i) {
	          i = mathfloor(i / 2);
	          if (i === 0) break;
	          nIsOdd = i % 2;
	        } else {
	          n = n.times(half);
	          round(n, n.e + 1, 1);

	          if (n.e > 14) {
	            nIsOdd = isOdd(n);
	          } else {
	            i = +valueOf(n);
	            if (i === 0) break;
	            nIsOdd = i % 2;
	          }
	        }

	        x = x.times(x);

	        if (k) {
	          if (x.c && x.c.length > k) x.c.length = k;
	        } else if (isModExp) {
	          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
	        }
	      }

	      if (isModExp) return y;
	      if (nIsNeg) y = ONE.div(y);

	      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
	     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	     *
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
	     */
	    P.integerValue = function (rm) {
	      var n = new BigNumber(this);
	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);
	      return round(n, n.e + 1, rm);
	    };


	    /*
	     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isEqualTo = P.eq = function (y, b) {
	      return compare(this, new BigNumber(y, b)) === 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is a finite number, otherwise return false.
	     */
	    P.isFinite = function () {
	      return !!this.c;
	    };


	    /*
	     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isGreaterThan = P.gt = function (y, b) {
	      return compare(this, new BigNumber(y, b)) > 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is greater than or equal to the value of
	     * BigNumber(y, b), otherwise return false.
	     */
	    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
	      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

	    };


	    /*
	     * Return true if the value of this BigNumber is an integer, otherwise return false.
	     */
	    P.isInteger = function () {
	      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
	    };


	    /*
	     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isLessThan = P.lt = function (y, b) {
	      return compare(this, new BigNumber(y, b)) < 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is less than or equal to the value of
	     * BigNumber(y, b), otherwise return false.
	     */
	    P.isLessThanOrEqualTo = P.lte = function (y, b) {
	      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is NaN, otherwise return false.
	     */
	    P.isNaN = function () {
	      return !this.s;
	    };


	    /*
	     * Return true if the value of this BigNumber is negative, otherwise return false.
	     */
	    P.isNegative = function () {
	      return this.s < 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is positive, otherwise return false.
	     */
	    P.isPositive = function () {
	      return this.s > 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
	     */
	    P.isZero = function () {
	      return !!this.c && this.c[0] == 0;
	    };


	    /*
	     *  n - 0 = n
	     *  n - N = N
	     *  n - I = -I
	     *  0 - n = -n
	     *  0 - 0 = 0
	     *  0 - N = N
	     *  0 - I = -I
	     *  N - n = N
	     *  N - 0 = N
	     *  N - N = N
	     *  N - I = N
	     *  I - n = I
	     *  I - 0 = I
	     *  I - N = N
	     *  I - I = N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
	     * BigNumber(y, b).
	     */
	    P.minus = function (y, b) {
	      var i, j, t, xLTy,
	        x = this,
	        a = x.s;

	      y = new BigNumber(y, b);
	      b = y.s;

	      // Either NaN?
	      if (!a || !b) return new BigNumber(NaN);

	      // Signs differ?
	      if (a != b) {
	        y.s = -b;
	        return x.plus(y);
	      }

	      var xe = x.e / LOG_BASE,
	        ye = y.e / LOG_BASE,
	        xc = x.c,
	        yc = y.c;

	      if (!xe || !ye) {

	        // Either Infinity?
	        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

	        // Either zero?
	        if (!xc[0] || !yc[0]) {

	          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

	           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	           ROUNDING_MODE == 3 ? -0 : 0);
	        }
	      }

	      xe = bitFloor(xe);
	      ye = bitFloor(ye);
	      xc = xc.slice();

	      // Determine which is the bigger number.
	      if (a = xe - ye) {

	        if (xLTy = a < 0) {
	          a = -a;
	          t = xc;
	        } else {
	          ye = xe;
	          t = yc;
	        }

	        t.reverse();

	        // Prepend zeros to equalise exponents.
	        for (b = a; b--; t.push(0));
	        t.reverse();
	      } else {

	        // Exponents equal. Check digit by digit.
	        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

	        for (a = b = 0; b < j; b++) {

	          if (xc[b] != yc[b]) {
	            xLTy = xc[b] < yc[b];
	            break;
	          }
	        }
	      }

	      // x < y? Point xc to the array of the bigger number.
	      if (xLTy) {
	        t = xc;
	        xc = yc;
	        yc = t;
	        y.s = -y.s;
	      }

	      b = (j = yc.length) - (i = xc.length);

	      // Append zeros to xc if shorter.
	      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
	      if (b > 0) for (; b--; xc[i++] = 0);
	      b = BASE - 1;

	      // Subtract yc from xc.
	      for (; j > a;) {

	        if (xc[--j] < yc[j]) {
	          for (i = j; i && !xc[--i]; xc[i] = b);
	          --xc[i];
	          xc[j] += BASE;
	        }

	        xc[j] -= yc[j];
	      }

	      // Remove leading zeros and adjust exponent accordingly.
	      for (; xc[0] == 0; xc.splice(0, 1), --ye);

	      // Zero?
	      if (!xc[0]) {

	        // Following IEEE 754 (2008) 6.3,
	        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
	        y.s = ROUNDING_MODE == 3 ? -1 : 1;
	        y.c = [y.e = 0];
	        return y;
	      }

	      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
	      // for finite x and y.
	      return normalise(y, xc, ye);
	    };


	    /*
	     *   n % 0 =  N
	     *   n % N =  N
	     *   n % I =  n
	     *   0 % n =  0
	     *  -0 % n = -0
	     *   0 % 0 =  N
	     *   0 % N =  N
	     *   0 % I =  0
	     *   N % n =  N
	     *   N % 0 =  N
	     *   N % N =  N
	     *   N % I =  N
	     *   I % n =  N
	     *   I % 0 =  N
	     *   I % N =  N
	     *   I % I =  N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
	     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
	     */
	    P.modulo = P.mod = function (y, b) {
	      var q, s,
	        x = this;

	      y = new BigNumber(y, b);

	      // Return NaN if x is Infinity or NaN, or y is NaN or zero.
	      if (!x.c || !y.s || y.c && !y.c[0]) {
	        return new BigNumber(NaN);

	      // Return x if y is Infinity or x is zero.
	      } else if (!y.c || x.c && !x.c[0]) {
	        return new BigNumber(x);
	      }

	      if (MODULO_MODE == 9) {

	        // Euclidian division: q = sign(y) * floor(x / abs(y))
	        // r = x - qy    where  0 <= r < abs(y)
	        s = y.s;
	        y.s = 1;
	        q = div(x, y, 0, 3);
	        y.s = s;
	        q.s *= s;
	      } else {
	        q = div(x, y, 0, MODULO_MODE);
	      }

	      y = x.minus(q.times(y));

	      // To match JavaScript %, ensure sign of zero is sign of dividend.
	      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

	      return y;
	    };


	    /*
	     *  n * 0 = 0
	     *  n * N = N
	     *  n * I = I
	     *  0 * n = 0
	     *  0 * 0 = 0
	     *  0 * N = N
	     *  0 * I = N
	     *  N * n = N
	     *  N * 0 = N
	     *  N * N = N
	     *  N * I = N
	     *  I * n = I
	     *  I * 0 = N
	     *  I * N = N
	     *  I * I = I
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
	     * of BigNumber(y, b).
	     */
	    P.multipliedBy = P.times = function (y, b) {
	      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
	        base, sqrtBase,
	        x = this,
	        xc = x.c,
	        yc = (y = new BigNumber(y, b)).c;

	      // Either NaN, ±Infinity or ±0?
	      if (!xc || !yc || !xc[0] || !yc[0]) {

	        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
	        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
	          y.c = y.e = y.s = null;
	        } else {
	          y.s *= x.s;

	          // Return ±Infinity if either is ±Infinity.
	          if (!xc || !yc) {
	            y.c = y.e = null;

	          // Return ±0 if either is ±0.
	          } else {
	            y.c = [0];
	            y.e = 0;
	          }
	        }

	        return y;
	      }

	      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
	      y.s *= x.s;
	      xcL = xc.length;
	      ycL = yc.length;

	      // Ensure xc points to longer array and xcL to its length.
	      if (xcL < ycL) {
	        zc = xc;
	        xc = yc;
	        yc = zc;
	        i = xcL;
	        xcL = ycL;
	        ycL = i;
	      }

	      // Initialise the result array with zeros.
	      for (i = xcL + ycL, zc = []; i--; zc.push(0));

	      base = BASE;
	      sqrtBase = SQRT_BASE;

	      for (i = ycL; --i >= 0;) {
	        c = 0;
	        ylo = yc[i] % sqrtBase;
	        yhi = yc[i] / sqrtBase | 0;

	        for (k = xcL, j = i + k; j > i;) {
	          xlo = xc[--k] % sqrtBase;
	          xhi = xc[k] / sqrtBase | 0;
	          m = yhi * xlo + xhi * ylo;
	          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
	          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
	          zc[j--] = xlo % base;
	        }

	        zc[j] = c;
	      }

	      if (c) {
	        ++e;
	      } else {
	        zc.splice(0, 1);
	      }

	      return normalise(y, zc, e);
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber negated,
	     * i.e. multiplied by -1.
	     */
	    P.negated = function () {
	      var x = new BigNumber(this);
	      x.s = -x.s || null;
	      return x;
	    };


	    /*
	     *  n + 0 = n
	     *  n + N = N
	     *  n + I = I
	     *  0 + n = n
	     *  0 + 0 = 0
	     *  0 + N = N
	     *  0 + I = I
	     *  N + n = N
	     *  N + 0 = N
	     *  N + N = N
	     *  N + I = N
	     *  I + n = I
	     *  I + 0 = I
	     *  I + N = N
	     *  I + I = I
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
	     * BigNumber(y, b).
	     */
	    P.plus = function (y, b) {
	      var t,
	        x = this,
	        a = x.s;

	      y = new BigNumber(y, b);
	      b = y.s;

	      // Either NaN?
	      if (!a || !b) return new BigNumber(NaN);

	      // Signs differ?
	       if (a != b) {
	        y.s = -b;
	        return x.minus(y);
	      }

	      var xe = x.e / LOG_BASE,
	        ye = y.e / LOG_BASE,
	        xc = x.c,
	        yc = y.c;

	      if (!xe || !ye) {

	        // Return ±Infinity if either ±Infinity.
	        if (!xc || !yc) return new BigNumber(a / 0);

	        // Either zero?
	        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
	      }

	      xe = bitFloor(xe);
	      ye = bitFloor(ye);
	      xc = xc.slice();

	      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
	      if (a = xe - ye) {
	        if (a > 0) {
	          ye = xe;
	          t = yc;
	        } else {
	          a = -a;
	          t = xc;
	        }

	        t.reverse();
	        for (; a--; t.push(0));
	        t.reverse();
	      }

	      a = xc.length;
	      b = yc.length;

	      // Point xc to the longer array, and b to the shorter length.
	      if (a - b < 0) {
	        t = yc;
	        yc = xc;
	        xc = t;
	        b = a;
	      }

	      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
	      for (a = 0; b;) {
	        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
	        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
	      }

	      if (a) {
	        xc = [a].concat(xc);
	        ++ye;
	      }

	      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	      // ye = MAX_EXP + 1 possible
	      return normalise(y, xc, ye);
	    };


	    /*
	     * If sd is undefined or null or true or false, return the number of significant digits of
	     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	     * If sd is true include integer-part trailing zeros in the count.
	     *
	     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
	     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
	     * ROUNDING_MODE if rm is omitted.
	     *
	     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
	     *                     boolean: whether to count integer-part trailing zeros: true or false.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	     */
	    P.precision = P.sd = function (sd, rm) {
	      var c, n, v,
	        x = this;

	      if (sd != null && sd !== !!sd) {
	        intCheck(sd, 1, MAX);
	        if (rm == null) rm = ROUNDING_MODE;
	        else intCheck(rm, 0, 8);

	        return round(new BigNumber(x), sd, rm);
	      }

	      if (!(c = x.c)) return null;
	      v = c.length - 1;
	      n = v * LOG_BASE + 1;

	      if (v = c[v]) {

	        // Subtract the number of trailing zeros of the last element.
	        for (; v % 10 == 0; v /= 10, n--);

	        // Add the number of digits of the first element.
	        for (v = c[0]; v >= 10; v /= 10, n++);
	      }

	      if (sd && x.e + 1 > n) n = x.e + 1;

	      return n;
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
	     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
	     *
	     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
	     */
	    P.shiftedBy = function (k) {
	      intCheck(k, -9007199254740991, MAX_SAFE_INTEGER);
	      return this.times('1e' + k);
	    };


	    /*
	     *  sqrt(-n) =  N
	     *  sqrt(N) =  N
	     *  sqrt(-I) =  N
	     *  sqrt(I) =  I
	     *  sqrt(0) =  0
	     *  sqrt(-0) = -0
	     *
	     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
	     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	     */
	    P.squareRoot = P.sqrt = function () {
	      var m, n, r, rep, t,
	        x = this,
	        c = x.c,
	        s = x.s,
	        e = x.e,
	        dp = DECIMAL_PLACES + 4,
	        half = new BigNumber('0.5');

	      // Negative/NaN/Infinity/zero?
	      if (s !== 1 || !c || !c[0]) {
	        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
	      }

	      // Initial estimate.
	      s = Math.sqrt(+valueOf(x));

	      // Math.sqrt underflow/overflow?
	      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	      if (s == 0 || s == 1 / 0) {
	        n = coeffToString(c);
	        if ((n.length + e) % 2 == 0) n += '0';
	        s = Math.sqrt(+n);
	        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

	        if (s == 1 / 0) {
	          n = '5e' + e;
	        } else {
	          n = s.toExponential();
	          n = n.slice(0, n.indexOf('e') + 1) + e;
	        }

	        r = new BigNumber(n);
	      } else {
	        r = new BigNumber(s + '');
	      }

	      // Check for zero.
	      // r could be zero if MIN_EXP is changed after the this value was created.
	      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
	      // coeffToString to throw.
	      if (r.c[0]) {
	        e = r.e;
	        s = e + dp;
	        if (s < 3) s = 0;

	        // Newton-Raphson iteration.
	        for (; ;) {
	          t = r;
	          r = half.times(t.plus(div(x, t, dp, 1)));

	          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

	            // The exponent of r may here be one less than the final result exponent,
	            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
	            // are indexed correctly.
	            if (r.e < e) --s;
	            n = n.slice(s - 3, s + 1);

	            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
	            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
	            // iteration.
	            if (n == '9999' || !rep && n == '4999') {

	              // On the first iteration only, check to see if rounding up gives the
	              // exact result as the nines may infinitely repeat.
	              if (!rep) {
	                round(t, t.e + DECIMAL_PLACES + 2, 0);

	                if (t.times(t).eq(x)) {
	                  r = t;
	                  break;
	                }
	              }

	              dp += 4;
	              s += 4;
	              rep = 1;
	            } else {

	              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
	              // result. If not, then there are further digits and m will be truthy.
	              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	                // Truncate to the first rounding digit.
	                round(r, r.e + DECIMAL_PLACES + 2, 1);
	                m = !r.times(r).eq(x);
	              }

	              break;
	            }
	          }
	        }
	      }

	      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in exponential notation and
	     * rounded using ROUNDING_MODE to dp fixed decimal places.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.toExponential = function (dp, rm) {
	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        dp++;
	      }
	      return format(this, dp, rm, 1);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in fixed-point notation rounding
	     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	     *
	     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
	     * but e.g. (-0.00001).toFixed(0) is '-0'.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.toFixed = function (dp, rm) {
	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        dp = dp + this.e + 1;
	      }
	      return format(this, dp, rm);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in fixed-point notation rounded
	     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
	     * of the format or FORMAT object (see BigNumber.set).
	     *
	     * The formatting object may contain some or all of the properties shown below.
	     *
	     * FORMAT = {
	     *   prefix: '',
	     *   groupSize: 3,
	     *   secondaryGroupSize: 0,
	     *   groupSeparator: ',',
	     *   decimalSeparator: '.',
	     *   fractionGroupSize: 0,
	     *   fractionGroupSeparator: '\xA0',      // non-breaking space
	     *   suffix: ''
	     * };
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     * [format] {object} Formatting options. See FORMAT pbject above.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     * '[BigNumber Error] Argument not an object: {format}'
	     */
	    P.toFormat = function (dp, rm, format) {
	      var str,
	        x = this;

	      if (format == null) {
	        if (dp != null && rm && typeof rm == 'object') {
	          format = rm;
	          rm = null;
	        } else if (dp && typeof dp == 'object') {
	          format = dp;
	          dp = rm = null;
	        } else {
	          format = FORMAT;
	        }
	      } else if (typeof format != 'object') {
	        throw Error
	          (bignumberError + 'Argument not an object: ' + format);
	      }

	      str = x.toFixed(dp, rm);

	      if (x.c) {
	        var i,
	          arr = str.split('.'),
	          g1 = +format.groupSize,
	          g2 = +format.secondaryGroupSize,
	          groupSeparator = format.groupSeparator || '',
	          intPart = arr[0],
	          fractionPart = arr[1],
	          isNeg = x.s < 0,
	          intDigits = isNeg ? intPart.slice(1) : intPart,
	          len = intDigits.length;

	        if (g2) {
	          i = g1;
	          g1 = g2;
	          g2 = i;
	          len -= i;
	        }

	        if (g1 > 0 && len > 0) {
	          i = len % g1 || g1;
	          intPart = intDigits.substr(0, i);
	          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
	          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
	          if (isNeg) intPart = '-' + intPart;
	        }

	        str = fractionPart
	         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
	          ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
	           '$&' + (format.fractionGroupSeparator || ''))
	          : fractionPart)
	         : intPart;
	      }

	      return (format.prefix || '') + str + (format.suffix || '');
	    };


	    /*
	     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
	     * fraction with an integer numerator and an integer denominator.
	     * The denominator will be a positive non-zero value less than or equal to the specified
	     * maximum denominator. If a maximum denominator is not specified, the denominator will be
	     * the lowest value necessary to represent the number exactly.
	     *
	     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
	     *
	     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
	     */
	    P.toFraction = function (md) {
	      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
	        x = this,
	        xc = x.c;

	      if (md != null) {
	        n = new BigNumber(md);

	        // Throw if md is less than one or is not an integer, unless it is Infinity.
	        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
	          throw Error
	            (bignumberError + 'Argument ' +
	              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
	        }
	      }

	      if (!xc) return new BigNumber(x);

	      d = new BigNumber(ONE);
	      n1 = d0 = new BigNumber(ONE);
	      d1 = n0 = new BigNumber(ONE);
	      s = coeffToString(xc);

	      // Determine initial denominator.
	      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
	      e = d.e = s.length - x.e - 1;
	      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
	      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

	      exp = MAX_EXP;
	      MAX_EXP = 1 / 0;
	      n = new BigNumber(s);

	      // n0 = d1 = 0
	      n0.c[0] = 0;

	      for (; ;)  {
	        q = div(n, d, 0, 1);
	        d2 = d0.plus(q.times(d1));
	        if (d2.comparedTo(md) == 1) break;
	        d0 = d1;
	        d1 = d2;
	        n1 = n0.plus(q.times(d2 = n1));
	        n0 = d2;
	        d = n.minus(q.times(d2 = d));
	        n = d2;
	      }

	      d2 = div(md.minus(d0), d1, 0, 1);
	      n0 = n0.plus(d2.times(n1));
	      d0 = d0.plus(d2.times(d1));
	      n0.s = n1.s = x.s;
	      e = e * 2;

	      // Determine which fraction is closer to x, n0/d0 or n1/d1
	      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
	          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

	      MAX_EXP = exp;

	      return r;
	    };


	    /*
	     * Return the value of this BigNumber converted to a number primitive.
	     */
	    P.toNumber = function () {
	      return +valueOf(this);
	    };


	    /*
	     * Return a string representing the value of this BigNumber rounded to sd significant digits
	     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
	     * necessary to represent the integer part of the value in fixed-point notation, then use
	     * exponential notation.
	     *
	     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	     */
	    P.toPrecision = function (sd, rm) {
	      if (sd != null) intCheck(sd, 1, MAX);
	      return format(this, sd, rm, 2);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
	     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
	     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
	     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
	     * TO_EXP_NEG, return exponential notation.
	     *
	     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
	     *
	     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	     */
	    P.toString = function (b) {
	      var str,
	        n = this,
	        s = n.s,
	        e = n.e;

	      // Infinity or NaN?
	      if (e === null) {
	        if (s) {
	          str = 'Infinity';
	          if (s < 0) str = '-' + str;
	        } else {
	          str = 'NaN';
	        }
	      } else {
	        if (b == null) {
	          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	           ? toExponential(coeffToString(n.c), e)
	           : toFixedPoint(coeffToString(n.c), e, '0');
	        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
	          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
	          str = toFixedPoint(coeffToString(n.c), n.e, '0');
	        } else {
	          intCheck(b, 2, ALPHABET.length, 'Base');
	          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
	        }

	        if (s < 0 && n.c[0]) str = '-' + str;
	      }

	      return str;
	    };


	    /*
	     * Return as toString, but do not accept a base argument, and include the minus sign for
	     * negative zero.
	     */
	    P.valueOf = P.toJSON = function () {
	      return valueOf(this);
	    };


	    P._isBigNumber = true;

	    if (configObject != null) BigNumber.set(configObject);

	    return BigNumber;
	  }


	  // PRIVATE HELPER FUNCTIONS

	  // These functions don't need access to variables,
	  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


	  function bitFloor(n) {
	    var i = n | 0;
	    return n > 0 || n === i ? i : i - 1;
	  }


	  // Return a coefficient array as a string of base 10 digits.
	  function coeffToString(a) {
	    var s, z,
	      i = 1,
	      j = a.length,
	      r = a[0] + '';

	    for (; i < j;) {
	      s = a[i++] + '';
	      z = LOG_BASE - s.length;
	      for (; z--; s = '0' + s);
	      r += s;
	    }

	    // Determine trailing zeros.
	    for (j = r.length; r.charCodeAt(--j) === 48;);

	    return r.slice(0, j + 1 || 1);
	  }


	  // Compare the value of BigNumbers x and y.
	  function compare(x, y) {
	    var a, b,
	      xc = x.c,
	      yc = y.c,
	      i = x.s,
	      j = y.s,
	      k = x.e,
	      l = y.e;

	    // Either NaN?
	    if (!i || !j) return null;

	    a = xc && !xc[0];
	    b = yc && !yc[0];

	    // Either zero?
	    if (a || b) return a ? b ? 0 : -j : i;

	    // Signs differ?
	    if (i != j) return i;

	    a = i < 0;
	    b = k == l;

	    // Either Infinity?
	    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

	    // Compare exponents.
	    if (!b) return k > l ^ a ? 1 : -1;

	    j = (k = xc.length) < (l = yc.length) ? k : l;

	    // Compare digit by digit.
	    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

	    // Compare lengths.
	    return k == l ? 0 : k > l ^ a ? 1 : -1;
	  }


	  /*
	   * Check that n is a primitive number, an integer, and in range, otherwise throw.
	   */
	  function intCheck(n, min, max, name) {
	    if (n < min || n > max || n !== mathfloor(n)) {
	      throw Error
	       (bignumberError + (name || 'Argument') + (typeof n == 'number'
	         ? n < min || n > max ? ' out of range: ' : ' not an integer: '
	         : ' not a primitive number: ') + String(n));
	    }
	  }


	  // Assumes finite n.
	  function isOdd(n) {
	    var k = n.c.length - 1;
	    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
	  }


	  function toExponential(str, e) {
	    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
	     (e < 0 ? 'e' : 'e+') + e;
	  }


	  function toFixedPoint(str, e, z) {
	    var len, zs;

	    // Negative exponent?
	    if (e < 0) {

	      // Prepend zeros.
	      for (zs = z + '.'; ++e; zs += z);
	      str = zs + str;

	    // Positive exponent
	    } else {
	      len = str.length;

	      // Append zeros.
	      if (++e > len) {
	        for (zs = z, e -= len; --e; zs += z);
	        str += zs;
	      } else if (e < len) {
	        str = str.slice(0, e) + '.' + str.slice(e);
	      }
	    }

	    return str;
	  }


	  // EXPORT


	  BigNumber = clone();
	  BigNumber['default'] = BigNumber.BigNumber = BigNumber;

	  // AMD.
	  if (module.exports) {
	    module.exports = BigNumber;

	  // Browser.
	  } else {
	    if (!globalObject) {
	      globalObject = typeof self != 'undefined' && self ? self : window;
	    }

	    globalObject.BigNumber = BigNumber;
	  }
	})(commonjsGlobal); 
} (bignumber));

var bignumberExports = bignumber.exports;

(function (module) {
	var BigNumber = bignumberExports;

	/*
	    json2.js
	    2013-05-26

	    Public Domain.

	    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

	    See http://www.JSON.org/js.html


	    This code should be minified before deployment.
	    See http://javascript.crockford.com/jsmin.html

	    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
	    NOT CONTROL.


	    This file creates a global JSON object containing two methods: stringify
	    and parse.

	        JSON.stringify(value, replacer, space)
	            value       any JavaScript value, usually an object or array.

	            replacer    an optional parameter that determines how object
	                        values are stringified for objects. It can be a
	                        function or an array of strings.

	            space       an optional parameter that specifies the indentation
	                        of nested structures. If it is omitted, the text will
	                        be packed without extra whitespace. If it is a number,
	                        it will specify the number of spaces to indent at each
	                        level. If it is a string (such as '\t' or '&nbsp;'),
	                        it contains the characters used to indent at each level.

	            This method produces a JSON text from a JavaScript value.

	            When an object value is found, if the object contains a toJSON
	            method, its toJSON method will be called and the result will be
	            stringified. A toJSON method does not serialize: it returns the
	            value represented by the name/value pair that should be serialized,
	            or undefined if nothing should be serialized. The toJSON method
	            will be passed the key associated with the value, and this will be
	            bound to the value

	            For example, this would serialize Dates as ISO strings.

	                Date.prototype.toJSON = function (key) {
	                    function f(n) {
	                        // Format integers to have at least two digits.
	                        return n < 10 ? '0' + n : n;
	                    }

	                    return this.getUTCFullYear()   + '-' +
	                         f(this.getUTCMonth() + 1) + '-' +
	                         f(this.getUTCDate())      + 'T' +
	                         f(this.getUTCHours())     + ':' +
	                         f(this.getUTCMinutes())   + ':' +
	                         f(this.getUTCSeconds())   + 'Z';
	                };

	            You can provide an optional replacer method. It will be passed the
	            key and value of each member, with this bound to the containing
	            object. The value that is returned from your method will be
	            serialized. If your method returns undefined, then the member will
	            be excluded from the serialization.

	            If the replacer parameter is an array of strings, then it will be
	            used to select the members to be serialized. It filters the results
	            such that only members with keys listed in the replacer array are
	            stringified.

	            Values that do not have JSON representations, such as undefined or
	            functions, will not be serialized. Such values in objects will be
	            dropped; in arrays they will be replaced with null. You can use
	            a replacer function to replace those with JSON values.
	            JSON.stringify(undefined) returns undefined.

	            The optional space parameter produces a stringification of the
	            value that is filled with line breaks and indentation to make it
	            easier to read.

	            If the space parameter is a non-empty string, then that string will
	            be used for indentation. If the space parameter is a number, then
	            the indentation will be that many spaces.

	            Example:

	            text = JSON.stringify(['e', {pluribus: 'unum'}]);
	            // text is '["e",{"pluribus":"unum"}]'


	            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
	            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

	            text = JSON.stringify([new Date()], function (key, value) {
	                return this[key] instanceof Date ?
	                    'Date(' + this[key] + ')' : value;
	            });
	            // text is '["Date(---current time---)"]'


	        JSON.parse(text, reviver)
	            This method parses a JSON text to produce an object or array.
	            It can throw a SyntaxError exception.

	            The optional reviver parameter is a function that can filter and
	            transform the results. It receives each of the keys and values,
	            and its return value is used instead of the original value.
	            If it returns what it received, then the structure is not modified.
	            If it returns undefined then the member is deleted.

	            Example:

	            // Parse the text. Values that look like ISO date strings will
	            // be converted to Date objects.

	            myData = JSON.parse(text, function (key, value) {
	                var a;
	                if (typeof value === 'string') {
	                    a =
	/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
	                    if (a) {
	                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
	                            +a[5], +a[6]));
	                    }
	                }
	                return value;
	            });

	            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
	                var d;
	                if (typeof value === 'string' &&
	                        value.slice(0, 5) === 'Date(' &&
	                        value.slice(-1) === ')') {
	                    d = new Date(value.slice(5, -1));
	                    if (d) {
	                        return d;
	                    }
	                }
	                return value;
	            });


	    This is a reference implementation. You are free to copy, modify, or
	    redistribute.
	*/

	/*jslint evil: true, regexp: true */

	/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
	    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
	    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
	    lastIndex, length, parse, prototype, push, replace, slice, stringify,
	    test, toJSON, toString, valueOf
	*/


	// Create a JSON object only if one does not already exist. We create the
	// methods in a closure to avoid creating global variables.

	var JSON = module.exports;

	(function () {

	    var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        gap,
	        indent,
	        meta = {    // table of character substitutions
	            '\b': '\\b',
	            '\t': '\\t',
	            '\n': '\\n',
	            '\f': '\\f',
	            '\r': '\\r',
	            '"' : '\\"',
	            '\\': '\\\\'
	        },
	        rep;


	    function quote(string) {

	// If the string contains no control characters, no quote characters, and no
	// backslash characters, then we can safely slap some quotes around it.
	// Otherwise we must also replace the offending characters with safe escape
	// sequences.

	        escapable.lastIndex = 0;
	        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	            var c = meta[a];
	            return typeof c === 'string'
	                ? c
	                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	        }) + '"' : '"' + string + '"';
	    }


	    function str(key, holder) {

	// Produce a string from holder[key].

	        var i,          // The loop counter.
	            k,          // The member key.
	            v,          // The member value.
	            length,
	            mind = gap,
	            partial,
	            value = holder[key],
	            isBigNumber = value != null && (value instanceof BigNumber || BigNumber.isBigNumber(value));

	// If the value has a toJSON method, call it to obtain a replacement value.

	        if (value && typeof value === 'object' &&
	                typeof value.toJSON === 'function') {
	            value = value.toJSON(key);
	        }

	// If we were called with a replacer function, then call the replacer to
	// obtain a replacement value.

	        if (typeof rep === 'function') {
	            value = rep.call(holder, key, value);
	        }

	// What happens next depends on the value's type.

	        switch (typeof value) {
	        case 'string':
	            if (isBigNumber) {
	                return value;
	            } else {
	                return quote(value);
	            }

	        case 'number':

	// JSON numbers must be finite. Encode non-finite numbers as null.

	            return isFinite(value) ? String(value) : 'null';

	        case 'boolean':
	        case 'null':
	        case 'bigint':

	// If the value is a boolean or null, convert it to a string. Note:
	// typeof null does not produce 'null'. The case is included here in
	// the remote chance that this gets fixed someday.

	            return String(value);

	// If the type is 'object', we might be dealing with an object or an array or
	// null.

	        case 'object':

	// Due to a specification blunder in ECMAScript, typeof null is 'object',
	// so watch out for that case.

	            if (!value) {
	                return 'null';
	            }

	// Make an array to hold the partial results of stringifying this object value.

	            gap += indent;
	            partial = [];

	// Is the value an array?

	            if (Object.prototype.toString.apply(value) === '[object Array]') {

	// The value is an array. Stringify every element. Use null as a placeholder
	// for non-JSON values.

	                length = value.length;
	                for (i = 0; i < length; i += 1) {
	                    partial[i] = str(i, value) || 'null';
	                }

	// Join all of the elements together, separated with commas, and wrap them in
	// brackets.

	                v = partial.length === 0
	                    ? '[]'
	                    : gap
	                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
	                    : '[' + partial.join(',') + ']';
	                gap = mind;
	                return v;
	            }

	// If the replacer is an array, use it to select the members to be stringified.

	            if (rep && typeof rep === 'object') {
	                length = rep.length;
	                for (i = 0; i < length; i += 1) {
	                    if (typeof rep[i] === 'string') {
	                        k = rep[i];
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                        }
	                    }
	                }
	            } else {

	// Otherwise, iterate through all of the keys in the object.

	                Object.keys(value).forEach(function(k) {
	                    var v = str(k, value);
	                    if (v) {
	                        partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                    }
	                });
	            }

	// Join all of the member texts together, separated with commas,
	// and wrap them in braces.

	            v = partial.length === 0
	                ? '{}'
	                : gap
	                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
	                : '{' + partial.join(',') + '}';
	            gap = mind;
	            return v;
	        }
	    }

	// If the JSON object does not yet have a stringify method, give it one.

	    if (typeof JSON.stringify !== 'function') {
	        JSON.stringify = function (value, replacer, space) {

	// The stringify method takes a value and an optional replacer, and an optional
	// space parameter, and returns a JSON text. The replacer can be a function
	// that can replace values, or an array of strings that will select the keys.
	// A default replacer method can be provided. Use of the space parameter can
	// produce text that is more easily readable.

	            var i;
	            gap = '';
	            indent = '';

	// If the space parameter is a number, make an indent string containing that
	// many spaces.

	            if (typeof space === 'number') {
	                for (i = 0; i < space; i += 1) {
	                    indent += ' ';
	                }

	// If the space parameter is a string, it will be used as the indent string.

	            } else if (typeof space === 'string') {
	                indent = space;
	            }

	// If there is a replacer, it must be a function or an array.
	// Otherwise, throw an error.

	            rep = replacer;
	            if (replacer && typeof replacer !== 'function' &&
	                    (typeof replacer !== 'object' ||
	                    typeof replacer.length !== 'number')) {
	                throw new Error('JSON.stringify');
	            }

	// Make a fake root object containing our value under the key of ''.
	// Return the result of stringifying the value.

	            return str('', {'': value});
	        };
	    }
	}()); 
} (stringify));

var stringifyExports = stringify.exports;

var BigNumber = null;

// regexpxs extracted from
// (c) BSD-3-Clause
// https://github.com/fastify/secure-json-parse/graphs/contributors and https://github.com/hapijs/bourne/graphs/contributors

const suspectProtoRx = /(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/;
const suspectConstructorRx = /(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;

/*
    json_parse.js
    2012-06-20

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    This file creates a json_parse function.
    During create you can (optionally) specify some behavioural switches

        require('json-bigint')(options)

            The optional options parameter holds switches that drive certain
            aspects of the parsing process:
            * options.strict = true will warn about duplicate-key usage in the json.
              The default (strict = false) will silently ignore those and overwrite
              values for keys that are in duplicate use.

    The resulting function follows this signature:
        json_parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = json_parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

    This is a reference implementation. You are free to copy, modify, or
    redistribute.

    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.
*/

/*members "", "\"", "\/", "\\", at, b, call, charAt, f, fromCharCode,
    hasOwnProperty, message, n, name, prototype, push, r, t, text
*/

var json_parse$1 = function (options) {

  // This is a function that can parse a JSON text, producing a JavaScript
  // data structure. It is a simple, recursive descent parser. It does not use
  // eval or regular expressions, so it can be used as a model for implementing
  // a JSON parser in other languages.

  // We are defining the function inside of another function to avoid creating
  // global variables.

  // Default options one can override by passing options to the parse()
  var _options = {
    strict: false, // not being strict means do not generate syntax errors for "duplicate key"
    storeAsString: false, // toggles whether the values should be stored as BigNumber (default) or a string
    alwaysParseAsBig: false, // toggles whether all numbers should be Big
    useNativeBigInt: false, // toggles whether to use native BigInt instead of bignumber.js
    protoAction: 'error',
    constructorAction: 'error',
  };

  // If there are options, then use them to override the default _options
  if (options !== undefined && options !== null) {
    if (options.strict === true) {
      _options.strict = true;
    }
    if (options.storeAsString === true) {
      _options.storeAsString = true;
    }
    _options.alwaysParseAsBig =
      options.alwaysParseAsBig === true ? options.alwaysParseAsBig : false;
    _options.useNativeBigInt =
      options.useNativeBigInt === true ? options.useNativeBigInt : false;

    if (typeof options.constructorAction !== 'undefined') {
      if (
        options.constructorAction === 'error' ||
        options.constructorAction === 'ignore' ||
        options.constructorAction === 'preserve'
      ) {
        _options.constructorAction = options.constructorAction;
      } else {
        throw new Error(
          `Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${options.constructorAction}`
        );
      }
    }

    if (typeof options.protoAction !== 'undefined') {
      if (
        options.protoAction === 'error' ||
        options.protoAction === 'ignore' ||
        options.protoAction === 'preserve'
      ) {
        _options.protoAction = options.protoAction;
      } else {
        throw new Error(
          `Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${options.protoAction}`
        );
      }
    }
  }

  var at, // The index of the current character
    ch, // The current character
    escapee = {
      '"': '"',
      '\\': '\\',
      '/': '/',
      b: '\b',
      f: '\f',
      n: '\n',
      r: '\r',
      t: '\t',
    },
    text,
    error = function (m) {
      // Call error when something is wrong.

      throw {
        name: 'SyntaxError',
        message: m,
        at: at,
        text: text,
      };
    },
    next = function (c) {
      // If a c parameter is provided, verify that it matches the current character.

      if (c && c !== ch) {
        error("Expected '" + c + "' instead of '" + ch + "'");
      }

      // Get the next character. When there are no more characters,
      // return the empty string.

      ch = text.charAt(at);
      at += 1;
      return ch;
    },
    number = function () {
      // Parse a number value.

      var number,
        string = '';

      if (ch === '-') {
        string = '-';
        next('-');
      }
      while (ch >= '0' && ch <= '9') {
        string += ch;
        next();
      }
      if (ch === '.') {
        string += '.';
        while (next() && ch >= '0' && ch <= '9') {
          string += ch;
        }
      }
      if (ch === 'e' || ch === 'E') {
        string += ch;
        next();
        if (ch === '-' || ch === '+') {
          string += ch;
          next();
        }
        while (ch >= '0' && ch <= '9') {
          string += ch;
          next();
        }
      }
      number = +string;
      if (!isFinite(number)) {
        error('Bad number');
      } else {
        if (BigNumber == null) BigNumber = bignumberExports;
        //if (number > 9007199254740992 || number < -9007199254740992)
        // Bignumber has stricter check: everything with length > 15 digits disallowed
        if (string.length > 15)
          return _options.storeAsString
            ? string
            : _options.useNativeBigInt
            ? BigInt(string)
            : new BigNumber(string);
        else
          return !_options.alwaysParseAsBig
            ? number
            : _options.useNativeBigInt
            ? BigInt(number)
            : new BigNumber(number);
      }
    },
    string = function () {
      // Parse a string value.

      var hex,
        i,
        string = '',
        uffff;

      // When parsing for string values, we must look for " and \ characters.

      if (ch === '"') {
        var startAt = at;
        while (next()) {
          if (ch === '"') {
            if (at - 1 > startAt) string += text.substring(startAt, at - 1);
            next();
            return string;
          }
          if (ch === '\\') {
            if (at - 1 > startAt) string += text.substring(startAt, at - 1);
            next();
            if (ch === 'u') {
              uffff = 0;
              for (i = 0; i < 4; i += 1) {
                hex = parseInt(next(), 16);
                if (!isFinite(hex)) {
                  break;
                }
                uffff = uffff * 16 + hex;
              }
              string += String.fromCharCode(uffff);
            } else if (typeof escapee[ch] === 'string') {
              string += escapee[ch];
            } else {
              break;
            }
            startAt = at;
          }
        }
      }
      error('Bad string');
    },
    white = function () {
      // Skip whitespace.

      while (ch && ch <= ' ') {
        next();
      }
    },
    word = function () {
      // true, false, or null.

      switch (ch) {
        case 't':
          next('t');
          next('r');
          next('u');
          next('e');
          return true;
        case 'f':
          next('f');
          next('a');
          next('l');
          next('s');
          next('e');
          return false;
        case 'n':
          next('n');
          next('u');
          next('l');
          next('l');
          return null;
      }
      error("Unexpected '" + ch + "'");
    },
    value, // Place holder for the value function.
    array = function () {
      // Parse an array value.

      var array = [];

      if (ch === '[') {
        next('[');
        white();
        if (ch === ']') {
          next(']');
          return array; // empty array
        }
        while (ch) {
          array.push(value());
          white();
          if (ch === ']') {
            next(']');
            return array;
          }
          next(',');
          white();
        }
      }
      error('Bad array');
    },
    object = function () {
      // Parse an object value.

      var key,
        object = Object.create(null);

      if (ch === '{') {
        next('{');
        white();
        if (ch === '}') {
          next('}');
          return object; // empty object
        }
        while (ch) {
          key = string();
          white();
          next(':');
          if (
            _options.strict === true &&
            Object.hasOwnProperty.call(object, key)
          ) {
            error('Duplicate key "' + key + '"');
          }

          if (suspectProtoRx.test(key) === true) {
            if (_options.protoAction === 'error') {
              error('Object contains forbidden prototype property');
            } else if (_options.protoAction === 'ignore') {
              value();
            } else {
              object[key] = value();
            }
          } else if (suspectConstructorRx.test(key) === true) {
            if (_options.constructorAction === 'error') {
              error('Object contains forbidden constructor property');
            } else if (_options.constructorAction === 'ignore') {
              value();
            } else {
              object[key] = value();
            }
          } else {
            object[key] = value();
          }

          white();
          if (ch === '}') {
            next('}');
            return object;
          }
          next(',');
          white();
        }
      }
      error('Bad object');
    };

  value = function () {
    // Parse a JSON value. It could be an object, an array, a string, a number,
    // or a word.

    white();
    switch (ch) {
      case '{':
        return object();
      case '[':
        return array();
      case '"':
        return string();
      case '-':
        return number();
      default:
        return ch >= '0' && ch <= '9' ? number() : word();
    }
  };

  // Return the json_parse function. It will have access to all of the above
  // functions and variables.

  return function (source, reviver) {
    var result;

    text = source + '';
    at = 0;
    ch = ' ';
    result = value();
    white();
    if (ch) {
      error('Syntax error');
    }

    // If there is a reviver function, we recursively walk the new structure,
    // passing each name/value pair to the reviver function for possible
    // transformation, starting with a temporary root object that holds the result
    // in an empty key. If there is not a reviver function, we simply return the
    // result.

    return typeof reviver === 'function'
      ? (function walk(holder, key) {
          var v,
            value = holder[key];
          if (value && typeof value === 'object') {
            Object.keys(value).forEach(function (k) {
              v = walk(value, k);
              if (v !== undefined) {
                value[k] = v;
              } else {
                delete value[k];
              }
            });
          }
          return reviver.call(holder, key, value);
        })({ '': result }, '')
      : result;
  };
};

var parse = json_parse$1;

var json_stringify = stringifyExports.stringify;
var json_parse     = parse;

jsonBigint.exports = function(options) {
    return  {
        parse: json_parse(options),
        stringify: json_stringify
    }
};
//create the default method members with no options applied for backwards compatibility
jsonBigint.exports.parse = json_parse();
jsonBigint.exports.stringify = json_stringify;

var jsonBigintExports = jsonBigint.exports;
var JSONbigWithoutConfig = /*@__PURE__*/getDefaultExportFromCjs(jsonBigintExports);

/**
 * Configure how integers in JSON response will be decoded.
 */
var IntDecoding;
(function (IntDecoding) {
    /**
     * All integers will be decoded as Numbers, meaning any values greater than
     * Number.MAX_SAFE_INTEGER will lose precision.
     */
    IntDecoding["UNSAFE"] = "unsafe";
    /**
     * All integers will be decoded as Numbers, but if any values are greater than
     * Number.MAX_SAFE_INTEGER an error will be thrown.
     */
    IntDecoding["SAFE"] = "safe";
    /**
     * Integers will be decoded as Numbers if they are less than or equal to
     * Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.
     */
    IntDecoding["MIXED"] = "mixed";
    /**
     * All integers will be decoded as BigInts.
     */
    IntDecoding["BIGINT"] = "bigint";
})(IntDecoding || (IntDecoding = {}));
var IntDecoding$1 = IntDecoding;

const JSONbig = JSONbigWithoutConfig({
    useNativeBigInt: true,
    strict: true,
});
/**
 * Parse JSON with additional options.
 * @param str - The JSON string to parse.
 * @param options - Configures how integers in this JSON string will be decoded. See the
 *   `IntDecoding` enum for more details.
 */
function parseJSON(str, { intDecoding }) {
    if (intDecoding !== IntDecoding$1.SAFE &&
        intDecoding !== IntDecoding$1.UNSAFE &&
        intDecoding !== IntDecoding$1.BIGINT &&
        intDecoding !== IntDecoding$1.MIXED) {
        throw new Error(`Invalid intDecoding option: ${intDecoding}`);
    }
    return JSONbig.parse(str, (_, value) => {
        if (value != null &&
            typeof value === 'object' &&
            Object.getPrototypeOf(value) == null) {
            // JSONbig.parse objects are created with Object.create(null) and thus have a null prototype
            // let us remedy that
            Object.setPrototypeOf(value, Object.prototype);
        }
        if (typeof value === 'bigint') {
            if (intDecoding === IntDecoding$1.SAFE && value > Number.MAX_SAFE_INTEGER) {
                throw new Error(`Integer exceeds maximum safe integer: ${value.toString()}. Try parsing with a different intDecoding option.`);
            }
            if (intDecoding === IntDecoding$1.BIGINT ||
                (intDecoding === IntDecoding$1.MIXED && value > Number.MAX_SAFE_INTEGER)) {
                return value;
            }
            // JSONbig.parse converts number to BigInts if they are >= 10**15. This is smaller than
            // Number.MAX_SAFE_INTEGER, so we can convert some BigInts back to normal numbers.
            return Number(value);
        }
        if (typeof value === 'number') {
            if (intDecoding === IntDecoding$1.BIGINT && Number.isInteger(value)) {
                return BigInt(value);
            }
        }
        return value;
    });
}
/**
 * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
 *
 * This functions differs from the built-in JSON.stringify in that it supports serializing BigInts.
 *
 * This function takes the same arguments as the built-in JSON.stringify function.
 *
 * @param value - A JavaScript value, usually an object or array, to be converted.
 * @param replacer - A function that transforms the results.
 * @param space - Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
 */
function stringifyJSON(value, replacer, space) {
    return JSONbig.stringify(value, replacer, space);
}
/**
 * ArrayEqual takes two arrays and return true if equal, false otherwise
 */
function arrayEqual(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    return Array.from(a).every((val, i) => val === b[i]);
}
/**
 * ConcatArrays takes n number arrays and returns a joint Uint8Array
 * @param arrs - An arbitrary number of n array-like number list arguments
 * @returns [a,b]
 */
function concatArrays(...arrs) {
    const size = arrs.reduce((sum, arr) => sum + arr.length, 0);
    const c = new Uint8Array(size);
    let offset = 0;
    for (let i = 0; i < arrs.length; i++) {
        c.set(arrs[i], offset);
        offset += arrs[i].length;
    }
    return c;
}
/**
 * Check whether the environment is Node.js (as opposed to the browser)
 * @returns True if Node.js environment, false otherwise
 */
function isNode() {
    return (
    // @ts-ignore
    typeof process === 'object' &&
        // @ts-ignore
        typeof process.versions === 'object' &&
        // @ts-ignore
        typeof process.versions.node !== 'undefined');
}
/**
 * Check whether the environment is ReactNative
 * @returns True if ReactNative, false otherwise
 */
function isReactNative() {
    const { navigator } = globalThis;
    if (typeof navigator === 'object' && navigator.product === 'ReactNative') {
        return true;
    }
    return false;
}
function ensureSafeInteger(value) {
    if (typeof value === 'undefined') {
        throw new Error('Value is undefined');
    }
    if (typeof value === 'bigint') {
        if (value > BigInt(Number.MAX_SAFE_INTEGER) ||
            value < BigInt(Number.MIN_SAFE_INTEGER)) {
            throw new Error(`BigInt value ${value} is not a safe integer`);
        }
        return Number(value);
    }
    if (typeof value === 'number') {
        if (Number.isSafeInteger(value)) {
            return value;
        }
        throw new Error(`Value ${value} is not a safe integer`);
    }
    throw new Error(`Unexpected type ${typeof value}, ${value}`);
}
function ensureSafeUnsignedInteger(value) {
    const intValue = ensureSafeInteger(value);
    if (intValue < 0) {
        throw new Error(`Value ${intValue} is negative`);
    }
    return intValue;
}
function ensureBigInt(value) {
    if (typeof value === 'undefined') {
        throw new Error('Value is undefined');
    }
    if (typeof value === 'bigint') {
        return value;
    }
    if (typeof value === 'number') {
        if (!Number.isSafeInteger(value)) {
            throw new Error(`Value ${value} is not a safe integer`);
        }
        return BigInt(value);
    }
    throw new Error(`Unexpected type ${typeof value}, ${value}`);
}
function ensureUint64(value) {
    const bigIntValue = ensureBigInt(value);
    if (bigIntValue < 0 || bigIntValue > BigInt('0xffffffffffffffff')) {
        throw new Error(`Value ${bigIntValue} is not a uint64`);
    }
    return bigIntValue;
}

function genericHash(arr) {
    return sha512.sha512_256.array(arr);
}
function randomBytes(length) {
    if (isReactNative()) {
        console.warn(`It looks like you're running in react-native. In order to perform common crypto operations you will need to polyfill common operations such as crypto.getRandomValues`);
    }
    return nacl.randomBytes(length);
}
function keyPairFromSeed(seed) {
    return nacl.sign.keyPair.fromSeed(seed);
}
function keyPair() {
    const seed = randomBytes(nacl.box.secretKeyLength);
    return keyPairFromSeed(seed);
}
function isValidSignatureLength(len) {
    return len === nacl.sign.signatureLength;
}
function keyPairFromSecretKey(sk) {
    return nacl.sign.keyPair.fromSecretKey(sk);
}
function sign(msg, secretKey) {
    return nacl.sign.detached(msg, secretKey);
}
function bytesEqual(a, b) {
    return nacl.verify(a, b);
}
function verify(message, signature, verifyKey) {
    return nacl.sign.detached.verify(message, signature, verifyKey);
}
// constants
const PUBLIC_KEY_LENGTH = nacl.sign.publicKeyLength;
nacl.sign.secretKeyLength;
const HASH_BYTES_LENGTH = 32;
const SEED_BTYES_LENGTH = 32;

var base32$1 = {exports: {}};

/*
 * [hi-base32]{@link https://github.com/emn178/hi-base32}
 *
 * @version 0.5.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */

(function (module) {
	/*jslint bitwise: true */
	(function () {

	  var root = typeof window === 'object' ? window : {};
	  var NODE_JS = !root.HI_BASE32_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
	  if (NODE_JS) {
	    root = commonjsGlobal;
	  }
	  var COMMON_JS = !root.HI_BASE32_NO_COMMON_JS && 'object' === 'object' && module.exports;
	  var BASE32_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'.split('');
	  var BASE32_DECODE_CHAR = {
	    'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8,
	    'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16,
	    'R': 17, 'S': 18, 'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24,
	    'Z': 25, '2': 26, '3': 27, '4': 28, '5': 29, '6': 30, '7': 31
	  };

	  var blocks = [0, 0, 0, 0, 0, 0, 0, 0];

	  var throwInvalidUtf8 = function (position, partial) {
	    if (partial.length > 10) {
	      partial = '...' + partial.substr(-10);
	    }
	    var err = new Error('Decoded data is not valid UTF-8.'
	      + ' Maybe try base32.decode.asBytes()?'
	      + ' Partial data after reading ' + position + ' bytes: ' + partial + ' <-');
	    err.position = position;
	    throw err;
	  };

	  var toUtf8String = function (bytes) {
	    var str = '', length = bytes.length, i = 0, followingChars = 0, b, c;
	    while (i < length) {
	      b = bytes[i++];
	      if (b <= 0x7F) {
	        str += String.fromCharCode(b);
	        continue;
	      } else if (b > 0xBF && b <= 0xDF) {
	        c = b & 0x1F;
	        followingChars = 1;
	      } else if (b <= 0xEF) {
	        c = b & 0x0F;
	        followingChars = 2;
	      } else if (b <= 0xF7) {
	        c = b & 0x07;
	        followingChars = 3;
	      } else {
	        throwInvalidUtf8(i, str);
	      }

	      for (var j = 0; j < followingChars; ++j) {
	        b = bytes[i++];
	        if (b < 0x80 || b > 0xBF) {
	          throwInvalidUtf8(i, str);
	        }
	        c <<= 6;
	        c += b & 0x3F;
	      }
	      if (c >= 0xD800 && c <= 0xDFFF) {
	        throwInvalidUtf8(i, str);
	      }
	      if (c > 0x10FFFF) {
	        throwInvalidUtf8(i, str);
	      }

	      if (c <= 0xFFFF) {
	        str += String.fromCharCode(c);
	      } else {
	        c -= 0x10000;
	        str += String.fromCharCode((c >> 10) + 0xD800);
	        str += String.fromCharCode((c & 0x3FF) + 0xDC00);
	      }
	    }
	    return str;
	  };

	  var decodeAsBytes = function (base32Str) {
	    if (base32Str === '') {
	      return [];
	    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {
	      throw new Error('Invalid base32 characters');
	    }
	    base32Str = base32Str.replace(/=/g, '');
	    var v1, v2, v3, v4, v5, v6, v7, v8, bytes = [], index = 0, length = base32Str.length;

	    // 4 char to 3 bytes
	    for (var i = 0, count = length >> 3 << 3; i < count;) {
	      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
	      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
	      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;
	      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;
	      bytes[index++] = (v7 << 5 | v8) & 255;
	    }

	    // remain bytes
	    var remain = length - count;
	    if (remain === 2) {
	      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
	    } else if (remain === 4) {
	      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
	      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
	    } else if (remain === 5) {
	      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
	      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
	      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;
	    } else if (remain === 7) {
	      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
	      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
	      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;
	      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;
	    }
	    return bytes;
	  };

	  var encodeAscii = function (str) {
	    var v1, v2, v3, v4, v5, base32Str = '', length = str.length;
	    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {
	      v1 = str.charCodeAt(i++);
	      v2 = str.charCodeAt(i++);
	      v3 = str.charCodeAt(i++);
	      v4 = str.charCodeAt(i++);
	      v5 = str.charCodeAt(i++);
	      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +
	        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +
	        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +
	        BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +
	        BASE32_ENCODE_CHAR[v5 & 31];
	    }

	    // remain char
	    var remain = length - count;
	    if (remain === 1) {
	      v1 = str.charCodeAt(i);
	      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	        BASE32_ENCODE_CHAR[(v1 << 2) & 31] +
	        '======';
	    } else if (remain === 2) {
	      v1 = str.charCodeAt(i++);
	      v2 = str.charCodeAt(i);
	      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	        BASE32_ENCODE_CHAR[(v2 << 4) & 31] +
	        '====';
	    } else if (remain === 3) {
	      v1 = str.charCodeAt(i++);
	      v2 = str.charCodeAt(i++);
	      v3 = str.charCodeAt(i);
	      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +
	        BASE32_ENCODE_CHAR[(v3 << 1) & 31] +
	        '===';
	    } else if (remain === 4) {
	      v1 = str.charCodeAt(i++);
	      v2 = str.charCodeAt(i++);
	      v3 = str.charCodeAt(i++);
	      v4 = str.charCodeAt(i);
	      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +
	        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +
	        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +
	        BASE32_ENCODE_CHAR[(v4 << 3) & 31] +
	        '=';
	    }
	    return base32Str;
	  };

	  var encodeUtf8 = function (str) {
	    var v1, v2, v3, v4, v5, code, end = false, base32Str = '',
	      index = 0, i, start = 0, length = str.length;
	      if (str === '') {
	        return base32Str;
	      }
	    do {
	      blocks[0] = blocks[5];
	      blocks[1] = blocks[6];
	      blocks[2] = blocks[7];
	      for (i = start; index < length && i < 5; ++index) {
	        code = str.charCodeAt(index);
	        if (code < 0x80) {
	          blocks[i++] = code;
	        } else if (code < 0x800) {
	          blocks[i++] = 0xc0 | (code >> 6);
	          blocks[i++] = 0x80 | (code & 0x3f);
	        } else if (code < 0xd800 || code >= 0xe000) {
	          blocks[i++] = 0xe0 | (code >> 12);
	          blocks[i++] = 0x80 | ((code >> 6) & 0x3f);
	          blocks[i++] = 0x80 | (code & 0x3f);
	        } else {
	          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++index) & 0x3ff));
	          blocks[i++] = 0xf0 | (code >> 18);
	          blocks[i++] = 0x80 | ((code >> 12) & 0x3f);
	          blocks[i++] = 0x80 | ((code >> 6) & 0x3f);
	          blocks[i++] = 0x80 | (code & 0x3f);
	        }
	      }
	      start = i - 5;
	      if (index === length) {
	        ++index;
	      }
	      if (index > length && i < 6) {
	        end = true;
	      }
	      v1 = blocks[0];
	      if (i > 4) {
	        v2 = blocks[1];
	        v3 = blocks[2];
	        v4 = blocks[3];
	        v5 = blocks[4];
	        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +
	          BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +
	          BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +
	          BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +
	          BASE32_ENCODE_CHAR[v5 & 31];
	      } else if (i === 1) {
	        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	          BASE32_ENCODE_CHAR[(v1 << 2) & 31] +
	          '======';
	      } else if (i === 2) {
	        v2 = blocks[1];
	        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	          BASE32_ENCODE_CHAR[(v2 << 4) & 31] +
	          '====';
	      } else if (i === 3) {
	        v2 = blocks[1];
	        v3 = blocks[2];
	        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +
	          BASE32_ENCODE_CHAR[(v3 << 1) & 31] +
	          '===';
	      } else {
	        v2 = blocks[1];
	        v3 = blocks[2];
	        v4 = blocks[3];
	        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +
	          BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +
	          BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +
	          BASE32_ENCODE_CHAR[(v4 << 3) & 31] +
	          '=';
	      }
	    } while (!end);
	    return base32Str;
	  };

	  var encodeBytes = function (bytes) {
	    var v1, v2, v3, v4, v5, base32Str = '', length = bytes.length;
	    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {
	      v1 = bytes[i++];
	      v2 = bytes[i++];
	      v3 = bytes[i++];
	      v4 = bytes[i++];
	      v5 = bytes[i++];
	      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +
	        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +
	        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +
	        BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +
	        BASE32_ENCODE_CHAR[v5 & 31];
	    }

	    // remain char
	    var remain = length - count;
	    if (remain === 1) {
	      v1 = bytes[i];
	      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	        BASE32_ENCODE_CHAR[(v1 << 2) & 31] +
	        '======';
	    } else if (remain === 2) {
	      v1 = bytes[i++];
	      v2 = bytes[i];
	      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	        BASE32_ENCODE_CHAR[(v2 << 4) & 31] +
	        '====';
	    } else if (remain === 3) {
	      v1 = bytes[i++];
	      v2 = bytes[i++];
	      v3 = bytes[i];
	      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +
	        BASE32_ENCODE_CHAR[(v3 << 1) & 31] +
	        '===';
	    } else if (remain === 4) {
	      v1 = bytes[i++];
	      v2 = bytes[i++];
	      v3 = bytes[i++];
	      v4 = bytes[i];
	      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +
	        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +
	        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +
	        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +
	        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +
	        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +
	        BASE32_ENCODE_CHAR[(v4 << 3) & 31] +
	        '=';
	    }
	    return base32Str;
	  };

	  var encode = function (input, asciiOnly) {
	    var notString = typeof(input) !== 'string';
	    if (notString && input.constructor === ArrayBuffer) {
	      input = new Uint8Array(input);
	    }
	    if (notString) {
	      return encodeBytes(input);
	    } else if (asciiOnly) {
	      return encodeAscii(input);
	    } else {
	      return encodeUtf8(input);
	    }
	  };

	  var decode = function (base32Str, asciiOnly) {
	    if (!asciiOnly) {
	      return toUtf8String(decodeAsBytes(base32Str));
	    }
	    if (base32Str === '') {
	      return '';
	    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {
	      throw new Error('Invalid base32 characters');
	    }
	    var v1, v2, v3, v4, v5, v6, v7, v8, str = '', length = base32Str.indexOf('=');
	    if (length === -1) {
	      length = base32Str.length;
	    }

	    // 8 char to 5 bytes
	    for (var i = 0, count = length >> 3 << 3; i < count;) {
	      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +
	        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +
	        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) +
	        String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255) +
	        String.fromCharCode((v7 << 5 | v8) & 255);
	    }

	    // remain bytes
	    var remain = length - count;
	    if (remain === 2) {
	      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255);
	    } else if (remain === 4) {
	      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +
	        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255);
	    } else if (remain === 5) {
	      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +
	        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +
	        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255);
	    } else if (remain === 7) {
	      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
	      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +
	        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +
	        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) +
	        String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255);
	    }
	    return str;
	  };

	  var exports = {
	    encode: encode,
	    decode: decode
	  };
	  decode.asBytes = decodeAsBytes;

	  if (COMMON_JS) {
	    module.exports = exports;
	  } else {
	    root.base32 = exports;
	  }
	})(); 
} (base32$1));

var base32Exports = base32$1.exports;
var base32 = /*@__PURE__*/getDefaultExportFromCjs(base32Exports);

// NOTE: at the moment we specifically do not use Buffer.writeBigUInt64BE and
// Buffer.readBigUInt64BE. This is because projects using webpack v4
// automatically include an old version of the npm `buffer` package (v4.9.2 at
// the time of writing), and this old version does not have these methods.
/**
 * encodeUint64 converts an integer to its binary representation.
 * @param num - The number to convert. This must be an unsigned integer less than
 *   2^64.
 * @returns An 8-byte typed array containing the big-endian encoding of the input
 *   integer.
 */
function encodeUint64(num) {
    const isInteger = typeof num === 'bigint' || Number.isInteger(num);
    if (!isInteger || num < 0 || num > BigInt('0xffffffffffffffff')) {
        throw new Error('Input is not a 64-bit unsigned integer');
    }
    const encoding = new Uint8Array(8);
    const view = new DataView(encoding.buffer);
    view.setBigUint64(0, BigInt(num));
    return encoding;
}
function decodeUint64(data, decodingMode = 'safe') {
    if (decodingMode !== 'safe' &&
        decodingMode !== 'mixed' &&
        decodingMode !== 'bigint') {
        throw new Error(`Unknown decodingMode option: ${decodingMode}`);
    }
    if (data.byteLength === 0 || data.byteLength > 8) {
        throw new Error(`Data has unacceptable length. Expected length is between 1 and 8, got ${data.byteLength}`);
    }
    // insert 0s at the beginning if data is smaller than 8 bytes
    const padding = new Uint8Array(8 - data.byteLength);
    const encoding = concatArrays(padding, data);
    const view = new DataView(encoding.buffer);
    const num = view.getBigUint64(0);
    const isBig = num > BigInt(Number.MAX_SAFE_INTEGER);
    if (decodingMode === 'safe') {
        if (isBig) {
            throw new Error(`Integer exceeds maximum safe integer: ${num.toString()}. Try decoding with "mixed" or "safe" decodingMode.`);
        }
        return Number(num);
    }
    if (decodingMode === 'mixed' && !isBig) {
        return Number(num);
    }
    return num;
}

/**
 * Convert a base64 string to a Uint8Array for Node.js and browser environments.
 * @returns A Uint8Array
 */
function base64ToBytes(base64String) {
    if (isNode()) {
        return new Uint8Array(Buffer.from(base64String, 'base64'));
    }
    /* eslint-env browser */
    const binString = atob(base64String);
    return Uint8Array.from(binString, (m) => m.codePointAt(0));
}
/**
 * Convert a Uint8Array to a base64 string for Node.js and browser environments.
 * @returns A base64 string
 */
function bytesToBase64(byteArray) {
    if (isNode()) {
        return Buffer.from(byteArray).toString('base64');
    }
    /* eslint-env browser */
    const binString = Array.from(byteArray, (x) => String.fromCodePoint(x)).join('');
    return btoa(binString);
}
/**
 * Convert a byte array to a UTF-8 string. Warning: not all byte arrays are valid UTF-8.
 * @returns A decoded string
 */
function bytesToString(byteArray) {
    return new TextDecoder().decode(byteArray);
}
/**
 * Returns a Uint8Array given an input string or Uint8Array.
 * @returns A base64 string
 */
function coerceToBytes(input) {
    if (typeof input === 'string') {
        return new TextEncoder().encode(input);
    }
    return input;
}
/**
 * Convert a Uint8Array to a hex string for Node.js and browser environments.
 * @returns A hex string
 */
function bytesToHex(byteArray) {
    if (isNode()) {
        return Buffer.from(byteArray).toString('hex');
    }
    return Array.from(byteArray)
        .map((i) => i.toString(16).padStart(2, '0'))
        .join('');
}
/**
 * Convert a hex string to Uint8Array for Node.js and browser environments.
 * @returns A Uint8Array
 */
function hexToBytes(hexString) {
    if (isNode()) {
        return Buffer.from(hexString, 'hex');
    }
    let hex = hexString;
    if (hexString.length % 2 !== 0) {
        hex = hexString.padStart(1, '0');
    }
    const byteArray = new Uint8Array(hex.length / 2);
    for (let i = 0; i < hex.length / 2; i++) {
        byteArray[i] = parseInt(hex.slice(2 * i, 2 * i + 2), 16);
    }
    return byteArray;
}

const ALGORAND_ADDRESS_BYTE_LENGTH = 36;
const ALGORAND_CHECKSUM_BYTE_LENGTH = 4;
const ALGORAND_ADDRESS_LENGTH = 58;
const ALGORAND_ZERO_ADDRESS_STRING = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ';
const MALFORMED_ADDRESS_ERROR_MSG = 'address seems to be malformed';
const CHECKSUM_ADDRESS_ERROR_MSG = 'wrong checksum for address';
function checksumFromPublicKey(pk) {
    return Uint8Array.from(genericHash(pk)
        .slice(HASH_BYTES_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH, HASH_BYTES_LENGTH));
}
/**
 * Represents an Algorand address
 */
class Address {
    /**
     * Create a new Address object from its binary form.
     * @param publicKey - The binary form of the address. Must be 32 bytes.
     */
    constructor(publicKey) {
        if (!(publicKey instanceof Uint8Array)) {
            throw new Error(`${MALFORMED_ADDRESS_ERROR_MSG}: ${publicKey} is not Uint8Array, type ${typeof publicKey}`);
        }
        if (publicKey.length !==
            ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH)
            throw new Error(`${MALFORMED_ADDRESS_ERROR_MSG}: 0x${bytesToHex(publicKey)}, length ${publicKey.length}`);
        this.publicKey = publicKey;
    }
    /**
     * Check if the address is equal to another address.
     */
    equals(other) {
        return (other instanceof Address &&
            arrayEqual(this.publicKey, other.publicKey));
    }
    /**
     * Compute the 4 byte checksum of the address.
     */
    checksum() {
        return checksumFromPublicKey(this.publicKey);
    }
    /**
     * Encode the address into a string form.
     */
    toString() {
        const addr = base32.encode(concatArrays(this.publicKey, this.checksum()));
        return addr.slice(0, ALGORAND_ADDRESS_LENGTH); // removing the extra '===='
    }
    /**
     * Decode an address from a string.
     * @param address - The address to decode. Must be 58 bytes long.
     * @returns An Address object corresponding to the input string.
     */
    static fromString(address) {
        if (typeof address !== 'string')
            throw new Error(`${MALFORMED_ADDRESS_ERROR_MSG}: expected string, got ${typeof address}, ${address}`);
        if (address.length !== ALGORAND_ADDRESS_LENGTH)
            throw new Error(`${MALFORMED_ADDRESS_ERROR_MSG}: expected length ${ALGORAND_ADDRESS_LENGTH}, got ${address.length}: ${address}`);
        // try to decode
        const decoded = base32.decode.asBytes(address);
        // Sanity check
        if (decoded.length !== ALGORAND_ADDRESS_BYTE_LENGTH)
            throw new Error(`${MALFORMED_ADDRESS_ERROR_MSG}: expected byte length ${ALGORAND_ADDRESS_BYTE_LENGTH}, got ${decoded.length}`);
        // Find publickey and checksum
        const pk = new Uint8Array(decoded.slice(0, ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH));
        const cs = new Uint8Array(decoded.slice(PUBLIC_KEY_LENGTH, ALGORAND_ADDRESS_BYTE_LENGTH));
        const checksum = checksumFromPublicKey(pk);
        // Check if the checksum and the address are equal
        if (!arrayEqual(checksum, cs))
            throw new Error(CHECKSUM_ADDRESS_ERROR_MSG);
        return new Address(pk);
    }
    /**
     * Get the zero address.
     */
    static zeroAddress() {
        return new Address(new Uint8Array(ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH));
    }
}
/**
 * decodeAddress takes an Algorand address in string form and decodes it into a Uint8Array.
 * @param address - an Algorand address with checksum.
 * @returns the decoded form of the address's public key and checksum
 */
function decodeAddress(address) {
    return Address.fromString(address);
}
/**
 * isValidAddress checks if a string is a valid Algorand address.
 * @param address - an Algorand address with checksum.
 * @returns true if valid, false otherwise
 */
function isValidAddress(address) {
    // Try to decode
    try {
        Address.fromString(address);
    }
    catch (e) {
        return false;
    }
    return true;
}
/**
 * encodeAddress takes an Algorand address as a Uint8Array and encodes it into a string with checksum.
 * @param address - a raw Algorand address
 * @returns the address and checksum encoded as a string.
 */
function encodeAddress(address) {
    return new Address(address).toString();
}
const APP_ID_PREFIX = new TextEncoder().encode('appID');
/**
 * Get the escrow address of an application.
 * @param appID - The ID of the application.
 * @returns The address corresponding to that application's escrow account.
 */
function getApplicationAddress(appID) {
    const toBeSigned = concatArrays(APP_ID_PREFIX, encodeUint64(appID));
    const hash = genericHash(toBeSigned);
    return new Address(Uint8Array.from(hash));
}

const MICROALGOS_TO_ALGOS_RATIO = 1e6;
const INVALID_MICROALGOS_ERROR_MSG = 'Microalgos should be positive and less than 2^53 - 1.';
/**
 * microalgosToAlgos converts microalgos to algos
 * @param microalgos - number
 * @returns number
 */
function microalgosToAlgos(microalgos) {
    if (microalgos < 0 || !Number.isSafeInteger(microalgos)) {
        throw new Error(INVALID_MICROALGOS_ERROR_MSG);
    }
    return microalgos / MICROALGOS_TO_ALGOS_RATIO;
}
/**
 * algosToMicroalgos converts algos to microalgos
 * @param algos - number
 * @returns number
 */
function algosToMicroalgos(algos) {
    const microalgos = algos * MICROALGOS_TO_ALGOS_RATIO;
    return Math.round(microalgos);
}

class URLTokenBaseHTTPError extends Error {
    constructor(message, response) {
        super(message);
        this.response = response;
        this.name = 'URLTokenBaseHTTPError';
        this.response = response;
    }
}
/**
 * Implementation of BaseHTTPClient that uses a URL and a token
 * and make the REST queries using fetch.
 * This is the default implementation of BaseHTTPClient.
 *
 * Additional fetch options can be configured by using the `customOptions` parameter on
 * get/post/delete requests.
 */
class URLTokenBaseHTTPClient {
    constructor(tokenHeader, baseServer, port, defaultHeaders = {}) {
        this.defaultHeaders = defaultHeaders;
        // Append a trailing slash so we can use relative paths. Without the trailing
        // slash, the last path segment will be replaced by the relative path. See
        // usage in `addressWithPath`.
        const fixedBaseServer = baseServer.endsWith('/')
            ? baseServer
            : `${baseServer}/`;
        const baseServerURL = new URL(fixedBaseServer);
        if (typeof port !== 'undefined') {
            baseServerURL.port = port.toString();
        }
        if (baseServerURL.protocol.length === 0) {
            throw new Error('Invalid base server URL, protocol must be defined.');
        }
        this.baseURL = baseServerURL;
        this.tokenHeader = tokenHeader;
    }
    /**
     * Compute the URL for a path relative to the instance's address
     * @param relativePath - A path string
     * @param query - An optional key-value object of query parameters to add to the URL. If the
     *   relativePath already has query parameters on it, the additional parameters defined here will
     *   be added to the URL without modifying those (unless a key collision occurs).
     * @returns A URL string
     */
    getURL(relativePath, query) {
        let fixedRelativePath;
        if (relativePath.startsWith('./')) {
            fixedRelativePath = relativePath;
        }
        else if (relativePath.startsWith('/')) {
            fixedRelativePath = `.${relativePath}`;
        }
        else {
            fixedRelativePath = `./${relativePath}`;
        }
        const address = new URL(fixedRelativePath, this.baseURL);
        if (query) {
            for (const [key, value] of Object.entries(query)) {
                address.searchParams.set(key, value.toString());
            }
        }
        return address.toString();
    }
    static formatFetchResponseHeaders(headers) {
        const headersObj = {};
        headers.forEach((key, value) => {
            headersObj[key] = value;
        });
        return headersObj;
    }
    static async checkHttpError(res) {
        if (res.ok) {
            return;
        }
        let body;
        let bodyErrorMessage;
        try {
            body = new Uint8Array(await res.arrayBuffer());
            const decoded = JSON.parse(new TextDecoder().decode(body));
            if (decoded.message) {
                bodyErrorMessage = decoded.message;
            }
        }
        catch (_) {
            // ignore any error that happened while we are parsing the error response
        }
        let message = `Network request error. Received status ${res.status} (${res.statusText})`;
        if (bodyErrorMessage) {
            message += `: ${bodyErrorMessage}`;
        }
        throw new URLTokenBaseHTTPError(message, {
            body: body ?? new Uint8Array(),
            status: res.status,
            headers: URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers),
        });
    }
    static async formatFetchResponse(res) {
        await this.checkHttpError(res);
        return {
            body: new Uint8Array(await res.arrayBuffer()),
            status: res.status,
            headers: URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers),
        };
    }
    async get(relativePath, query, requestHeaders, customOptions) {
        // Expand headers for use in fetch
        const headers = {
            ...this.tokenHeader,
            ...this.defaultHeaders,
            ...(requestHeaders ?? {}),
        };
        const res = await fetch(this.getURL(relativePath, query), {
            headers,
            ...(customOptions ?? {}),
        });
        return URLTokenBaseHTTPClient.formatFetchResponse(res);
    }
    async post(relativePath, data, query, requestHeaders, customOptions) {
        // Expand headers for use in fetch
        const headers = {
            ...this.tokenHeader,
            ...this.defaultHeaders,
            ...(requestHeaders ?? {}),
        };
        const res = await fetch(this.getURL(relativePath, query), {
            method: 'POST',
            body: data,
            headers,
            ...(customOptions ?? {}),
        });
        return URLTokenBaseHTTPClient.formatFetchResponse(res);
    }
    async delete(relativePath, data, query, requestHeaders, customOptions) {
        // Expand headers for use in fetch
        const headers = {
            ...this.tokenHeader,
            ...this.defaultHeaders,
            ...(requestHeaders ?? {}),
        };
        const res = await fetch(this.getURL(relativePath, query), {
            method: 'DELETE',
            body: data,
            headers,
            ...(customOptions ?? {}),
        });
        return URLTokenBaseHTTPClient.formatFetchResponse(res);
    }
}

class HTTPClientResponse {
    constructor(options) {
        this.body = options.body;
        this.text = options.text;
        this.format = options.format;
        this.headers = options.headers;
        this.status = options.status;
        this.ok = options.ok;
    }
    /**
     * Returns the response body as a string, ready to be parsed as JSON.
     */
    getJSONText() {
        if (this.text === undefined) {
            throw new Error(`Response body does not contain JSON data. Format is ${this.format}`);
        }
        return this.text;
    }
    /**
     * Parses the response body as JSON with the given options.
     */
    parseBodyAsJSON(jsonOptions) {
        if (this.text === undefined) {
            throw new Error(`Response body does not contain JSON data. Format is ${this.format}`);
        }
        // eslint-disable-next-line no-use-before-define
        return HTTPClient.parseJSON(this.text, this.status, jsonOptions);
    }
}
/**
 * Remove falsy values or values with a length of 0 from an object.
 */
function removeFalsyOrEmpty(obj) {
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            // eslint-disable-next-line no-param-reassign
            if (!obj[key] || obj[key].length === 0)
                delete obj[key];
        }
    }
    return obj;
}
/**
 * Create a new object with lower-case keys
 * See https://codereview.stackexchange.com/a/162418
 * Used to ensure all headers are lower-case and to work more easily with them
 */
function tolowerCaseKeys(o) {
    /* eslint-disable no-param-reassign,no-return-assign,no-sequences */
    return Object.keys(o).reduce((c, k) => ((c[k.toLowerCase()] = o[k]), c), {});
    /* eslint-enable no-param-reassign,no-return-assign,no-sequences */
}
/**
 * getAcceptFormat returns the correct Accept header depending on the
 * requested format.
 */
function getAcceptFormat(query) {
    if (query !== undefined &&
        Object.prototype.hasOwnProperty.call(query, 'format')) {
        switch (query.format) {
            case 'msgpack':
                return 'application/msgpack';
            case 'json':
            default:
                return 'application/json';
        }
    }
    else
        return 'application/json';
}
/**
 * HTTPClient is a wrapper around a BaseHTTPClient
 * It takes care of setting the proper "Accept" header and of
 * decoding the JSON outputs.
 */
class HTTPClient {
    constructor(bcOrTokenHeader, baseServer, port, defaultHeaders = {}) {
        if (baseServer !== undefined) {
            this.bc = new URLTokenBaseHTTPClient(bcOrTokenHeader, baseServer, port, defaultHeaders);
        }
        else {
            this.bc = bcOrTokenHeader;
        }
    }
    /**
     * Parse JSON using utils.parseJSON
     *
     * @param text - JSON data
     * @param status - Status of the response (used in case parseJSON fails)
     * @param jsonOptions - Options object to use to decode JSON responses. See
     *   utils.parseJSON for the options available.
     */
    static parseJSON(text, status, jsonOptions) {
        try {
            if (!text) {
                return null;
            }
            return parseJSON(text, jsonOptions);
        }
        catch (err_) {
            const err = err_;
            // return the raw response if the response parsing fails
            err.rawResponse = text || null;
            // return the http status code if the response parsing fails
            err.statusCode = status;
            throw err;
        }
    }
    /**
     * Serialize the data according to the requestHeaders
     * Assumes that requestHeaders contain a key "content-type"
     * If the content-type is "application/json", data is JSON serialized
     * Otherwise, data needs to be either an UTF-8 string that is converted to an Uint8Array
     * or an Uint8Array
     * @private
     */
    static serializeData(data, requestHeaders) {
        if (!data) {
            return new Uint8Array(0); // empty Uint8Array
        }
        if (requestHeaders['content-type'] === 'application/json') {
            return new TextEncoder().encode(stringifyJSON(data));
        }
        if (typeof data === 'string') {
            return new TextEncoder().encode(data);
        }
        if (data instanceof Uint8Array) {
            return data;
        }
        throw new Error('provided data is neither a string nor a Uint8Array and content-type is not application/json');
    }
    /**
     * Convert a BaseHTTPClientResponse into a full HTTPClientResponse
     * Parse the body in
     * Modifies in place res and return the result
     */
    static prepareResponse(res, format) {
        const { body } = res;
        let text;
        if (format !== 'application/msgpack') {
            text = (body && new TextDecoder().decode(body)) || '';
        }
        return new HTTPClientResponse({
            ...res,
            format,
            text,
            ok: Math.trunc(res.status / 100) === 2,
        });
    }
    /**
     * Prepare an error with a response
     * (the type of errors BaseHTTPClient are supposed to throw)
     * by adding the status and preparing the internal response
     * @private
     */
    static prepareResponseError(err) {
        if (err.response) {
            // eslint-disable-next-line no-param-reassign
            err.response = HTTPClient.prepareResponse(err.response, 'application/json');
            // eslint-disable-next-line no-param-reassign
            err.status = err.response.status;
        }
        return err;
    }
    /**
     * Send a GET request.
     *
     * @param options - The options to use for the request.
     * @param options.relativePath - The path of the request.
     * @param options.query - An object containing the query parameters of the request.
     * @param options.requestHeaders - An object containing additional request headers to use.
     *   or not.
     * @param options.customOptions - An object containing additional options to pass to the
     *   underlying BaseHTTPClient instance.
     * @returns Response object.
     */
    async get({ relativePath, query, requestHeaders, customOptions, }) {
        const format = getAcceptFormat(query);
        const fullHeaders = { ...(requestHeaders ?? {}), accept: format };
        try {
            const res = await this.bc.get(relativePath, query ? removeFalsyOrEmpty(query) : undefined, fullHeaders, customOptions);
            return HTTPClient.prepareResponse(res, format);
        }
        catch (err) {
            throw HTTPClient.prepareResponseError(err);
        }
    }
    /**
     * Send a POST request.
     * If no content-type present, adds the header "content-type: application/json"
     * and data is serialized in JSON (if not empty)
     * @param options - The options to use for the request.
     */
    async post({ relativePath, data, query, requestHeaders, customOptions, }) {
        const fullHeaders = {
            'content-type': 'application/json',
            ...tolowerCaseKeys(requestHeaders ?? {}),
        };
        try {
            const res = await this.bc.post(relativePath, HTTPClient.serializeData(data, fullHeaders), query, fullHeaders, customOptions);
            return HTTPClient.prepareResponse(res, 'application/json');
        }
        catch (err) {
            throw HTTPClient.prepareResponseError(err);
        }
    }
    /**
     * Send a DELETE request.
     * If no content-type present, adds the header "content-type: application/json"
     * and data is serialized in JSON (if not empty)
     * @param options - The options to use for the request.
     */
    async delete({ relativePath, data, requestHeaders, customOptions, }) {
        const fullHeaders = {
            'content-type': 'application/json',
            ...tolowerCaseKeys(requestHeaders ?? {}),
        };
        try {
            const res = await this.bc.delete(relativePath, typeof data !== 'undefined'
                ? HTTPClient.serializeData(data, fullHeaders)
                : undefined, undefined, fullHeaders, customOptions);
            return HTTPClient.prepareResponse(res, 'application/json');
        }
        catch (err) {
            throw HTTPClient.prepareResponseError(err);
        }
    }
}

/**
 * Convert a token string to a token header
 * @param token - The token string
 * @param headerIdentifier - An identifier for the token header
 */
function convertTokenStringToTokenHeader(headerIdentifier, token = '') {
    const tokenHeader = {};
    if (token === '') {
        return tokenHeader;
    }
    tokenHeader[headerIdentifier] = token;
    return tokenHeader;
}
function isBaseHTTPClient(tbc) {
    return typeof tbc.get === 'function';
}
/**
 * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic
 */
class ServiceClient {
    constructor(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient, baseServer, port, defaultHeaders = {}) {
        if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {
            // we are using a base client
            this.c = new HTTPClient(tokenHeaderOrStrOrBaseClient);
        }
        else {
            // Accept token header as string or object
            // - workaround to allow backwards compatibility for multiple headers
            let tokenHeader;
            if (typeof tokenHeaderOrStrOrBaseClient === 'string') {
                tokenHeader = convertTokenStringToTokenHeader(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient);
            }
            else {
                tokenHeader = tokenHeaderOrStrOrBaseClient;
            }
            this.c = new HTTPClient(tokenHeader, baseServer, port, defaultHeaders);
        }
    }
}

function utf8Count(str) {
    var strLength = str.length;
    var byteLength = 0;
    var pos = 0;
    while (pos < strLength) {
        var value = str.charCodeAt(pos++);
        if ((value & 0xffffff80) === 0) {
            // 1-byte
            byteLength++;
            continue;
        }
        else if ((value & 0xfffff800) === 0) {
            // 2-bytes
            byteLength += 2;
        }
        else {
            // handle surrogate pair
            if (value >= 0xd800 && value <= 0xdbff) {
                // high surrogate
                if (pos < strLength) {
                    var extra = str.charCodeAt(pos);
                    if ((extra & 0xfc00) === 0xdc00) {
                        ++pos;
                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;
                    }
                }
            }
            if ((value & 0xffff0000) === 0) {
                // 3-byte
                byteLength += 3;
            }
            else {
                // 4-byte
                byteLength += 4;
            }
        }
    }
    return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
    var strLength = str.length;
    var offset = outputOffset;
    var pos = 0;
    while (pos < strLength) {
        var value = str.charCodeAt(pos++);
        if ((value & 0xffffff80) === 0) {
            // 1-byte
            output[offset++] = value;
            continue;
        }
        else if ((value & 0xfffff800) === 0) {
            // 2-bytes
            output[offset++] = ((value >> 6) & 0x1f) | 0xc0;
        }
        else {
            // handle surrogate pair
            if (value >= 0xd800 && value <= 0xdbff) {
                // high surrogate
                if (pos < strLength) {
                    var extra = str.charCodeAt(pos);
                    if ((extra & 0xfc00) === 0xdc00) {
                        ++pos;
                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;
                    }
                }
            }
            if ((value & 0xffff0000) === 0) {
                // 3-byte
                output[offset++] = ((value >> 12) & 0x0f) | 0xe0;
                output[offset++] = ((value >> 6) & 0x3f) | 0x80;
            }
            else {
                // 4-byte
                output[offset++] = ((value >> 18) & 0x07) | 0xf0;
                output[offset++] = ((value >> 12) & 0x3f) | 0x80;
                output[offset++] = ((value >> 6) & 0x3f) | 0x80;
            }
        }
        output[offset++] = (value & 0x3f) | 0x80;
    }
}
// TextEncoder and TextDecoder are standardized in whatwg encoding:
// https://encoding.spec.whatwg.org/
// and available in all the modern browsers:
// https://caniuse.com/textencoder
// They are available in Node.js since v12 LTS as well:
// https://nodejs.org/api/globals.html#textencoder
var sharedTextEncoder = new TextEncoder();
// This threshold should be determined by benchmarking, which might vary in engines and input data.
// Run `npx ts-node benchmark/encode-string.ts` for details.
var TEXT_ENCODER_THRESHOLD = 50;
function utf8EncodeTE(str, output, outputOffset) {
    sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
function utf8Encode(str, output, outputOffset) {
    if (str.length > TEXT_ENCODER_THRESHOLD) {
        utf8EncodeTE(str, output, outputOffset);
    }
    else {
        utf8EncodeJs(str, output, outputOffset);
    }
}
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
    var offset = inputOffset;
    var end = offset + byteLength;
    var units = [];
    var result = "";
    while (offset < end) {
        var byte1 = bytes[offset++];
        if ((byte1 & 0x80) === 0) {
            // 1 byte
            units.push(byte1);
        }
        else if ((byte1 & 0xe0) === 0xc0) {
            // 2 bytes
            var byte2 = bytes[offset++] & 0x3f;
            units.push(((byte1 & 0x1f) << 6) | byte2);
        }
        else if ((byte1 & 0xf0) === 0xe0) {
            // 3 bytes
            var byte2 = bytes[offset++] & 0x3f;
            var byte3 = bytes[offset++] & 0x3f;
            units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);
        }
        else if ((byte1 & 0xf8) === 0xf0) {
            // 4 bytes
            var byte2 = bytes[offset++] & 0x3f;
            var byte3 = bytes[offset++] & 0x3f;
            var byte4 = bytes[offset++] & 0x3f;
            var unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;
            if (unit > 0xffff) {
                unit -= 0x10000;
                units.push(((unit >>> 10) & 0x3ff) | 0xd800);
                unit = 0xdc00 | (unit & 0x3ff);
            }
            units.push(unit);
        }
        else {
            units.push(byte1);
        }
        if (units.length >= CHUNK_SIZE) {
            result += String.fromCharCode.apply(String, units);
            units.length = 0;
        }
    }
    if (units.length > 0) {
        result += String.fromCharCode.apply(String, units);
    }
    return result;
}
var sharedTextDecoder = new TextDecoder();
// This threshold should be determined by benchmarking, which might vary in engines and input data.
// Run `npx ts-node benchmark/decode-string.ts` for details.
var TEXT_DECODER_THRESHOLD = 200;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
    var stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
    return sharedTextDecoder.decode(stringBytes);
}
function utf8Decode(bytes, inputOffset, byteLength) {
    if (byteLength > TEXT_DECODER_THRESHOLD) {
        return utf8DecodeTD(bytes, inputOffset, byteLength);
    }
    else {
        return utf8DecodeJs(bytes, inputOffset, byteLength);
    }
}

/**
 * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.
 */
var ExtData = /** @class */ (function () {
    function ExtData(type, data) {
        this.type = type;
        this.data = data;
    }
    return ExtData;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var DecodeError = /** @class */ (function (_super) {
    __extends(DecodeError, _super);
    function DecodeError(message) {
        var _this = _super.call(this, message) || this;
        // fix the prototype chain in a cross-platform way
        var proto = Object.create(DecodeError.prototype);
        Object.setPrototypeOf(_this, proto);
        Object.defineProperty(_this, "name", {
            configurable: true,
            enumerable: false,
            value: DecodeError.name,
        });
        return _this;
    }
    return DecodeError;
}(Error));

// Integer Utility
/**
 * An enum of different options for decoding integers.
 */
var IntMode;
(function (IntMode) {
    /**
     * Always returns the value as a number. Be aware that there will be a loss of precision if the
     * value is outside the range of Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER.
     */
    IntMode[IntMode["UNSAFE_NUMBER"] = 0] = "UNSAFE_NUMBER";
    /**
     * Always returns the value as a number, but throws an error if the value is outside of the range
     * of Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER.
     */
    IntMode[IntMode["SAFE_NUMBER"] = 1] = "SAFE_NUMBER";
    /**
     * Returns all values encoded as int64/uint64 as bigints and all other integers as numbers.
     */
    IntMode[IntMode["AS_ENCODED"] = 2] = "AS_ENCODED";
    /**
     * Returns all values inside the range of Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER as
     * numbers and all values outside that range as bigints.
     */
    IntMode[IntMode["MIXED"] = 3] = "MIXED";
    /**
     * Always returns the value as a bigint, even if it is small enough to safely fit in a number.
     */
    IntMode[IntMode["BIGINT"] = 4] = "BIGINT";
})(IntMode || (IntMode = {}));
var UINT32_MAX = 4294967295;
// DataView extension to handle int64 / uint64,
// where the actual range is 53-bits integer (a.k.a. safe integer)
function setUint64(view, offset, value) {
    var high = value / 4294967296;
    var low = value; // high bits are truncated by DataView
    view.setUint32(offset, high);
    view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
    var high = Math.floor(value / 4294967296);
    var low = value; // high bits are truncated by DataView
    view.setUint32(offset, high);
    view.setUint32(offset + 4, low);
}
function getInt64(view, offset, mode) {
    if (mode === IntMode.UNSAFE_NUMBER || mode === IntMode.SAFE_NUMBER) {
        // for compatibility, don't use view.getBigInt64 if the user hasn't told us to use BigInts
        var high = view.getInt32(offset);
        var low = view.getUint32(offset + 4);
        if (mode === IntMode.SAFE_NUMBER &&
            (high < Math.floor(Number.MIN_SAFE_INTEGER / 4294967296) ||
                (high === Math.floor(Number.MIN_SAFE_INTEGER / 4294967296) && low === 0) ||
                high > (Number.MAX_SAFE_INTEGER - low) / 4294967296)) {
            var hexValue = "".concat(high < 0 ? "-" : "", "0x").concat(Math.abs(high).toString(16)).concat(low.toString(16).padStart(8, "0"));
            throw new Error("Mode is IntMode.SAFE_NUMBER and value is not a safe integer: ".concat(hexValue));
        }
        return high * 4294967296 + low;
    }
    var value = view.getBigInt64(offset);
    if (mode === IntMode.MIXED && value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER) {
        return Number(value);
    }
    return value;
}
function getUint64(view, offset, mode) {
    if (mode === IntMode.UNSAFE_NUMBER || mode === IntMode.SAFE_NUMBER) {
        // for compatibility, don't use view.getBigUint64 if the user hasn't told us to use BigInts
        var high = view.getUint32(offset);
        var low = view.getUint32(offset + 4);
        if (mode === IntMode.SAFE_NUMBER && high > (Number.MAX_SAFE_INTEGER - low) / 4294967296) {
            var hexValue = "0x".concat(high.toString(16)).concat(low.toString(16).padStart(8, "0"));
            throw new Error("Mode is IntMode.SAFE_NUMBER and value is not a safe integer: ".concat(hexValue));
        }
        return high * 4294967296 + low;
    }
    var value = view.getBigUint64(offset);
    if (mode === IntMode.MIXED && value <= Number.MAX_SAFE_INTEGER) {
        return Number(value);
    }
    return value;
}
/**
 * Convert a safe integer Number (i.e. in the range Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER)
 * with respect to the given IntMode. For all modes except IntMode.BIGINT, this returns the original
 * Number unmodified.
 */
function convertSafeIntegerToMode(value, mode) {
    if (mode === IntMode.BIGINT) {
        return BigInt(value);
    }
    return Number(value);
}

// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type
var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int
var TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int
function encodeTimeSpecToTimestamp(_a) {
    var sec = _a.sec, nsec = _a.nsec;
    if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
        // Here sec >= 0 && nsec >= 0
        if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
            // timestamp 32 = { sec32 (unsigned) }
            var rv = new Uint8Array(4);
            var view = new DataView(rv.buffer);
            view.setUint32(0, sec);
            return rv;
        }
        else {
            // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }
            var secHigh = sec / 0x100000000;
            var secLow = sec & 0xffffffff;
            var rv = new Uint8Array(8);
            var view = new DataView(rv.buffer);
            // nsec30 | secHigh2
            view.setUint32(0, (nsec << 2) | (secHigh & 0x3));
            // secLow32
            view.setUint32(4, secLow);
            return rv;
        }
    }
    else {
        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }
        var rv = new Uint8Array(12);
        var view = new DataView(rv.buffer);
        view.setUint32(0, nsec);
        setInt64(view, 4, sec);
        return rv;
    }
}
function encodeDateToTimeSpec(date) {
    var msec = date.getTime();
    var sec = Math.floor(msec / 1e3);
    var nsec = (msec - sec * 1e3) * 1e6;
    // Normalizes { sec, nsec } to ensure nsec is unsigned.
    var nsecInSec = Math.floor(nsec / 1e9);
    return {
        sec: sec + nsecInSec,
        nsec: nsec - nsecInSec * 1e9,
    };
}
function encodeTimestampExtension(object) {
    if (object instanceof Date) {
        var timeSpec = encodeDateToTimeSpec(object);
        return encodeTimeSpecToTimestamp(timeSpec);
    }
    else {
        return null;
    }
}
function decodeTimestampToTimeSpec(data) {
    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
    // data may be 32, 64, or 96 bits
    switch (data.byteLength) {
        case 4: {
            // timestamp 32 = { sec32 }
            var sec = view.getUint32(0);
            var nsec = 0;
            return { sec: sec, nsec: nsec };
        }
        case 8: {
            // timestamp 64 = { nsec30, sec34 }
            var nsec30AndSecHigh2 = view.getUint32(0);
            var secLow32 = view.getUint32(4);
            var sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;
            var nsec = nsec30AndSecHigh2 >>> 2;
            return { sec: sec, nsec: nsec };
        }
        case 12: {
            // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }
            var sec = getInt64(view, 4, IntMode.UNSAFE_NUMBER);
            var nsec = view.getUint32(0);
            return { sec: sec, nsec: nsec };
        }
        default:
            throw new DecodeError("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(data.length));
    }
}
function decodeTimestampExtension(data) {
    var timeSpec = decodeTimestampToTimeSpec(data);
    return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
    type: EXT_TIMESTAMP,
    encode: encodeTimestampExtension,
    decode: decodeTimestampExtension,
};

// ExtensionCodec to handle MessagePack extensions
var ExtensionCodec = /** @class */ (function () {
    function ExtensionCodec() {
        // built-in extensions
        this.builtInEncoders = [];
        this.builtInDecoders = [];
        // custom extensions
        this.encoders = [];
        this.decoders = [];
        this.register(timestampExtension);
    }
    ExtensionCodec.prototype.register = function (_a) {
        var type = _a.type, encode = _a.encode, decode = _a.decode;
        if (type >= 0) {
            // custom extensions
            this.encoders[type] = encode;
            this.decoders[type] = decode;
        }
        else {
            // built-in extensions
            var index = 1 + type;
            this.builtInEncoders[index] = encode;
            this.builtInDecoders[index] = decode;
        }
    };
    ExtensionCodec.prototype.tryToEncode = function (object, context) {
        // built-in extensions
        for (var i = 0; i < this.builtInEncoders.length; i++) {
            var encodeExt = this.builtInEncoders[i];
            if (encodeExt != null) {
                var data = encodeExt(object, context);
                if (data != null) {
                    var type = -1 - i;
                    return new ExtData(type, data);
                }
            }
        }
        // custom extensions
        for (var i = 0; i < this.encoders.length; i++) {
            var encodeExt = this.encoders[i];
            if (encodeExt != null) {
                var data = encodeExt(object, context);
                if (data != null) {
                    var type = i;
                    return new ExtData(type, data);
                }
            }
        }
        if (object instanceof ExtData) {
            // to keep ExtData as is
            return object;
        }
        return null;
    };
    ExtensionCodec.prototype.decode = function (data, type, context) {
        var decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
        if (decodeExt) {
            return decodeExt(data, type, context);
        }
        else {
            // decode() does not fail, returns ExtData instead.
            return new ExtData(type, data);
        }
    };
    ExtensionCodec.defaultCodec = new ExtensionCodec();
    return ExtensionCodec;
}());

function ensureUint8Array$1(buffer) {
    if (buffer instanceof Uint8Array) {
        return buffer;
    }
    else if (ArrayBuffer.isView(buffer)) {
        return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    else if (buffer instanceof ArrayBuffer) {
        return new Uint8Array(buffer);
    }
    else {
        // ArrayLike<number>
        return Uint8Array.from(buffer);
    }
}
function createDataView(buffer) {
    if (buffer instanceof ArrayBuffer) {
        return new DataView(buffer);
    }
    var bufferView = ensureUint8Array$1(buffer);
    return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);
}
function compareUint8Arrays(a, b) {
    var length = Math.min(a.length, b.length);
    for (var i = 0; i < length; i++) {
        var diff = a[i] - b[i];
        if (diff !== 0) {
            return diff;
        }
    }
    return a.length - b.length;
}
/**
 * Represents a binary value that should be encoded as if it were a string.
 *
 * Effectively, this is a string that has already been UTF-8 encoded to a binary string. This is
 * useful if you need to encode a value as a string, but that value contains invalid UTF-8 sequences;
 * ideally this situation should be avoided and the value should be encoded as binary, not string,
 * but this may be necessary for compatibility with non-ideal systems.
 */
var RawBinaryString = /** @class */ (function () {
    /**
     * Create a new RawBinaryString from an ArrayBufferView.
     */
    function RawBinaryString(rawBinaryValue) {
        this.rawBinaryValue = rawBinaryValue;
        if (!ArrayBuffer.isView(rawBinaryValue)) {
            throw new TypeError("RawBinaryString: rawBinaryValue must be an ArrayBufferView");
        }
    }
    return RawBinaryString;
}());

var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = /** @class */ (function () {
    function Encoder(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        this.extensionCodec = (_a = options === null || options === void 0 ? void 0 : options.extensionCodec) !== null && _a !== void 0 ? _a : ExtensionCodec.defaultCodec;
        this.context = options === null || options === void 0 ? void 0 : options.context; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined
        this.forceBigIntToInt64 = (_b = options === null || options === void 0 ? void 0 : options.forceBigIntToInt64) !== null && _b !== void 0 ? _b : false;
        this.maxDepth = (_c = options === null || options === void 0 ? void 0 : options.maxDepth) !== null && _c !== void 0 ? _c : DEFAULT_MAX_DEPTH;
        this.initialBufferSize = (_d = options === null || options === void 0 ? void 0 : options.initialBufferSize) !== null && _d !== void 0 ? _d : DEFAULT_INITIAL_BUFFER_SIZE;
        this.sortKeys = (_e = options === null || options === void 0 ? void 0 : options.sortKeys) !== null && _e !== void 0 ? _e : false;
        this.forceFloat32 = (_f = options === null || options === void 0 ? void 0 : options.forceFloat32) !== null && _f !== void 0 ? _f : false;
        this.ignoreUndefined = (_g = options === null || options === void 0 ? void 0 : options.ignoreUndefined) !== null && _g !== void 0 ? _g : false;
        this.forceIntegerToFloat = (_h = options === null || options === void 0 ? void 0 : options.forceIntegerToFloat) !== null && _h !== void 0 ? _h : false;
        this.pos = 0;
        this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
        this.bytes = new Uint8Array(this.view.buffer);
    }
    Encoder.prototype.reinitializeState = function () {
        this.pos = 0;
    };
    /**
     * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.
     *
     * @returns Encodes the object and returns a shared reference the encoder's internal buffer.
     */
    Encoder.prototype.encodeSharedRef = function (object) {
        this.reinitializeState();
        this.doEncode(object, 1);
        return this.bytes.subarray(0, this.pos);
    };
    /**
     * @returns Encodes the object and returns a copy of the encoder's internal buffer.
     */
    Encoder.prototype.encode = function (object) {
        this.reinitializeState();
        this.doEncode(object, 1);
        return this.bytes.slice(0, this.pos);
    };
    Encoder.prototype.doEncode = function (object, depth) {
        if (depth > this.maxDepth) {
            throw new Error("Too deep objects in depth ".concat(depth));
        }
        if (object == null) {
            this.encodeNil();
        }
        else if (typeof object === "boolean") {
            this.encodeBoolean(object);
        }
        else if (typeof object === "number") {
            this.encodeNumber(object);
        }
        else if (typeof object === "string") {
            this.encodeString(object);
        }
        else {
            this.encodeObject(object, depth);
        }
    };
    Encoder.prototype.ensureBufferSizeToWrite = function (sizeToWrite) {
        var requiredSize = this.pos + sizeToWrite;
        if (this.view.byteLength < requiredSize) {
            this.resizeBuffer(requiredSize * 2);
        }
    };
    Encoder.prototype.resizeBuffer = function (newSize) {
        var newBuffer = new ArrayBuffer(newSize);
        var newBytes = new Uint8Array(newBuffer);
        var newView = new DataView(newBuffer);
        newBytes.set(this.bytes);
        this.view = newView;
        this.bytes = newBytes;
    };
    Encoder.prototype.encodeNil = function () {
        this.writeU8(0xc0);
    };
    Encoder.prototype.encodeBoolean = function (object) {
        if (object === false) {
            this.writeU8(0xc2);
        }
        else {
            this.writeU8(0xc3);
        }
    };
    Encoder.prototype.encodeNumber = function (object) {
        if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {
            if (object >= 0) {
                if (object < 0x80) {
                    // positive fixint
                    this.writeU8(object);
                }
                else if (object < 0x100) {
                    // uint 8
                    this.writeU8(0xcc);
                    this.writeU8(object);
                }
                else if (object < 0x10000) {
                    // uint 16
                    this.writeU8(0xcd);
                    this.writeU16(object);
                }
                else if (object < 0x100000000) {
                    // uint 32
                    this.writeU8(0xce);
                    this.writeU32(object);
                }
                else {
                    // uint 64
                    this.writeU8(0xcf);
                    this.writeU64(object);
                }
            }
            else {
                if (object >= -32) {
                    // negative fixint
                    this.writeU8(0xe0 | (object + 0x20));
                }
                else if (object >= -128) {
                    // int 8
                    this.writeU8(0xd0);
                    this.writeI8(object);
                }
                else if (object >= -32768) {
                    // int 16
                    this.writeU8(0xd1);
                    this.writeI16(object);
                }
                else if (object >= -2147483648) {
                    // int 32
                    this.writeU8(0xd2);
                    this.writeI32(object);
                }
                else {
                    // int 64
                    this.writeU8(0xd3);
                    this.writeI64(object);
                }
            }
        }
        else {
            this.encodeNumberAsFloat(object);
        }
    };
    Encoder.prototype.encodeNumberAsFloat = function (object) {
        if (this.forceFloat32) {
            // float 32
            this.writeU8(0xca);
            this.writeF32(object);
        }
        else {
            // float 64
            this.writeU8(0xcb);
            this.writeF64(object);
        }
    };
    Encoder.prototype.encodeBigInt = function (object) {
        if (this.forceBigIntToInt64) {
            this.encodeBigIntAsInt64(object);
        }
        else if (object >= 0) {
            if (object < 0x100000000 || this.forceIntegerToFloat) {
                // uint 32 or lower, or force to float
                this.encodeNumber(Number(object));
            }
            else if (object < BigInt("0x10000000000000000")) {
                // uint 64
                this.encodeBigIntAsInt64(object);
            }
            else {
                throw new Error("Bigint is too large for uint64: ".concat(object));
            }
        }
        else {
            if (object >= -2147483648 || this.forceIntegerToFloat) {
                // int 32 or lower, or force to float
                this.encodeNumber(Number(object));
            }
            else if (object >= BigInt(-1) * BigInt("0x8000000000000000")) {
                // int 64
                this.encodeBigIntAsInt64(object);
            }
            else {
                throw new Error("Bigint is too small for int64: ".concat(object));
            }
        }
    };
    Encoder.prototype.encodeBigIntAsInt64 = function (object) {
        if (object >= BigInt(0)) {
            // uint 64
            this.writeU8(0xcf);
            this.writeBigUint64(object);
        }
        else {
            // int 64
            this.writeU8(0xd3);
            this.writeBigInt64(object);
        }
    };
    Encoder.prototype.writeStringHeader = function (byteLength) {
        if (byteLength < 32) {
            // fixstr
            this.writeU8(0xa0 + byteLength);
        }
        else if (byteLength < 0x100) {
            // str 8
            this.writeU8(0xd9);
            this.writeU8(byteLength);
        }
        else if (byteLength < 0x10000) {
            // str 16
            this.writeU8(0xda);
            this.writeU16(byteLength);
        }
        else if (byteLength < 0x100000000) {
            // str 32
            this.writeU8(0xdb);
            this.writeU32(byteLength);
        }
        else {
            throw new Error("Too long string: ".concat(byteLength, " bytes in UTF-8"));
        }
    };
    Encoder.prototype.encodeString = function (object) {
        var maxHeaderSize = 1 + 4;
        var byteLength = utf8Count(object);
        this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
        this.writeStringHeader(byteLength);
        utf8Encode(object, this.bytes, this.pos);
        this.pos += byteLength;
    };
    Encoder.prototype.encodeObject = function (object, depth) {
        // try to encode objects with custom codec first of non-primitives
        var ext = this.extensionCodec.tryToEncode(object, this.context);
        if (ext != null) {
            this.encodeExtension(ext);
        }
        else if (Array.isArray(object)) {
            this.encodeArray(object, depth);
        }
        else if (ArrayBuffer.isView(object)) {
            this.encodeBinary(object);
        }
        else if (object instanceof RawBinaryString) {
            this.encodeBinaryAsString(object);
        }
        else if (typeof object === "bigint") {
            // this is here instead of in doEncode so that we can try encoding with an extension first,
            // otherwise we would break existing extensions for bigints
            this.encodeBigInt(object);
        }
        else if (object instanceof Map) {
            this.encodeMap(object, depth);
        }
        else if (typeof object === "object") {
            this.encodeMapObject(object, depth);
        }
        else {
            // symbol, function and other special object come here unless extensionCodec handles them.
            throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(object)));
        }
    };
    Encoder.prototype.encodeBinary = function (object) {
        var size = object.byteLength;
        if (size < 0x100) {
            // bin 8
            this.writeU8(0xc4);
            this.writeU8(size);
        }
        else if (size < 0x10000) {
            // bin 16
            this.writeU8(0xc5);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // bin 32
            this.writeU8(0xc6);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large binary: ".concat(size));
        }
        var bytes = ensureUint8Array$1(object);
        this.writeU8a(bytes);
    };
    Encoder.prototype.encodeBinaryAsString = function (binaryString) {
        var object = binaryString.rawBinaryValue;
        this.writeStringHeader(object.byteLength);
        var bytes = ensureUint8Array$1(object);
        this.writeU8a(bytes);
    };
    Encoder.prototype.encodeArray = function (object, depth) {
        var size = object.length;
        if (size < 16) {
            // fixarray
            this.writeU8(0x90 + size);
        }
        else if (size < 0x10000) {
            // array 16
            this.writeU8(0xdc);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // array 32
            this.writeU8(0xdd);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large array: ".concat(size));
        }
        for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {
            var item = object_1[_i];
            this.doEncode(item, depth + 1);
        }
    };
    Encoder.prototype.countWithoutUndefined = function (map, keys) {
        var count = 0;
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            if (map.get(key) !== undefined) {
                count++;
            }
        }
        return count;
    };
    Encoder.prototype.sortMapKeys = function (keys) {
        var numericKeys = [];
        var stringKeys = [];
        var rawStringKeys = [];
        var binaryKeys = [];
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
            var key = keys_2[_i];
            if (typeof key === "number") {
                if (isNaN(key)) {
                    throw new Error("Cannot sort map keys with NaN value");
                }
                numericKeys.push(key);
            }
            else if (typeof key === "bigint") {
                numericKeys.push(key);
            }
            else if (typeof key === "string") {
                stringKeys.push(key);
            }
            else if (ArrayBuffer.isView(key)) {
                binaryKeys.push(ensureUint8Array$1(key));
            }
            else if (key instanceof RawBinaryString) {
                rawStringKeys.push(key);
            }
            else {
                throw new Error("Unsupported map key type: ".concat(Object.prototype.toString.apply(key)));
            }
        }
        numericKeys.sort(function (a, b) { return (a < b ? -1 : a > b ? 1 : 0); }); // Avoid using === to compare numbers and bigints
        stringKeys.sort();
        rawStringKeys.sort(function (a, b) {
            return compareUint8Arrays(ensureUint8Array$1(a.rawBinaryValue), ensureUint8Array$1(b.rawBinaryValue));
        });
        binaryKeys.sort(compareUint8Arrays);
        // At the moment this arbitrarily orders the keys as numeric, string, raw string, binary
        return [].concat(numericKeys, stringKeys, rawStringKeys, binaryKeys);
    };
    Encoder.prototype.encodeMapObject = function (object, depth) {
        this.encodeMap(new Map(Object.entries(object)), depth);
    };
    Encoder.prototype.encodeMap = function (map, depth) {
        var keys = Array.from(map.keys());
        if (this.sortKeys) {
            keys = this.sortMapKeys(keys);
        }
        // Map keys may encode to the same underlying value. For example, the number 3 and the bigint 3.
        // This is also possible with ArrayBufferViews. We may want to introduce a new encoding option
        // which checks for duplicate keys in this sense and throws an error if they are found.
        var size = this.ignoreUndefined ? this.countWithoutUndefined(map, keys) : keys.length;
        if (size < 16) {
            // fixmap
            this.writeU8(0x80 + size);
        }
        else if (size < 0x10000) {
            // map 16
            this.writeU8(0xde);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // map 32
            this.writeU8(0xdf);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large map object: ".concat(size));
        }
        for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {
            var key = keys_3[_i];
            var value = map.get(key);
            if (!(this.ignoreUndefined && value === undefined)) {
                if (typeof key === "string") {
                    this.encodeString(key);
                }
                else if (typeof key === "number") {
                    this.encodeNumber(key);
                }
                else if (typeof key === "bigint") {
                    this.encodeBigInt(key);
                }
                else if (ArrayBuffer.isView(key)) {
                    this.encodeBinary(key);
                }
                else if (key instanceof RawBinaryString) {
                    this.encodeBinaryAsString(key);
                }
                else {
                    throw new Error("Unsupported map key type: ".concat(Object.prototype.toString.apply(key)));
                }
                this.doEncode(value, depth + 1);
            }
        }
    };
    Encoder.prototype.encodeExtension = function (ext) {
        var size = ext.data.length;
        if (size === 1) {
            // fixext 1
            this.writeU8(0xd4);
        }
        else if (size === 2) {
            // fixext 2
            this.writeU8(0xd5);
        }
        else if (size === 4) {
            // fixext 4
            this.writeU8(0xd6);
        }
        else if (size === 8) {
            // fixext 8
            this.writeU8(0xd7);
        }
        else if (size === 16) {
            // fixext 16
            this.writeU8(0xd8);
        }
        else if (size < 0x100) {
            // ext 8
            this.writeU8(0xc7);
            this.writeU8(size);
        }
        else if (size < 0x10000) {
            // ext 16
            this.writeU8(0xc8);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // ext 32
            this.writeU8(0xc9);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large extension object: ".concat(size));
        }
        this.writeI8(ext.type);
        this.writeU8a(ext.data);
    };
    Encoder.prototype.writeU8 = function (value) {
        this.ensureBufferSizeToWrite(1);
        this.view.setUint8(this.pos, value);
        this.pos++;
    };
    Encoder.prototype.writeU8a = function (values) {
        var size = values.length;
        this.ensureBufferSizeToWrite(size);
        this.bytes.set(values, this.pos);
        this.pos += size;
    };
    Encoder.prototype.writeI8 = function (value) {
        this.ensureBufferSizeToWrite(1);
        this.view.setInt8(this.pos, value);
        this.pos++;
    };
    Encoder.prototype.writeU16 = function (value) {
        this.ensureBufferSizeToWrite(2);
        this.view.setUint16(this.pos, value);
        this.pos += 2;
    };
    Encoder.prototype.writeI16 = function (value) {
        this.ensureBufferSizeToWrite(2);
        this.view.setInt16(this.pos, value);
        this.pos += 2;
    };
    Encoder.prototype.writeU32 = function (value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setUint32(this.pos, value);
        this.pos += 4;
    };
    Encoder.prototype.writeI32 = function (value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setInt32(this.pos, value);
        this.pos += 4;
    };
    Encoder.prototype.writeF32 = function (value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setFloat32(this.pos, value);
        this.pos += 4;
    };
    Encoder.prototype.writeF64 = function (value) {
        this.ensureBufferSizeToWrite(8);
        this.view.setFloat64(this.pos, value);
        this.pos += 8;
    };
    Encoder.prototype.writeU64 = function (value) {
        this.ensureBufferSizeToWrite(8);
        setUint64(this.view, this.pos, value);
        this.pos += 8;
    };
    Encoder.prototype.writeI64 = function (value) {
        this.ensureBufferSizeToWrite(8);
        setInt64(this.view, this.pos, value);
        this.pos += 8;
    };
    Encoder.prototype.writeBigUint64 = function (value) {
        this.ensureBufferSizeToWrite(8);
        this.view.setBigUint64(this.pos, value);
        this.pos += 8;
    };
    Encoder.prototype.writeBigInt64 = function (value) {
        this.ensureBufferSizeToWrite(8);
        this.view.setBigInt64(this.pos, value);
        this.pos += 8;
    };
    return Encoder;
}());

/**
 * It encodes `value` in the MessagePack format and
 * returns a byte buffer.
 *
 * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.
 */
function encode(value, options) {
    var encoder = new Encoder(options);
    return encoder.encodeSharedRef(value);
}

function prettyByte(byte) {
    return "".concat(byte < 0 ? "-" : "", "0x").concat(Math.abs(byte).toString(16).padStart(2, "0"));
}

var DEFAULT_MAX_KEY_LENGTH = 16;
var DEFAULT_MAX_LENGTH_PER_KEY = 16;
var CachedKeyDecoder = /** @class */ (function () {
    function CachedKeyDecoder(maxKeyLength, maxLengthPerKey) {
        if (maxKeyLength === void 0) { maxKeyLength = DEFAULT_MAX_KEY_LENGTH; }
        if (maxLengthPerKey === void 0) { maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY; }
        this.maxKeyLength = maxKeyLength;
        this.maxLengthPerKey = maxLengthPerKey;
        this.hit = 0;
        this.miss = 0;
        // avoid `new Array(N)`, which makes a sparse array,
        // because a sparse array is typically slower than a non-sparse array.
        this.caches = [];
        for (var i = 0; i < this.maxKeyLength; i++) {
            this.caches.push([]);
        }
    }
    CachedKeyDecoder.prototype.canBeCached = function (byteLength) {
        return byteLength > 0 && byteLength <= this.maxKeyLength;
    };
    CachedKeyDecoder.prototype.find = function (bytes, inputOffset, byteLength) {
        var records = this.caches[byteLength - 1];
        FIND_CHUNK: for (var _i = 0, records_1 = records; _i < records_1.length; _i++) {
            var record = records_1[_i];
            var recordBytes = record.bytes;
            for (var j = 0; j < byteLength; j++) {
                if (recordBytes[j] !== bytes[inputOffset + j]) {
                    continue FIND_CHUNK;
                }
            }
            return record.str;
        }
        return null;
    };
    CachedKeyDecoder.prototype.store = function (bytes, value) {
        var records = this.caches[bytes.length - 1];
        var record = { bytes: bytes, str: value };
        if (records.length >= this.maxLengthPerKey) {
            // `records` are full!
            // Set `record` to an arbitrary position.
            records[(Math.random() * records.length) | 0] = record;
        }
        else {
            records.push(record);
        }
    };
    CachedKeyDecoder.prototype.decode = function (bytes, inputOffset, byteLength) {
        var cachedValue = this.find(bytes, inputOffset, byteLength);
        if (cachedValue != null) {
            this.hit++;
            return cachedValue;
        }
        this.miss++;
        var str = utf8DecodeJs(bytes, inputOffset, byteLength);
        // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.
        var slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
        this.store(slicedCopyOfBytes, str);
        return str;
    };
    return CachedKeyDecoder;
}());

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (undefined && undefined.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (undefined && undefined.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); };
var __asyncGenerator = (undefined && undefined.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var STATE_ARRAY = "array";
var STATE_MAP_KEY = "map_key";
var STATE_MAP_VALUE = "map_value";
function isValidMapKeyType(key, useMap, supportObjectNumberKeys) {
    if (useMap) {
        return (typeof key === "string" ||
            typeof key === "number" ||
            typeof key === "bigint" ||
            key instanceof Uint8Array ||
            key instanceof RawBinaryString);
    }
    // Plain objects support a more limited set of key types
    return typeof key === "string" || (supportObjectNumberKeys && typeof key === "number");
}
var StackPool = /** @class */ (function () {
    function StackPool(useMap) {
        this.useMap = useMap;
        this.stack = [];
        this.stackHeadPosition = -1;
    }
    Object.defineProperty(StackPool.prototype, "length", {
        get: function () {
            return this.stackHeadPosition + 1;
        },
        enumerable: false,
        configurable: true
    });
    StackPool.prototype.top = function () {
        return this.stack[this.stackHeadPosition];
    };
    StackPool.prototype.pushArrayState = function (size) {
        var state = this.getUninitializedStateFromPool();
        state.type = STATE_ARRAY;
        state.position = 0;
        state.size = size;
        state.array = new Array(size);
    };
    StackPool.prototype.pushMapState = function (size) {
        var state = this.getUninitializedStateFromPool();
        state.type = STATE_MAP_KEY;
        state.readCount = 0;
        state.size = size;
        state.map = this.useMap ? new Map() : {};
    };
    StackPool.prototype.getUninitializedStateFromPool = function () {
        this.stackHeadPosition++;
        if (this.stackHeadPosition === this.stack.length) {
            var partialState = {
                type: undefined,
                size: 0,
                array: undefined,
                position: 0,
                readCount: 0,
                map: undefined,
                key: null,
            };
            this.stack.push(partialState);
        }
        return this.stack[this.stackHeadPosition];
    };
    StackPool.prototype.release = function (state) {
        var topStackState = this.stack[this.stackHeadPosition];
        if (topStackState !== state) {
            throw new Error("Invalid stack state. Released state is not on top of the stack.");
        }
        if (state.type === STATE_ARRAY) {
            var partialState = state;
            partialState.size = 0;
            partialState.array = undefined;
            partialState.position = 0;
            partialState.type = undefined;
        }
        if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {
            var partialState = state;
            partialState.size = 0;
            partialState.map = undefined;
            partialState.readCount = 0;
            partialState.type = undefined;
        }
        this.stackHeadPosition--;
    };
    StackPool.prototype.reset = function () {
        this.stack.length = 0;
        this.stackHeadPosition = -1;
    };
    return StackPool;
}());
var HEAD_BYTE_REQUIRED = -1;
var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
try {
    // IE11: The spec says it should throw RangeError,
    // IE11: but in IE11 it throws TypeError.
    EMPTY_VIEW.getInt8(0);
}
catch (e) {
    if (!(e instanceof RangeError)) {
        throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access");
    }
}
var DataViewIndexOutOfBoundsError = RangeError;
var MORE_DATA = new DataViewIndexOutOfBoundsError("Insufficient data");
var sharedCachedKeyDecoder = new CachedKeyDecoder();
var Decoder = /** @class */ (function () {
    function Decoder(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        this.totalPos = 0;
        this.pos = 0;
        this.view = EMPTY_VIEW;
        this.bytes = EMPTY_BYTES;
        this.headByte = HEAD_BYTE_REQUIRED;
        this.extensionCodec = (_a = options === null || options === void 0 ? void 0 : options.extensionCodec) !== null && _a !== void 0 ? _a : ExtensionCodec.defaultCodec;
        this.context = options === null || options === void 0 ? void 0 : options.context; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined
        this.intMode = (_b = options === null || options === void 0 ? void 0 : options.intMode) !== null && _b !== void 0 ? _b : ((options === null || options === void 0 ? void 0 : options.useBigInt64) ? IntMode.AS_ENCODED : IntMode.UNSAFE_NUMBER);
        this.rawBinaryStringValues = (_c = options === null || options === void 0 ? void 0 : options.rawBinaryStringValues) !== null && _c !== void 0 ? _c : false;
        this.rawBinaryStringKeys = (_d = options === null || options === void 0 ? void 0 : options.rawBinaryStringKeys) !== null && _d !== void 0 ? _d : false;
        this.useRawBinaryStringClass = (_e = options === null || options === void 0 ? void 0 : options.useRawBinaryStringClass) !== null && _e !== void 0 ? _e : false;
        this.useMap = (_f = options === null || options === void 0 ? void 0 : options.useMap) !== null && _f !== void 0 ? _f : false;
        this.supportObjectNumberKeys = (_g = options === null || options === void 0 ? void 0 : options.supportObjectNumberKeys) !== null && _g !== void 0 ? _g : false;
        this.maxStrLength = (_h = options === null || options === void 0 ? void 0 : options.maxStrLength) !== null && _h !== void 0 ? _h : UINT32_MAX;
        this.maxBinLength = (_j = options === null || options === void 0 ? void 0 : options.maxBinLength) !== null && _j !== void 0 ? _j : UINT32_MAX;
        this.maxArrayLength = (_k = options === null || options === void 0 ? void 0 : options.maxArrayLength) !== null && _k !== void 0 ? _k : UINT32_MAX;
        this.maxMapLength = (_l = options === null || options === void 0 ? void 0 : options.maxMapLength) !== null && _l !== void 0 ? _l : UINT32_MAX;
        this.maxExtLength = (_m = options === null || options === void 0 ? void 0 : options.maxExtLength) !== null && _m !== void 0 ? _m : UINT32_MAX;
        this.keyDecoder = (options === null || options === void 0 ? void 0 : options.keyDecoder) !== undefined ? options.keyDecoder : sharedCachedKeyDecoder;
        if (this.rawBinaryStringKeys && !this.useMap) {
            throw new Error("rawBinaryStringKeys is only supported when useMap is true");
        }
        this.stack = new StackPool(this.useMap);
    }
    Decoder.prototype.reinitializeState = function () {
        this.totalPos = 0;
        this.headByte = HEAD_BYTE_REQUIRED;
        this.stack.reset();
        // view, bytes, and pos will be re-initialized in setBuffer()
    };
    Decoder.prototype.setBuffer = function (buffer) {
        this.bytes = ensureUint8Array$1(buffer);
        this.view = createDataView(this.bytes);
        this.pos = 0;
    };
    Decoder.prototype.appendBuffer = function (buffer) {
        if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
            this.setBuffer(buffer);
        }
        else {
            var remainingData = this.bytes.subarray(this.pos);
            var newData = ensureUint8Array$1(buffer);
            // concat remainingData + newData
            var newBuffer = new Uint8Array(remainingData.length + newData.length);
            newBuffer.set(remainingData);
            newBuffer.set(newData, remainingData.length);
            this.setBuffer(newBuffer);
        }
    };
    Decoder.prototype.hasRemaining = function (size) {
        return this.view.byteLength - this.pos >= size;
    };
    Decoder.prototype.createExtraByteError = function (posToShow) {
        var _a = this, view = _a.view, pos = _a.pos;
        return new RangeError("Extra ".concat(view.byteLength - pos, " of ").concat(view.byteLength, " byte(s) found at buffer[").concat(posToShow, "]"));
    };
    /**
     * @throws {@link DecodeError}
     * @throws {@link RangeError}
     */
    Decoder.prototype.decode = function (buffer) {
        this.reinitializeState();
        this.setBuffer(buffer);
        var object = this.doDecodeSync();
        if (this.hasRemaining(1)) {
            throw this.createExtraByteError(this.pos);
        }
        return object;
    };
    Decoder.prototype.decodeMulti = function (buffer) {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    this.reinitializeState();
                    this.setBuffer(buffer);
                    _a.label = 1;
                case 1:
                    if (!this.hasRemaining(1)) return [3 /*break*/, 3];
                    return [4 /*yield*/, this.doDecodeSync()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    Decoder.prototype.decodeAsync = function (stream) {
        var _a, stream_1, stream_1_1;
        var _b, e_1, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var decoded, object, buffer, e_1_1, _e, headByte, pos, totalPos;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        decoded = false;
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 6, 7, 12]);
                        _a = true, stream_1 = __asyncValues(stream);
                        _f.label = 2;
                    case 2: return [4 /*yield*/, stream_1.next()];
                    case 3:
                        if (!(stream_1_1 = _f.sent(), _b = stream_1_1.done, !_b)) return [3 /*break*/, 5];
                        _d = stream_1_1.value;
                        _a = false;
                        buffer = _d;
                        if (decoded) {
                            throw this.createExtraByteError(this.totalPos);
                        }
                        this.appendBuffer(buffer);
                        try {
                            object = this.doDecodeSync();
                            decoded = true;
                        }
                        catch (e) {
                            if (!(e instanceof DataViewIndexOutOfBoundsError)) {
                                throw e; // rethrow
                            }
                            // fallthrough
                        }
                        this.totalPos += this.pos;
                        _f.label = 4;
                    case 4:
                        _a = true;
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 12];
                    case 6:
                        e_1_1 = _f.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 12];
                    case 7:
                        _f.trys.push([7, , 10, 11]);
                        if (!(!_a && !_b && (_c = stream_1.return))) return [3 /*break*/, 9];
                        return [4 /*yield*/, _c.call(stream_1)];
                    case 8:
                        _f.sent();
                        _f.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 11: return [7 /*endfinally*/];
                    case 12:
                        if (decoded) {
                            if (this.hasRemaining(1)) {
                                throw this.createExtraByteError(this.totalPos);
                            }
                            return [2 /*return*/, object];
                        }
                        _e = this, headByte = _e.headByte, pos = _e.pos, totalPos = _e.totalPos;
                        throw new RangeError("Insufficient data in parsing ".concat(prettyByte(headByte), " at ").concat(totalPos, " (").concat(pos, " in the current buffer)"));
                }
            });
        });
    };
    Decoder.prototype.decodeArrayStream = function (stream) {
        return this.decodeMultiAsync(stream, true);
    };
    Decoder.prototype.decodeStream = function (stream) {
        return this.decodeMultiAsync(stream, false);
    };
    Decoder.prototype.decodeMultiAsync = function (stream, isArray) {
        return __asyncGenerator(this, arguments, function decodeMultiAsync_1() {
            var isArrayHeaderRequired, arrayItemsLeft, _a, stream_2, stream_2_1, buffer, e_2, e_3_1;
            var _b, e_3, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        isArrayHeaderRequired = isArray;
                        arrayItemsLeft = -1;
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 13, 14, 19]);
                        _a = true, stream_2 = __asyncValues(stream);
                        _e.label = 2;
                    case 2: return [4 /*yield*/, __await(stream_2.next())];
                    case 3:
                        if (!(stream_2_1 = _e.sent(), _b = stream_2_1.done, !_b)) return [3 /*break*/, 12];
                        _d = stream_2_1.value;
                        _a = false;
                        buffer = _d;
                        if (isArray && arrayItemsLeft === 0) {
                            throw this.createExtraByteError(this.totalPos);
                        }
                        this.appendBuffer(buffer);
                        if (isArrayHeaderRequired) {
                            arrayItemsLeft = this.readArraySize();
                            isArrayHeaderRequired = false;
                            this.complete();
                        }
                        _e.label = 4;
                    case 4:
                        _e.trys.push([4, 9, , 10]);
                        _e.label = 5;
                    case 5:
                        return [4 /*yield*/, __await(this.doDecodeSync())];
                    case 6: return [4 /*yield*/, _e.sent()];
                    case 7:
                        _e.sent();
                        if (--arrayItemsLeft === 0) {
                            return [3 /*break*/, 8];
                        }
                        return [3 /*break*/, 5];
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        e_2 = _e.sent();
                        if (!(e_2 instanceof DataViewIndexOutOfBoundsError)) {
                            throw e_2; // rethrow
                        }
                        return [3 /*break*/, 10];
                    case 10:
                        this.totalPos += this.pos;
                        _e.label = 11;
                    case 11:
                        _a = true;
                        return [3 /*break*/, 2];
                    case 12: return [3 /*break*/, 19];
                    case 13:
                        e_3_1 = _e.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 19];
                    case 14:
                        _e.trys.push([14, , 17, 18]);
                        if (!(!_a && !_b && (_c = stream_2.return))) return [3 /*break*/, 16];
                        return [4 /*yield*/, __await(_c.call(stream_2))];
                    case 15:
                        _e.sent();
                        _e.label = 16;
                    case 16: return [3 /*break*/, 18];
                    case 17:
                        if (e_3) throw e_3.error;
                        return [7 /*endfinally*/];
                    case 18: return [7 /*endfinally*/];
                    case 19: return [2 /*return*/];
                }
            });
        });
    };
    Decoder.prototype.doDecodeSync = function () {
        DECODE: while (true) {
            var headByte = this.readHeadByte();
            var object = void 0;
            if (headByte >= 0xe0) {
                // negative fixint (111x xxxx) 0xe0 - 0xff
                object = this.convertNumber(headByte - 0x100);
            }
            else if (headByte < 0xc0) {
                if (headByte < 0x80) {
                    // positive fixint (0xxx xxxx) 0x00 - 0x7f
                    object = this.convertNumber(headByte);
                }
                else if (headByte < 0x90) {
                    // fixmap (1000 xxxx) 0x80 - 0x8f
                    var size = headByte - 0x80;
                    if (size !== 0) {
                        this.pushMapState(size);
                        this.complete();
                        continue DECODE;
                    }
                    else {
                        object = this.useMap ? new Map() : {};
                    }
                }
                else if (headByte < 0xa0) {
                    // fixarray (1001 xxxx) 0x90 - 0x9f
                    var size = headByte - 0x90;
                    if (size !== 0) {
                        this.pushArrayState(size);
                        this.complete();
                        continue DECODE;
                    }
                    else {
                        object = [];
                    }
                }
                else {
                    // fixstr (101x xxxx) 0xa0 - 0xbf
                    var byteLength = headByte - 0xa0;
                    object = this.decodeString(byteLength, 0);
                }
            }
            else if (headByte === 0xc0) {
                // nil
                object = null;
            }
            else if (headByte === 0xc2) {
                // false
                object = false;
            }
            else if (headByte === 0xc3) {
                // true
                object = true;
            }
            else if (headByte === 0xca) {
                // float 32
                object = this.readF32();
            }
            else if (headByte === 0xcb) {
                // float 64
                object = this.readF64();
            }
            else if (headByte === 0xcc) {
                // uint 8
                object = this.convertNumber(this.readU8());
            }
            else if (headByte === 0xcd) {
                // uint 16
                object = this.convertNumber(this.readU16());
            }
            else if (headByte === 0xce) {
                // uint 32
                object = this.convertNumber(this.readU32());
            }
            else if (headByte === 0xcf) {
                // uint 64
                object = this.readU64();
            }
            else if (headByte === 0xd0) {
                // int 8
                object = this.convertNumber(this.readI8());
            }
            else if (headByte === 0xd1) {
                // int 16
                object = this.convertNumber(this.readI16());
            }
            else if (headByte === 0xd2) {
                // int 32
                object = this.convertNumber(this.readI32());
            }
            else if (headByte === 0xd3) {
                // int 64
                object = this.readI64();
            }
            else if (headByte === 0xd9) {
                // str 8
                var byteLength = this.lookU8();
                object = this.decodeString(byteLength, 1);
            }
            else if (headByte === 0xda) {
                // str 16
                var byteLength = this.lookU16();
                object = this.decodeString(byteLength, 2);
            }
            else if (headByte === 0xdb) {
                // str 32
                var byteLength = this.lookU32();
                object = this.decodeString(byteLength, 4);
            }
            else if (headByte === 0xdc) {
                // array 16
                var size = this.readU16();
                if (size !== 0) {
                    this.pushArrayState(size);
                    this.complete();
                    continue DECODE;
                }
                else {
                    object = [];
                }
            }
            else if (headByte === 0xdd) {
                // array 32
                var size = this.readU32();
                if (size !== 0) {
                    this.pushArrayState(size);
                    this.complete();
                    continue DECODE;
                }
                else {
                    object = [];
                }
            }
            else if (headByte === 0xde) {
                // map 16
                var size = this.readU16();
                if (size !== 0) {
                    this.pushMapState(size);
                    this.complete();
                    continue DECODE;
                }
                else {
                    object = {};
                }
            }
            else if (headByte === 0xdf) {
                // map 32
                var size = this.readU32();
                if (size !== 0) {
                    this.pushMapState(size);
                    this.complete();
                    continue DECODE;
                }
                else {
                    object = {};
                }
            }
            else if (headByte === 0xc4) {
                // bin 8
                var size = this.lookU8();
                object = this.decodeBinary(size, 1);
            }
            else if (headByte === 0xc5) {
                // bin 16
                var size = this.lookU16();
                object = this.decodeBinary(size, 2);
            }
            else if (headByte === 0xc6) {
                // bin 32
                var size = this.lookU32();
                object = this.decodeBinary(size, 4);
            }
            else if (headByte === 0xd4) {
                // fixext 1
                object = this.decodeExtension(1, 0);
            }
            else if (headByte === 0xd5) {
                // fixext 2
                object = this.decodeExtension(2, 0);
            }
            else if (headByte === 0xd6) {
                // fixext 4
                object = this.decodeExtension(4, 0);
            }
            else if (headByte === 0xd7) {
                // fixext 8
                object = this.decodeExtension(8, 0);
            }
            else if (headByte === 0xd8) {
                // fixext 16
                object = this.decodeExtension(16, 0);
            }
            else if (headByte === 0xc7) {
                // ext 8
                var size = this.lookU8();
                object = this.decodeExtension(size, 1);
            }
            else if (headByte === 0xc8) {
                // ext 16
                var size = this.lookU16();
                object = this.decodeExtension(size, 2);
            }
            else if (headByte === 0xc9) {
                // ext 32
                var size = this.lookU32();
                object = this.decodeExtension(size, 4);
            }
            else {
                throw new DecodeError("Unrecognized type byte: ".concat(prettyByte(headByte)));
            }
            this.complete();
            var stack = this.stack;
            while (stack.length > 0) {
                // arrays and maps
                var state = stack.top();
                if (state.type === STATE_ARRAY) {
                    state.array[state.position] = object;
                    state.position++;
                    if (state.position === state.size) {
                        object = state.array;
                        stack.release(state);
                    }
                    else {
                        continue DECODE;
                    }
                }
                else if (state.type === STATE_MAP_KEY) {
                    if (!isValidMapKeyType(object, this.useMap, this.supportObjectNumberKeys)) {
                        var acceptableTypes = this.useMap
                            ? "string, number, bigint, or Uint8Array"
                            : this.supportObjectNumberKeys
                                ? "string or number"
                                : "string";
                        throw new DecodeError("The type of key must be ".concat(acceptableTypes, " but got ").concat(typeof object));
                    }
                    if (!this.useMap && object === "__proto__") {
                        throw new DecodeError("The key __proto__ is not allowed");
                    }
                    state.key = object;
                    state.type = STATE_MAP_VALUE;
                    continue DECODE;
                }
                else {
                    // it must be `state.type === State.MAP_VALUE` here
                    if (this.useMap) {
                        state.map.set(state.key, object);
                    }
                    else {
                        state.map[state.key] = object;
                    }
                    state.readCount++;
                    if (state.readCount === state.size) {
                        object = state.map;
                        stack.release(state);
                    }
                    else {
                        state.key = null;
                        state.type = STATE_MAP_KEY;
                        continue DECODE;
                    }
                }
            }
            return object;
        }
    };
    Decoder.prototype.readHeadByte = function () {
        if (this.headByte === HEAD_BYTE_REQUIRED) {
            this.headByte = this.readU8();
            // console.log("headByte", prettyByte(this.headByte));
        }
        return this.headByte;
    };
    Decoder.prototype.complete = function () {
        this.headByte = HEAD_BYTE_REQUIRED;
    };
    Decoder.prototype.readArraySize = function () {
        var headByte = this.readHeadByte();
        switch (headByte) {
            case 0xdc:
                return this.readU16();
            case 0xdd:
                return this.readU32();
            default: {
                if (headByte < 0xa0) {
                    return headByte - 0x90;
                }
                else {
                    throw new DecodeError("Unrecognized array type byte: ".concat(prettyByte(headByte)));
                }
            }
        }
    };
    Decoder.prototype.pushMapState = function (size) {
        if (size > this.maxMapLength) {
            throw new DecodeError("Max length exceeded: map length (".concat(size, ") > maxMapLengthLength (").concat(this.maxMapLength, ")"));
        }
        this.stack.pushMapState(size);
    };
    Decoder.prototype.pushArrayState = function (size) {
        if (size > this.maxArrayLength) {
            throw new DecodeError("Max length exceeded: array length (".concat(size, ") > maxArrayLength (").concat(this.maxArrayLength, ")"));
        }
        this.stack.pushArrayState(size);
    };
    Decoder.prototype.decodeString = function (byteLength, headerOffset) {
        if (this.stateIsMapKey() ? this.rawBinaryStringKeys : this.rawBinaryStringValues) {
            var decoded = this.decodeBinary(byteLength, headerOffset);
            if (this.useRawBinaryStringClass) {
                return new RawBinaryString(decoded);
            }
            return decoded;
        }
        return this.decodeUtf8String(byteLength, headerOffset);
    };
    Decoder.prototype.decodeUtf8String = function (byteLength, headerOffset) {
        var _a;
        if (byteLength > this.maxStrLength) {
            throw new DecodeError("Max length exceeded: UTF-8 byte length (".concat(byteLength, ") > maxStrLength (").concat(this.maxStrLength, ")"));
        }
        if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
            throw MORE_DATA;
        }
        var offset = this.pos + headerOffset;
        var object;
        if (this.stateIsMapKey() && ((_a = this.keyDecoder) === null || _a === void 0 ? void 0 : _a.canBeCached(byteLength))) {
            object = this.keyDecoder.decode(this.bytes, offset, byteLength);
        }
        else {
            object = utf8Decode(this.bytes, offset, byteLength);
        }
        this.pos += headerOffset + byteLength;
        return object;
    };
    Decoder.prototype.stateIsMapKey = function () {
        if (this.stack.length > 0) {
            var state = this.stack.top();
            return state.type === STATE_MAP_KEY;
        }
        return false;
    };
    Decoder.prototype.decodeBinary = function (byteLength, headOffset) {
        if (byteLength > this.maxBinLength) {
            throw new DecodeError("Max length exceeded: bin length (".concat(byteLength, ") > maxBinLength (").concat(this.maxBinLength, ")"));
        }
        if (!this.hasRemaining(byteLength + headOffset)) {
            throw MORE_DATA;
        }
        var offset = this.pos + headOffset;
        var object = this.bytes.subarray(offset, offset + byteLength);
        this.pos += headOffset + byteLength;
        return object;
    };
    Decoder.prototype.decodeExtension = function (size, headOffset) {
        if (size > this.maxExtLength) {
            throw new DecodeError("Max length exceeded: ext length (".concat(size, ") > maxExtLength (").concat(this.maxExtLength, ")"));
        }
        var extType = this.view.getInt8(this.pos + headOffset);
        var data = this.decodeBinary(size, headOffset + 1 /* extType */);
        return this.extensionCodec.decode(data, extType, this.context);
    };
    Decoder.prototype.convertNumber = function (value) {
        return convertSafeIntegerToMode(value, this.intMode);
    };
    Decoder.prototype.lookU8 = function () {
        return this.view.getUint8(this.pos);
    };
    Decoder.prototype.lookU16 = function () {
        return this.view.getUint16(this.pos);
    };
    Decoder.prototype.lookU32 = function () {
        return this.view.getUint32(this.pos);
    };
    Decoder.prototype.readU8 = function () {
        var value = this.view.getUint8(this.pos);
        this.pos++;
        return value;
    };
    Decoder.prototype.readI8 = function () {
        var value = this.view.getInt8(this.pos);
        this.pos++;
        return value;
    };
    Decoder.prototype.readU16 = function () {
        var value = this.view.getUint16(this.pos);
        this.pos += 2;
        return value;
    };
    Decoder.prototype.readI16 = function () {
        var value = this.view.getInt16(this.pos);
        this.pos += 2;
        return value;
    };
    Decoder.prototype.readU32 = function () {
        var value = this.view.getUint32(this.pos);
        this.pos += 4;
        return value;
    };
    Decoder.prototype.readI32 = function () {
        var value = this.view.getInt32(this.pos);
        this.pos += 4;
        return value;
    };
    Decoder.prototype.readU64 = function () {
        var value = getUint64(this.view, this.pos, this.intMode);
        this.pos += 8;
        return value;
    };
    Decoder.prototype.readI64 = function () {
        var value = getInt64(this.view, this.pos, this.intMode);
        this.pos += 8;
        return value;
    };
    Decoder.prototype.readF32 = function () {
        var value = this.view.getFloat32(this.pos);
        this.pos += 4;
        return value;
    };
    Decoder.prototype.readF64 = function () {
        var value = this.view.getFloat64(this.pos);
        this.pos += 8;
        return value;
    };
    return Decoder;
}());

/**
 * It decodes a single MessagePack object in a buffer.
 *
 * This is a synchronous decoding function.
 * See other variants for asynchronous decoding: {@link decodeAsync}, {@link decodeStream}, or {@link decodeArrayStream}.
 *
 * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.
 * @throws {@link DecodeError} if the buffer contains invalid data.
 */
function decode$1(buffer, options) {
    var decoder = new Decoder(options);
    return decoder.decode(buffer);
}

/**
 * This file is a wrapper of msgpack.js.
 * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.
 * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.
 * Algorand's msgpack encoding follows to following rules -
 *  1. Every integer must be encoded to the smallest type possible (0-255-\>8bit, 256-65535-\>16bit, etx)
 *  2. All fields names must be sorted
 *  3. All empty and 0 fields should be omitted
 *  4. Every positive number must be encoded as uint
 *  5. Binary blob should be used for binary data and string for strings
 *  */
// Errors
const ERROR_CONTAINS_EMPTY_STRING = 'The object contains empty or 0 values. First empty or 0 value encountered during encoding: ';
/**
 * containsEmpty returns true if any of the object's values are empty, false otherwise.
 * Empty arrays considered empty
 * @param obj - The object to check
 * @returns \{true, empty key\} if contains empty, \{false, undefined\} otherwise
 */
function containsEmpty(obj) {
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            if (!obj[key] || obj[key].length === 0) {
                return { containsEmpty: true, firstEmptyKey: key };
            }
        }
    }
    return { containsEmpty: false, firstEmptyKey: undefined };
}
/**
 * msgpackRawEncode encodes objects using msgpack, regardless of whether there are
 * empty or 0 value fields.
 * @param obj - a dictionary to be encoded. May or may not contain empty or 0 values.
 * @returns msgpack representation of the object
 */
function msgpackRawEncode(obj) {
    // enable the canonical option
    const options = { sortKeys: true };
    return encode(obj, options);
}
/**
 * encodeObj takes a javascript object and returns its msgpack encoding
 * Note that the encoding sorts the fields alphabetically
 * @param o - js object to be encoded. Must not contain empty or 0 values.
 * @returns Uint8Array binary representation
 * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values
 *
 * @deprecated Use {@link msgpackRawEncode} instead. Note that function does not
 *   check for empty values like this one does.
 */
function encodeObj(obj) {
    // Check for empty values
    const emptyCheck = containsEmpty(obj);
    if (emptyCheck.containsEmpty) {
        throw new Error(ERROR_CONTAINS_EMPTY_STRING + emptyCheck.firstEmptyKey);
    }
    return msgpackRawEncode(obj);
}
function intDecodingToIntMode(intDecoding) {
    switch (intDecoding) {
        case IntDecoding$1.UNSAFE:
            return IntMode.UNSAFE_NUMBER;
        case IntDecoding$1.SAFE:
            return IntMode.SAFE_NUMBER;
        case IntDecoding$1.MIXED:
            return IntMode.MIXED;
        case IntDecoding$1.BIGINT:
            return IntMode.BIGINT;
        default:
            throw new Error(`Invalid intDecoding: ${intDecoding}`);
    }
}
/**
 * Decodes msgpack bytes into a plain JavaScript object.
 * @param buffer - The msgpack bytes to decode
 * @param options - Options for decoding, including int decoding mode. See {@link IntDecoding} for more information.
 * @returns The decoded object
 */
function msgpackRawDecode(buffer, options) {
    const decoderOptions = {
        intMode: options?.intDecoding
            ? intDecodingToIntMode(options?.intDecoding)
            : IntMode.BIGINT,
    };
    return decode$1(buffer, decoderOptions);
}
/**
 * decodeObj takes a Uint8Array and returns its javascript obj
 * @param o - Uint8Array to decode
 * @returns object
 *
 * @deprecated Use {@link msgpackRawDecode} instead. Note that this function uses `IntDecoding.MIXED`
 *   while `msgpackRawDecode` defaults to `IntDecoding.BIGINT` for int decoding, though it is
 *   configurable.
 */
function decodeObj(o) {
    return msgpackRawDecode(o, { intDecoding: IntDecoding$1.MIXED });
}
/**
 * Decodes msgpack bytes into a Map object. This supports decoding non-string map keys.
 * @param encoded - The msgpack bytes to decode
 * @param options - Options for decoding, including int decoding mode. See {@link IntDecoding} for more information.
 * @returns The decoded Map object
 */
function msgpackRawDecodeAsMap(encoded, options) {
    const decoderOptions = {
        intMode: options?.intDecoding
            ? intDecodingToIntMode(options?.intDecoding)
            : IntMode.BIGINT,
        useMap: true,
    };
    return decode$1(encoded, decoderOptions);
}
function msgpackRawDecodeAsMapWithRawStrings(encoded, options) {
    const decoderOptions = {
        intMode: IntMode.BIGINT,
        useMap: true,
        rawBinaryStringKeys: true,
        rawBinaryStringValues: true,
        useRawBinaryStringClass: true,
    };
    return decode$1(encoded, decoderOptions);
}
function msgpackEncodingDataToJSONEncodingData(e) {
    if (e === null || e === undefined) {
        return e;
    }
    if (e instanceof Uint8Array) {
        return bytesToBase64(e);
    }
    if (Array.isArray(e)) {
        return e.map(msgpackEncodingDataToJSONEncodingData);
    }
    if (e instanceof Map) {
        const obj = {};
        for (const [k, v] of e) {
            if (typeof k !== 'string') {
                throw new Error(`JSON map key must be a string: ${k}`);
            }
            obj[k] = msgpackEncodingDataToJSONEncodingData(v);
        }
        return obj;
    }
    return e;
}
function jsonEncodingDataToMsgpackEncodingData(e) {
    if (e === null || e === undefined) {
        return e;
    }
    if (typeof e === 'string' || // Note, this will not convert base64 to Uint8Array
        typeof e === 'number' ||
        typeof e === 'bigint' ||
        typeof e === 'boolean') {
        return e;
    }
    if (Array.isArray(e)) {
        return e.map(jsonEncodingDataToMsgpackEncodingData);
    }
    if (typeof e === 'object') {
        const obj = new Map();
        for (const [key, value] of Object.entries(e)) {
            obj.set(key, jsonEncodingDataToMsgpackEncodingData(value));
        }
        return obj;
    }
    throw new Error(`Invalid JSON encoding data: ${e}`);
}
/* eslint-disable class-methods-use-this */
/* eslint-disable no-useless-constructor,no-empty-function */
var MsgpackObjectPathSegmentKind;
(function (MsgpackObjectPathSegmentKind) {
    MsgpackObjectPathSegmentKind[MsgpackObjectPathSegmentKind["MAP_VALUE"] = 0] = "MAP_VALUE";
    MsgpackObjectPathSegmentKind[MsgpackObjectPathSegmentKind["ARRAY_ELEMENT"] = 1] = "ARRAY_ELEMENT";
})(MsgpackObjectPathSegmentKind || (MsgpackObjectPathSegmentKind = {}));
/**
 * This class is used to index into an encoded msgpack object and extract raw strings.
 */
class MsgpackRawStringProvider {
    constructor({ parent, segment, baseObjectBytes, }) {
        this.resolvedCache = null;
        this.resolvedCachePresent = false;
        this.parent = parent;
        this.segment = segment;
        this.baseObjectBytes = baseObjectBytes;
    }
    /**
     * Create a new provider that resolves to the current provider's map value at the given key.
     */
    withMapValue(key) {
        return new MsgpackRawStringProvider({
            parent: this,
            segment: {
                kind: MsgpackObjectPathSegmentKind.MAP_VALUE,
                key,
            },
        });
    }
    /**
     * Create a new provider that resolves to the current provider's array element at the given index.
     */
    withArrayElement(index) {
        return new MsgpackRawStringProvider({
            parent: this,
            segment: {
                kind: MsgpackObjectPathSegmentKind.ARRAY_ELEMENT,
                key: index,
            },
        });
    }
    /**
     * Get the raw string at the current location. If the current location is not a raw string, an error is thrown.
     */
    getRawStringAtCurrentLocation() {
        const resolved = this.resolve();
        if (resolved instanceof RawBinaryString) {
            // Decoded rawBinaryValue will always be a Uint8Array
            return resolved.rawBinaryValue;
        }
        throw new Error(`Invalid type. Expected RawBinaryString, got ${resolved} (${typeof resolved})`);
    }
    /**
     * Get the raw string map keys and values at the current location. If the current location is not a map, an error is thrown.
     */
    getRawStringKeysAndValuesAtCurrentLocation() {
        const resolved = this.resolve();
        if (!(resolved instanceof Map)) {
            throw new Error(`Invalid type. Expected Map, got ${resolved} (${typeof resolved})`);
        }
        const keysAndValues = new Map();
        for (const [key, value] of resolved) {
            if (key instanceof RawBinaryString) {
                // Decoded rawBinaryValue will always be a Uint8Array
                keysAndValues.set(key.rawBinaryValue, value);
            }
            else {
                throw new Error(`Invalid type for map key. Expected RawBinaryString, got ${key} (${typeof key})`);
            }
        }
        return keysAndValues;
    }
    /**
     * Resolve the provider by extracting the value it indicates from the base msgpack object.
     */
    resolve() {
        if (this.resolvedCachePresent) {
            return this.resolvedCache;
        }
        let parentResolved;
        if (this.parent) {
            parentResolved = this.parent.resolve();
        }
        else {
            // Need to parse baseObjectBytes
            parentResolved = msgpackRawDecodeAsMapWithRawStrings(this.baseObjectBytes);
        }
        if (!this.segment) {
            this.resolvedCache = parentResolved;
            this.resolvedCachePresent = true;
            return parentResolved;
        }
        if (this.segment.kind === MsgpackObjectPathSegmentKind.MAP_VALUE) {
            if (!(parentResolved instanceof Map)) {
                throw new Error(`Invalid type. Expected Map, got ${parentResolved} (${typeof parentResolved})`);
            }
            // All decoded map keys will be raw strings, and Map objects compare complex values by reference,
            // so we must check all the values for value-equality.
            if (typeof this.segment.key === 'string' ||
                this.segment.key instanceof Uint8Array ||
                this.segment.key instanceof RawBinaryString) {
                const targetBytes = this.segment.key instanceof RawBinaryString
                    ? // Decoded rawBinaryValue will always be a Uint8Array
                        this.segment.key.rawBinaryValue
                    : coerceToBytes(this.segment.key);
                const targetIsRawString = typeof this.segment.key === 'string' ||
                    this.segment.key instanceof RawBinaryString;
                for (const [key, value] of parentResolved) {
                    let potentialKeyBytes;
                    if (targetIsRawString) {
                        if (key instanceof RawBinaryString) {
                            // Decoded rawBinaryValue will always be a Uint8Array
                            potentialKeyBytes = key.rawBinaryValue;
                        }
                    }
                    else if (key instanceof Uint8Array) {
                        potentialKeyBytes = key;
                    }
                    if (potentialKeyBytes && arrayEqual(targetBytes, potentialKeyBytes)) {
                        this.resolvedCache = value;
                        break;
                    }
                }
            }
            else {
                this.resolvedCache = parentResolved.get(this.segment.key);
            }
            this.resolvedCachePresent = true;
            return this.resolvedCache;
        }
        if (this.segment.kind === MsgpackObjectPathSegmentKind.ARRAY_ELEMENT) {
            if (!Array.isArray(parentResolved)) {
                throw new Error(`Invalid type. Expected Array, got ${parentResolved} (${typeof parentResolved})`);
            }
            this.resolvedCache = parentResolved[this.segment.key];
            this.resolvedCachePresent = true;
            return this.resolvedCache;
        }
        throw new Error(`Invalid segment kind: ${this.segment.kind}`);
    }
    /**
     * Get the path string of the current location indicated by the provider. Useful for debugging.
     */
    getPathString() {
        const parentPathString = this.parent ? this.parent.getPathString() : 'root';
        if (!this.segment) {
            return parentPathString;
        }
        if (this.segment.kind === MsgpackObjectPathSegmentKind.MAP_VALUE) {
            return `${parentPathString} -> map key "${this.segment.key}" (${typeof this.segment.key})`;
        }
        if (this.segment.kind === MsgpackObjectPathSegmentKind.ARRAY_ELEMENT) {
            return `${parentPathString} -> array index ${this.segment.key} (${typeof this.segment.key})`;
        }
        return `${parentPathString} -> unknown segment kind ${this.segment.kind}`;
    }
}
/**
 * A Schema is used to prepare objects for encoding and decoding from msgpack and JSON.
 *
 * Schemas represent a specific type.
 */
class Schema {
}
/**
 * Decode a msgpack byte array to an Encodable object.
 * @param encoded - The msgpack bytes to decode
 * @param c - The class of the object to decode. This class must match the object that was encoded.
 * @returns An instance of the class with the decoded data
 */
function decodeMsgpack(encoded, c) {
    const decoded = msgpackRawDecodeAsMap(encoded);
    const rawStringProvider = new MsgpackRawStringProvider({
        baseObjectBytes: encoded,
    });
    return c.fromEncodingData(c.encodingSchema.fromPreparedMsgpack(decoded, rawStringProvider));
}
/**
 * Encode an Encodable object to a msgpack byte array.
 * @param e - The object to encode
 * @returns A msgpack byte array encoding of the object
 */
function encodeMsgpack(e) {
    return msgpackRawEncode(e.getEncodingSchema().prepareMsgpack(e.toEncodingData()));
}
/**
 * Decode a JSON string to an Encodable object.
 * @param encoded - The JSON string to decode
 * @param c - The class of the object to decode. This class must match the object that was encoded.
 * @returns An instance of the class with the decoded data
 */
function decodeJSON(encoded, c) {
    const decoded = parseJSON(encoded, {
        intDecoding: IntDecoding$1.BIGINT,
    });
    return c.fromEncodingData(c.encodingSchema.fromPreparedJSON(decoded));
}
/**
 * Encode an Encodable object to a JSON string.
 * @param e - The object to encode
 * @param options - Optional encoding options. See {@link EncodeJSONOptions} for more information.
 * @returns A JSON string encoding of the object
 */
function encodeJSON(e, options) {
    const { space, ...prepareJSONOptions } = options ?? {};
    const prepared = e
        .getEncodingSchema()
        .prepareJSON(e.toEncodingData(), prepareJSONOptions);
    return stringifyJSON(prepared, undefined, space);
}

/* eslint-disable class-methods-use-this */
class BooleanSchema extends Schema {
    defaultValue() {
        return false;
    }
    isDefaultValue(data) {
        return data === false;
    }
    prepareMsgpack(data) {
        if (typeof data === 'boolean') {
            return data;
        }
        throw new Error('Invalid boolean');
    }
    fromPreparedMsgpack(encoded, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _rawStringProvider) {
        if (typeof encoded === 'boolean') {
            return encoded;
        }
        throw new Error('Invalid boolean');
    }
    prepareJSON(data, // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        if (typeof data === 'boolean') {
            return data;
        }
        throw new Error('Invalid boolean');
    }
    fromPreparedJSON(encoded) {
        if (typeof encoded === 'boolean') {
            return encoded;
        }
        throw new Error('Invalid boolean');
    }
}

/* eslint-disable class-methods-use-this */
class StringSchema extends Schema {
    defaultValue() {
        return '';
    }
    isDefaultValue(data) {
        return data === '';
    }
    prepareMsgpack(data) {
        if (typeof data === 'string') {
            return data;
        }
        throw new Error(`Invalid string: (${typeof data}) ${data}`);
    }
    fromPreparedMsgpack(encoded, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _rawStringProvider) {
        if (typeof encoded === 'string') {
            return encoded;
        }
        throw new Error(`Invalid string: (${typeof encoded}) ${encoded}`);
    }
    prepareJSON(data, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        if (typeof data === 'string') {
            return data;
        }
        throw new Error(`Invalid string: (${typeof data}) ${data}`);
    }
    fromPreparedJSON(encoded) {
        if (typeof encoded === 'string') {
            return encoded;
        }
        throw new Error(`Invalid string: (${typeof encoded}) ${encoded}`);
    }
}

/* eslint-disable class-methods-use-this */
class Uint64Schema extends Schema {
    defaultValue() {
        return BigInt(0);
    }
    isDefaultValue(data) {
        if (typeof data === 'bigint')
            return data === BigInt(0);
        if (typeof data === 'number')
            return data === 0;
        return false;
    }
    prepareMsgpack(data) {
        return ensureUint64(data);
    }
    fromPreparedMsgpack(encoded, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _rawStringProvider) {
        return ensureUint64(encoded);
    }
    prepareJSON(data, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        return ensureUint64(data);
    }
    fromPreparedJSON(encoded) {
        return ensureUint64(encoded);
    }
}

/* eslint-disable class-methods-use-this */
class AddressSchema extends Schema {
    defaultValue() {
        return Address.zeroAddress();
    }
    isDefaultValue(data) {
        // The equals method checks if the input is an Address
        return Address.zeroAddress().equals(data);
    }
    prepareMsgpack(data) {
        if (data instanceof Address) {
            return data.publicKey;
        }
        throw new Error(`Invalid address: (${typeof data}) ${data}`);
    }
    fromPreparedMsgpack(encoded, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _rawStringProvider) {
        // The Address constructor checks that the input is a Uint8Array
        return new Address(encoded);
    }
    prepareJSON(data, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        if (data instanceof Address) {
            return data.toString();
        }
        throw new Error(`Invalid address: (${typeof data}) ${data}`);
    }
    fromPreparedJSON(encoded) {
        // The Address.fromString method checks that the input is a string
        return Address.fromString(encoded);
    }
}

/* eslint-disable class-methods-use-this */
class ByteArraySchema extends Schema {
    defaultValue() {
        return new Uint8Array();
    }
    isDefaultValue(data) {
        return data instanceof Uint8Array && data.byteLength === 0;
    }
    prepareMsgpack(data) {
        if (data instanceof Uint8Array) {
            return data;
        }
        throw new Error(`Invalid byte array: (${typeof data}) ${data}`);
    }
    fromPreparedMsgpack(encoded, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _rawStringProvider) {
        if (encoded instanceof Uint8Array) {
            return encoded;
        }
        throw new Error(`Invalid byte array: (${typeof encoded}) ${encoded}`);
    }
    prepareJSON(data, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        if (data instanceof Uint8Array) {
            return bytesToBase64(data);
        }
        throw new Error(`Invalid byte array: (${typeof data}) ${data}`);
    }
    fromPreparedJSON(encoded) {
        if (typeof encoded === 'string') {
            return base64ToBytes(encoded);
        }
        throw new Error(`Invalid byte array: (${typeof encoded}) ${encoded}`);
    }
}
class FixedLengthByteArraySchema extends Schema {
    constructor(length) {
        super();
        this.length = length;
    }
    defaultValue() {
        return new Uint8Array(this.length);
    }
    isDefaultValue(data) {
        return (data instanceof Uint8Array &&
            data.byteLength === this.length &&
            data.every((byte) => byte === 0));
    }
    prepareMsgpack(data) {
        if (data instanceof Uint8Array) {
            if (data.byteLength === this.length) {
                return data;
            }
            throw new Error(`Invalid byte array length: wanted ${this.length}, got ${data.byteLength}`);
        }
        throw new Error('Invalid byte array');
    }
    fromPreparedMsgpack(encoded, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _rawStringProvider) {
        if (encoded instanceof Uint8Array) {
            if (encoded.byteLength === this.length) {
                return encoded;
            }
            throw new Error(`Invalid byte array length: wanted ${this.length}, got ${encoded.byteLength}`);
        }
        throw new Error('Invalid byte array');
    }
    prepareJSON(data) {
        if (data instanceof Uint8Array) {
            if (data.byteLength === this.length) {
                return bytesToBase64(data);
            }
            throw new Error(`Invalid byte array length: wanted ${this.length}, got ${data.byteLength}`);
        }
        throw new Error('Invalid byte array');
    }
    fromPreparedJSON(encoded) {
        if (typeof encoded === 'string') {
            const bytes = base64ToBytes(encoded);
            if (bytes.byteLength === this.length) {
                return bytes;
            }
            throw new Error(`Invalid byte array length: wanted ${this.length}, got ${bytes.byteLength}`);
        }
        throw new Error('Invalid base64 byte array');
    }
}

/**
 * Length of a block hash in bytes
 */
const blockHashByteLength = 32;
/* eslint-disable class-methods-use-this */
/**
 * Length of a 32-byte encoded in base32 without padding
 */
const base32Length = 52;
/**
 * BlockHashSchema is a schema for block hashes.
 *
 * In msgapck, these types are encoded as 32-byte binary strings. In JSON, they
 * are encoded as strings prefixed with "blk-" followed by the base32 encoding
 * of the 32-byte block hash without any padding.
 */
class BlockHashSchema extends Schema {
    defaultValue() {
        return new Uint8Array(blockHashByteLength);
    }
    isDefaultValue(data) {
        return (data instanceof Uint8Array &&
            data.byteLength === blockHashByteLength &&
            data.every((byte) => byte === 0));
    }
    prepareMsgpack(data) {
        if (data instanceof Uint8Array && data.byteLength === blockHashByteLength) {
            return data;
        }
        throw new Error(`Invalid block hash: (${typeof data}) ${data}`);
    }
    fromPreparedMsgpack(encoded, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _rawStringProvider) {
        if (encoded instanceof Uint8Array &&
            encoded.byteLength === blockHashByteLength) {
            return encoded;
        }
        throw new Error(`Invalid block hash: (${typeof encoded}) ${encoded}`);
    }
    prepareJSON(data, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        if (data instanceof Uint8Array && data.byteLength === blockHashByteLength) {
            return `blk-${base32.encode(data).slice(0, base32Length)}`;
        }
        throw new Error(`Invalid block hash: (${typeof data}) ${data}`);
    }
    fromPreparedJSON(encoded) {
        if (typeof encoded === 'string' &&
            encoded.length === base32Length + 4 &&
            encoded.startsWith('blk-')) {
            return Uint8Array.from(base32.decode.asBytes(encoded.slice(4)));
        }
        throw new Error(`Invalid block hash: (${typeof encoded}) ${encoded}`);
    }
}

/* eslint-disable class-methods-use-this */
/**
 * SpecialCaseBinaryStringSchema is a schema for byte arrays which are encoded
 * as strings in msgpack and JSON.
 *
 * This schema allows lossless conversion between the in memory representation
 * and the msgpack encoded representation, but NOT between the in memory and
 * JSON encoded representations if the byte array contains invalid UTF-8
 * sequences.
 */
class SpecialCaseBinaryStringSchema extends Schema {
    defaultValue() {
        return new Uint8Array();
    }
    isDefaultValue(data) {
        return data instanceof Uint8Array && data.byteLength === 0;
    }
    prepareMsgpack(data) {
        if (data instanceof Uint8Array) {
            // Cast is needed because RawBinaryString is not part of the standard MsgpackEncodingData
            return new RawBinaryString(data);
        }
        throw new Error(`Invalid byte array: (${typeof data}) ${data}`);
    }
    fromPreparedMsgpack(_encoded, rawStringProvider) {
        return rawStringProvider.getRawStringAtCurrentLocation();
    }
    prepareJSON(data, options) {
        if (data instanceof Uint8Array) {
            // Not safe to convert to string for all binary data
            const stringValue = bytesToString(data);
            if (!options.lossyBinaryStringConversion &&
                !arrayEqual(coerceToBytes(stringValue), data)) {
                throw new Error(`Invalid UTF-8 byte array encountered. Encode with lossyBinaryStringConversion enabled to bypass this check. Base64 value: ${bytesToBase64(data)}`);
            }
            return stringValue;
        }
        throw new Error(`Invalid byte array: (${typeof data}) ${data}`);
    }
    fromPreparedJSON(encoded) {
        if (typeof encoded === 'string') {
            return coerceToBytes(encoded);
        }
        throw new Error(`Invalid byte array: (${typeof encoded}) ${encoded}`);
    }
}

/* eslint-disable class-methods-use-this */
class ArraySchema extends Schema {
    constructor(itemSchema) {
        super();
        this.itemSchema = itemSchema;
    }
    defaultValue() {
        return [];
    }
    isDefaultValue(data) {
        return Array.isArray(data) && data.length === 0;
    }
    prepareMsgpack(data) {
        if (Array.isArray(data)) {
            return data.map((item) => this.itemSchema.prepareMsgpack(item));
        }
        throw new Error('ArraySchema data must be an array');
    }
    fromPreparedMsgpack(encoded, rawStringProvider) {
        if (Array.isArray(encoded)) {
            return encoded.map((item, index) => this.itemSchema.fromPreparedMsgpack(item, rawStringProvider.withArrayElement(index)));
        }
        throw new Error(`ArraySchema encoded data must be an array: ${encoded} (${typeof encoded})`);
    }
    prepareJSON(data, options) {
        if (Array.isArray(data)) {
            return data.map((item) => this.itemSchema.prepareJSON(item, options));
        }
        throw new Error('ArraySchema data must be an array');
    }
    fromPreparedJSON(encoded) {
        if (Array.isArray(encoded)) {
            return encoded.map((item) => this.itemSchema.fromPreparedJSON(item));
        }
        throw new Error(`ArraySchema encoded data must be an array: ${encoded} (${typeof encoded})`);
    }
}

/**
 * Applies the omitEmpty flag to all entries in the array.
 * @param entries - The entries to apply the flag to.
 * @returns A new array with the omitEmpty flag applied to all entries.
 */
function allOmitEmpty(entries) {
    return entries.map((entry) => ({ ...entry, omitEmpty: true }));
}
/**
 * Schema for a map/struct with a fixed set of known string fields.
 */
class NamedMapSchema extends Schema {
    constructor(entries) {
        super();
        this.entries = entries;
        this.checkEntries();
    }
    /**
     * Adds new entries to the map schema. WARNING: this is a mutable operation, and you should be very
     * careful when using it. Any error that happens here is non-recoverable and will corrupt the
     * NamedMapSchema object;
     * @param entries - The entries to add.
     */
    pushEntries(...entries) {
        this.entries.push(...entries);
        this.checkEntries();
    }
    checkEntries() {
        for (const entry of this.entries) {
            if (entry.embedded) {
                if (entry.key !== '') {
                    throw new Error('Embedded entries must have an empty key');
                }
                if (!(entry.valueSchema instanceof NamedMapSchema)) {
                    throw new Error('Embedded entry valueSchema must be a NamedMapSchema');
                }
            }
        }
        const keys = new Set();
        for (const entry of this.getEntries()) {
            if (keys.has(entry.key)) {
                throw new Error(`Duplicate key: ${entry.key}`);
            }
            keys.add(entry.key);
        }
    }
    /**
     * Returns all top-level entries, properly accounting for fields from embedded entries.
     * @returns An array of all top-level entries for this map.
     */
    getEntries() {
        const entries = [];
        for (const entry of this.entries) {
            if (entry.embedded) {
                const embeddedMapSchema = entry.valueSchema;
                entries.push(...embeddedMapSchema.getEntries());
            }
            else {
                entries.push(entry);
            }
        }
        return entries;
    }
    defaultValue() {
        const map = new Map();
        for (const entry of this.getEntries()) {
            map.set(entry.key, entry.valueSchema.defaultValue());
        }
        return map;
    }
    isDefaultValue(data) {
        if (!(data instanceof Map))
            return false;
        for (const entry of this.getEntries()) {
            if (!entry.valueSchema.isDefaultValue(data.get(entry.key))) {
                return false;
            }
        }
        return true;
    }
    prepareMsgpack(data) {
        if (!(data instanceof Map)) {
            throw new Error(`NamedMapSchema data must be a Map. Got (${typeof data}) ${data}`);
        }
        const map = new Map();
        for (const entry of this.getEntries()) {
            const value = data.get(entry.key);
            if (entry.omitEmpty && entry.valueSchema.isDefaultValue(value)) {
                continue;
            }
            map.set(entry.key, entry.valueSchema.prepareMsgpack(value));
        }
        return map;
    }
    fromPreparedMsgpack(encoded, rawStringProvider) {
        if (!(encoded instanceof Map)) {
            throw new Error('NamedMapSchema data must be a Map');
        }
        const map = new Map();
        for (const entry of this.getEntries()) {
            if (encoded.has(entry.key)) {
                map.set(entry.key, entry.valueSchema.fromPreparedMsgpack(encoded.get(entry.key), rawStringProvider.withMapValue(entry.key)));
            }
            else if (entry.omitEmpty) {
                map.set(entry.key, entry.valueSchema.defaultValue());
            }
            else {
                throw new Error(`Missing key: ${entry.key}`);
            }
        }
        return map;
    }
    prepareJSON(data, options) {
        if (!(data instanceof Map)) {
            throw new Error('NamedMapSchema data must be a Map');
        }
        const obj = {};
        for (const entry of this.getEntries()) {
            const value = data.get(entry.key);
            if (entry.omitEmpty && entry.valueSchema.isDefaultValue(value)) {
                continue;
            }
            obj[entry.key] = entry.valueSchema.prepareJSON(value, options);
        }
        return obj;
    }
    fromPreparedJSON(encoded) {
        if (encoded == null ||
            typeof encoded !== 'object' ||
            Array.isArray(encoded)) {
            throw new Error('NamedMapSchema data must be an object');
        }
        const map = new Map();
        for (const entry of this.getEntries()) {
            if (Object.prototype.hasOwnProperty.call(encoded, entry.key)) {
                map.set(entry.key, entry.valueSchema.fromPreparedJSON(encoded[entry.key]));
            }
            else if (entry.omitEmpty) {
                map.set(entry.key, entry.valueSchema.defaultValue());
            }
            else {
                throw new Error(`Missing key: ${entry.key}`);
            }
        }
        return map;
    }
}
/**
 * Combines multiple maps into a single map. Throws an error if any of the maps have duplicate keys.
 * @param maps - The maps to combine.
 * @returns A new map with all the entries from the input maps.
 */
function combineMaps(...maps) {
    const combined = new Map();
    for (const map of maps) {
        for (const [key, value] of map) {
            if (combined.has(key)) {
                throw new Error(`Duplicate key: ${key}`);
            }
            combined.set(key, value);
        }
    }
    return combined;
}
/**
 * Converts a map to a new map with different keys and values.
 * @param map - The map to convert.
 * @param func - The function to convert each entry.
 * @returns A new map with the converted entries.
 */
function convertMap(map, func) {
    const mapped = new Map();
    for (const [key, value] of map) {
        const [newKey, newValue] = func(key, value);
        mapped.set(newKey, newValue);
    }
    return mapped;
}
/**
 * Schema for a map with a variable number of uint64 keys.
 */
class Uint64MapSchema extends Schema {
    constructor(valueSchema) {
        super();
        this.valueSchema = valueSchema;
    }
    defaultValue() {
        return new Map();
    }
    isDefaultValue(data) {
        return data instanceof Map && data.size === 0;
    }
    prepareMsgpack(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Uint64MapSchema data must be a Map. Got (${typeof data}) ${data}`);
        }
        const prepared = new Map();
        for (const [key, value] of data) {
            const bigintKey = ensureUint64(key);
            if (prepared.has(bigintKey)) {
                throw new Error(`Duplicate key: ${bigintKey}`);
            }
            prepared.set(bigintKey, this.valueSchema.prepareMsgpack(value));
        }
        return prepared;
    }
    fromPreparedMsgpack(encoded, rawStringProvider) {
        if (!(encoded instanceof Map)) {
            throw new Error('Uint64MapSchema data must be a Map');
        }
        const map = new Map();
        for (const [key, value] of encoded) {
            const bigintKey = ensureUint64(key);
            if (map.has(bigintKey)) {
                throw new Error(`Duplicate key: ${bigintKey}`);
            }
            map.set(bigintKey, this.valueSchema.fromPreparedMsgpack(value, rawStringProvider.withMapValue(key)));
        }
        return map;
    }
    prepareJSON(data, options) {
        if (!(data instanceof Map)) {
            throw new Error(`Uint64MapSchema data must be a Map. Got (${typeof data}) ${data}`);
        }
        const prepared = new Map();
        for (const [key, value] of data) {
            const bigintKey = ensureUint64(key);
            if (prepared.has(bigintKey)) {
                throw new Error(`Duplicate key: ${bigintKey}`);
            }
            prepared.set(bigintKey, this.valueSchema.prepareJSON(value, options));
        }
        // Convert map to object
        const obj = {};
        for (const [key, value] of prepared) {
            obj[key.toString()] = value;
        }
        return obj;
    }
    fromPreparedJSON(encoded) {
        if (encoded == null ||
            typeof encoded !== 'object' ||
            Array.isArray(encoded)) {
            throw new Error('Uint64MapSchema data must be an object');
        }
        const map = new Map();
        for (const [key, value] of Object.entries(encoded)) {
            const bigintKey = BigInt(key);
            if (map.has(bigintKey)) {
                throw new Error(`Duplicate key: ${bigintKey}`);
            }
            map.set(bigintKey, this.valueSchema.fromPreparedJSON(value));
        }
        return map;
    }
}
/**
 * Schema for a map with a variable number of byte array keys.
 */
class ByteArrayMapSchema extends Schema {
    constructor(valueSchema) {
        super();
        this.valueSchema = valueSchema;
    }
    defaultValue() {
        return new Map();
    }
    isDefaultValue(data) {
        return data instanceof Map && data.size === 0;
    }
    prepareMsgpack(data) {
        if (!(data instanceof Map)) {
            throw new Error(`ByteArrayMapSchema data must be a Map. Got (${typeof data}) ${data}`);
        }
        const prepared = new Map();
        for (const [key, value] of data) {
            if (!(key instanceof Uint8Array)) {
                throw new Error(`Invalid key: ${key} (${typeof key})`);
            }
            prepared.set(key, this.valueSchema.prepareMsgpack(value));
        }
        return prepared;
    }
    fromPreparedMsgpack(encoded, rawStringProvider) {
        if (!(encoded instanceof Map)) {
            throw new Error('ByteArrayMapSchema data must be a Map');
        }
        const map = new Map();
        for (const [key, value] of encoded) {
            if (!(key instanceof Uint8Array)) {
                throw new Error(`Invalid key: ${key} (${typeof key})`);
            }
            map.set(key, this.valueSchema.fromPreparedMsgpack(value, rawStringProvider.withMapValue(key)));
        }
        return map;
    }
    prepareJSON(data, options) {
        if (!(data instanceof Map)) {
            throw new Error(`ByteArrayMapSchema data must be a Map. Got (${typeof data}) ${data}`);
        }
        const prepared = new Map();
        for (const [key, value] of data) {
            if (!(key instanceof Uint8Array)) {
                throw new Error(`Invalid key: ${key} (${typeof key})`);
            }
            const b64Encoded = bytesToBase64(key);
            if (prepared.has(b64Encoded)) {
                throw new Error(`Duplicate key (base64): ${b64Encoded}`);
            }
            prepared.set(b64Encoded, this.valueSchema.prepareJSON(value, options));
        }
        // Convert map to object
        const obj = {};
        for (const [key, value] of prepared) {
            obj[key] = value;
        }
        return obj;
    }
    fromPreparedJSON(encoded) {
        if (encoded == null ||
            typeof encoded !== 'object' ||
            Array.isArray(encoded)) {
            throw new Error('ByteArrayMapSchema data must be an object');
        }
        const map = new Map();
        for (const [key, value] of Object.entries(encoded)) {
            map.set(base64ToBytes(key), this.valueSchema.fromPreparedJSON(value));
        }
        return map;
    }
}
/**
 * Converts any RawBinaryString values to regular strings in a MsgpackEncodingData object.
 *
 * Note this conversion may be lossy if the binary data is not valid UTF-8.
 *
 * @returns A new object with RawBinaryString values converted to strings.
 */
function convertRawStringsInMsgpackValue(value) {
    if (value instanceof RawBinaryString) {
        return bytesToString(value.rawBinaryValue);
    }
    if (value instanceof Map) {
        const newMap = new Map();
        for (const [key, val] of value) {
            newMap.set(convertRawStringsInMsgpackValue(key), convertRawStringsInMsgpackValue(val));
        }
        return newMap;
    }
    if (Array.isArray(value)) {
        return value.map(convertRawStringsInMsgpackValue);
    }
    return value;
}
/**
 * Schema for a map with a variable number of binary string keys.
 *
 * See SpecialCaseBinaryStringSchema for more information about the key type.
 */
class SpecialCaseBinaryStringMapSchema extends Schema {
    constructor(valueSchema) {
        super();
        this.valueSchema = valueSchema;
    }
    defaultValue() {
        return new Map();
    }
    isDefaultValue(data) {
        return data instanceof Map && data.size === 0;
    }
    prepareMsgpack(data) {
        if (!(data instanceof Map)) {
            throw new Error(`SpecialCaseBinaryStringMapSchema data must be a Map. Got (${typeof data}) ${data}`);
        }
        const prepared = new Map();
        for (const [key, value] of data) {
            if (!(key instanceof Uint8Array)) {
                throw new Error(`Invalid key: ${key} (${typeof key})`);
            }
            prepared.set(new RawBinaryString(key), this.valueSchema.prepareMsgpack(value));
        }
        // Cast is needed because RawBinaryString is not part of the standard MsgpackEncodingData
        return prepared;
    }
    fromPreparedMsgpack(_encoded, rawStringProvider) {
        const map = new Map();
        const keysAndValues = rawStringProvider.getRawStringKeysAndValuesAtCurrentLocation();
        for (const [key, value] of keysAndValues) {
            map.set(key, this.valueSchema.fromPreparedMsgpack(convertRawStringsInMsgpackValue(value), rawStringProvider.withMapValue(new RawBinaryString(key))));
        }
        return map;
    }
    prepareJSON(data, options) {
        if (!(data instanceof Map)) {
            throw new Error(`SpecialCaseBinaryStringMapSchema data must be a Map. Got (${typeof data}) ${data}`);
        }
        const prepared = new Map();
        for (const [key, value] of data) {
            if (!(key instanceof Uint8Array)) {
                throw new Error(`Invalid key: ${key}`);
            }
            // Not safe to convert to string for all binary data
            const keyStringValue = bytesToString(key);
            if (!options.lossyBinaryStringConversion &&
                !arrayEqual(coerceToBytes(keyStringValue), key)) {
                throw new Error(`Invalid UTF-8 byte array encountered. Encode with lossyBinaryStringConversion enabled to bypass this check. Base64 value: ${bytesToBase64(key)}`);
            }
            prepared.set(keyStringValue, this.valueSchema.prepareJSON(value, options));
        }
        // Convert map to object
        const obj = {};
        for (const [key, value] of prepared) {
            obj[key] = value;
        }
        return obj;
    }
    fromPreparedJSON(encoded) {
        if (encoded == null ||
            typeof encoded !== 'object' ||
            Array.isArray(encoded)) {
            throw new Error('SpecialCaseBinaryStringMapSchema data must be an object');
        }
        const map = new Map();
        for (const [key, value] of Object.entries(encoded)) {
            map.set(coerceToBytes(key), this.valueSchema.fromPreparedJSON(value));
        }
        return map;
    }
}

/* eslint-disable class-methods-use-this */
/**
 * OptionalSchema allows for another schema-defined value to be optional.
 *
 * This expands the set of values which can be represented by the given schema to include `undefined`.
 *
 * Note that this schema considers `undefined` _and_ any default values from the underlying schema
 * to all be default values. This means that when using NamedMapSchema to omit default values, an
 * `undefined` value is indistinguishable from the given schema's default value; in this respect,
 * OptionalSchema does not affect the encoding of NamedMapSchema values, but rather allows the
 * application to restore omitted values as `undefined` instead of their default value.
 *
 * Upon decoding, this schema also allows null/undefined values to be acceptable as values.
 */
class OptionalSchema extends Schema {
    constructor(valueSchema) {
        super();
        this.valueSchema = valueSchema;
    }
    defaultValue() {
        return undefined;
    }
    isDefaultValue(data) {
        return data === undefined || this.valueSchema.isDefaultValue(data);
    }
    prepareMsgpack(data) {
        if (data === undefined) {
            return undefined;
        }
        return this.valueSchema.prepareMsgpack(data);
    }
    fromPreparedMsgpack(encoded, rawStringProvider) {
        // JS undefined is encoded as msgpack nil, which may be decoded as JS null
        if (encoded === undefined || encoded === null) {
            return undefined;
        }
        return this.valueSchema.fromPreparedMsgpack(encoded, rawStringProvider);
    }
    prepareJSON(data, options) {
        if (data === undefined) {
            // JSON representation does not have undefined, only null
            return null;
        }
        return this.valueSchema.prepareJSON(data, options);
    }
    fromPreparedJSON(encoded) {
        if (encoded === undefined || encoded === null) {
            return undefined;
        }
        return this.valueSchema.fromPreparedJSON(encoded);
    }
}

/* eslint-disable class-methods-use-this */
class UntypedSchema extends Schema {
    defaultValue() {
        return undefined;
    }
    isDefaultValue(data) {
        return data === undefined;
    }
    prepareMsgpack(data) {
        // Value is already MsgpackEncodingData, since it is returned as such from
        // fromPreparedMsgpack and fromPreparedJSON
        return data;
    }
    fromPreparedMsgpack(encoded, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _rawStringProvider) {
        return encoded;
    }
    prepareJSON(data, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _options) {
        return msgpackEncodingDataToJSONEncodingData(data);
    }
    fromPreparedJSON(encoded) {
        return jsonEncodingDataToMsgpackEncodingData(encoded);
    }
}

function boxReferenceToEncodingData(reference, foreignApps, appIndex) {
    const referenceId = BigInt(reference.appIndex);
    const referenceName = reference.name;
    const isOwnReference = referenceId === BigInt(0) || referenceId === appIndex;
    // Foreign apps start from index 1; index 0 is its own app ID.
    const index = foreignApps.indexOf(referenceId) + 1;
    // Check if the app referenced is itself after checking the foreign apps array.
    // If index is zero, then the app ID was not found in the foreign apps array
    // or the foreign apps array was null.
    if (index === 0 && !isOwnReference) {
        // Error if the app is trying to reference a foreign app that was not in
        // its own foreign apps array.
        throw new Error(`Box ref with appId ${referenceId} not in foreign-apps`);
    }
    return new Map([
        ['i', index],
        ['n', referenceName],
    ]);
}
/**
 * boxReferencesToEncodingData translates an array of BoxReferences into an array of encoding data
 * maps.
 */
function boxReferencesToEncodingData(references, foreignApps, appIndex) {
    const appIndexBigInt = BigInt(appIndex);
    const foreignAppsBigInt = foreignApps.map(BigInt);
    return references.map((bx) => boxReferenceToEncodingData(bx, foreignAppsBigInt, appIndexBigInt));
}

/**
 * Enum for application transaction types.
 */
var TransactionType;
(function (TransactionType) {
    /**
     * Payment transaction
     */
    TransactionType["pay"] = "pay";
    /**
     * Key registration transaction
     */
    TransactionType["keyreg"] = "keyreg";
    /**
     * Asset configuration transaction
     */
    TransactionType["acfg"] = "acfg";
    /**
     * Asset transfer transaction
     */
    TransactionType["axfer"] = "axfer";
    /**
     * Asset freeze transaction
     */
    TransactionType["afrz"] = "afrz";
    /**
     * Application transaction
     */
    TransactionType["appl"] = "appl";
    /**
     * State proof transaction
     */
    TransactionType["stpf"] = "stpf";
    /**
     * Heartbeat transaction
     */
    TransactionType["hb"] = "hb";
})(TransactionType || (TransactionType = {}));
/**
 * Check if a string is a valid transaction type
 * @param s - string to check
 * @returns true if s is a valid transaction type
 */
function isTransactionType(s) {
    return (s === TransactionType.pay ||
        s === TransactionType.keyreg ||
        s === TransactionType.acfg ||
        s === TransactionType.axfer ||
        s === TransactionType.afrz ||
        s === TransactionType.appl ||
        s === TransactionType.stpf ||
        s === TransactionType.hb);
}
/**
 * Enums for application transactions on-transaction-complete behavior
 */
var OnApplicationComplete;
(function (OnApplicationComplete) {
    /**
     * NoOpOC indicates that an application transaction will simply call its
     * ApprovalProgram
     */
    OnApplicationComplete[OnApplicationComplete["NoOpOC"] = 0] = "NoOpOC";
    /**
     * OptInOC indicates that an application transaction will allocate some
     * LocalState for the application in the sender's account
     */
    OnApplicationComplete[OnApplicationComplete["OptInOC"] = 1] = "OptInOC";
    /**
     * CloseOutOC indicates that an application transaction will deallocate
     * some LocalState for the application from the user's account
     */
    OnApplicationComplete[OnApplicationComplete["CloseOutOC"] = 2] = "CloseOutOC";
    /**
     * ClearStateOC is similar to CloseOutOC, but may never fail. This
     * allows users to reclaim their minimum balance from an application
     * they no longer wish to opt in to.
     */
    OnApplicationComplete[OnApplicationComplete["ClearStateOC"] = 3] = "ClearStateOC";
    /**
     * UpdateApplicationOC indicates that an application transaction will
     * update the ApprovalProgram and ClearStateProgram for the application
     */
    OnApplicationComplete[OnApplicationComplete["UpdateApplicationOC"] = 4] = "UpdateApplicationOC";
    /**
     * DeleteApplicationOC indicates that an application transaction will
     * delete the AppParams for the application from the creator's balance
     * record
     */
    OnApplicationComplete[OnApplicationComplete["DeleteApplicationOC"] = 5] = "DeleteApplicationOC";
})(OnApplicationComplete || (OnApplicationComplete = {}));
/**
 * Check if a value is a valid OnApplicationComplete value
 * @param v - value to check
 * @returns true if v is a valid OnApplicationComplete value
 */
function isOnApplicationComplete(v) {
    return (v === OnApplicationComplete.NoOpOC ||
        v === OnApplicationComplete.OptInOC ||
        v === OnApplicationComplete.CloseOutOC ||
        v === OnApplicationComplete.ClearStateOC ||
        v === OnApplicationComplete.UpdateApplicationOC ||
        v === OnApplicationComplete.DeleteApplicationOC);
}

let HashFactory$1 = class HashFactory {
    constructor(params) {
        this.hashType = params.hashType;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return HashFactory.encodingSchema;
    }
    toEncodingData() {
        return new Map([['t', this.hashType]]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded HashFactory: ${data}`);
        }
        return new HashFactory({
            hashType: Number(data.get('t')),
        });
    }
};
HashFactory$1.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 't', valueSchema: new Uint64Schema() }, // hashType
]));
let MerkleArrayProof$1 = class MerkleArrayProof {
    constructor(params) {
        this.path = params.path;
        this.hashFactory = params.hashFactory;
        this.treeDepth = params.treeDepth;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return MerkleArrayProof.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['pth', this.path],
            ['hsh', this.hashFactory.toEncodingData()],
            ['td', this.treeDepth],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded MerkleArrayProof: ${data}`);
        }
        return new MerkleArrayProof({
            path: data.get('pth'),
            hashFactory: HashFactory$1.fromEncodingData(data.get('hsh')),
            treeDepth: Number(data.get('td')),
        });
    }
};
MerkleArrayProof$1.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'pth', // path
        valueSchema: new ArraySchema(new ByteArraySchema()),
    },
    {
        key: 'hsh', // hashFactory
        valueSchema: HashFactory$1.encodingSchema,
    },
    {
        key: 'td', // treeDepth
        valueSchema: new Uint64Schema(),
    },
]));
/**
 * MerkleSignatureVerifier is used to verify a merkle signature.
 */
class MerkleSignatureVerifier {
    constructor(params) {
        this.commitment = params.commitment;
        this.keyLifetime = params.keyLifetime;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return MerkleSignatureVerifier.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['cmt', this.commitment],
            ['lf', this.keyLifetime],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded MerkleSignatureVerifier: ${data}`);
        }
        return new MerkleSignatureVerifier({
            commitment: data.get('cmt'),
            keyLifetime: data.get('lf'),
        });
    }
}
MerkleSignatureVerifier.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'cmt', // commitment
        valueSchema: new FixedLengthByteArraySchema(64),
    },
    {
        key: 'lf', // keyLifetime
        valueSchema: new Uint64Schema(),
    },
]));
/**
 * A Participant corresponds to an account whose AccountData.Status is Online, and for which the
 * expected sigRound satisfies AccountData.VoteFirstValid <= sigRound <= AccountData.VoteLastValid.
 *
 * In the Algorand ledger, it is possible for multiple accounts to have the same PK. Thus, the PK is
 * not necessarily unique among Participants. However, each account will produce a unique Participant
 * struct, to avoid potential DoS attacks where one account claims to have the same VoteID PK as
 * another account.
 */
class Participant {
    constructor(params) {
        this.pk = params.pk;
        this.weight = params.weight;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Participant.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['p', this.pk.toEncodingData()],
            ['w', this.weight],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Participant: ${data}`);
        }
        return new Participant({
            pk: MerkleSignatureVerifier.fromEncodingData(data.get('p')),
            weight: data.get('w'),
        });
    }
}
Participant.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'p', // pk
        valueSchema: MerkleSignatureVerifier.encodingSchema,
    },
    {
        key: 'w', // weight
        valueSchema: new Uint64Schema(),
    },
]));
class FalconVerifier {
    constructor(params) {
        this.publicKey = params.publicKey;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return FalconVerifier.encodingSchema;
    }
    toEncodingData() {
        return new Map([['k', this.publicKey]]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded FalconVerifier: ${data}`);
        }
        return new FalconVerifier({
            publicKey: data.get('k'),
        });
    }
}
FalconVerifier.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'k', valueSchema: new FixedLengthByteArraySchema(0x701) }, // publicKey
]));
/**
 * FalconSignatureStruct represents a signature in the merkle signature scheme using falcon signatures
 * as an underlying crypto scheme. It consists of an ephemeral public key, a signature, a merkle
 * verification path and an index. The merkle signature considered valid only if the Signature is
 * verified under the ephemeral public key and the Merkle verification path verifies that the
 * ephemeral public key is located at the given index of the tree (for the root given in the
 * long-term public key). More details can be found on Algorand's spec
 */
class FalconSignatureStruct {
    constructor(params) {
        this.signature = params.signature;
        this.vectorCommitmentIndex = params.index;
        this.proof = params.proof;
        this.verifyingKey = params.verifyingKey;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return FalconSignatureStruct.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['sig', this.signature],
            ['idx', this.vectorCommitmentIndex],
            ['prf', this.proof.toEncodingData()],
            ['vkey', this.verifyingKey.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded FalconSignatureStruct: ${data}`);
        }
        return new FalconSignatureStruct({
            signature: data.get('sig'),
            index: data.get('idx'),
            proof: MerkleArrayProof$1.fromEncodingData(data.get('prf')),
            verifyingKey: FalconVerifier.fromEncodingData(data.get('vkey')),
        });
    }
}
FalconSignatureStruct.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'sig', valueSchema: new ByteArraySchema() }, // signature
    { key: 'idx', valueSchema: new Uint64Schema() }, // index
    { key: 'prf', valueSchema: MerkleArrayProof$1.encodingSchema }, // proof
    { key: 'vkey', valueSchema: FalconVerifier.encodingSchema }, // verifyingKey
]));
/**
 * A SigslotCommit is a single slot in the sigs array that forms the state proof.
 */
class SigslotCommit {
    constructor(params) {
        this.sig = params.sig;
        this.l = params.l;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SigslotCommit.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['s', this.sig.toEncodingData()],
            ['l', this.l],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SigslotCommit: ${data}`);
        }
        return new SigslotCommit({
            sig: FalconSignatureStruct.fromEncodingData(data.get('s')),
            l: data.get('l'),
        });
    }
}
SigslotCommit.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 's', valueSchema: FalconSignatureStruct.encodingSchema }, // sigslot
    { key: 'l', valueSchema: new Uint64Schema() }, // l
]));
/**
 * Reveal is a single array position revealed as part of a state proof. It reveals an element of the
 * signature array and the corresponding element of the participants array.
 */
class Reveal {
    constructor(params) {
        this.sigslot = params.sigslot;
        this.participant = params.participant;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Reveal.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['s', this.sigslot.toEncodingData()],
            ['p', this.participant.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Reveal: ${data}`);
        }
        return new Reveal({
            sigslot: SigslotCommit.fromEncodingData(data.get('s')),
            participant: Participant.fromEncodingData(data.get('p')),
        });
    }
}
Reveal.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 's', valueSchema: SigslotCommit.encodingSchema }, // sigslotCommit
    { key: 'p', valueSchema: Participant.encodingSchema }, // participant
]));
let StateProof$2 = class StateProof {
    constructor(params) {
        this.sigCommit = params.sigCommit;
        this.signedWeight = params.signedWeight;
        this.sigProofs = params.sigProofs;
        this.partProofs = params.partProofs;
        this.merkleSignatureSaltVersion = params.merkleSignatureSaltVersion;
        this.reveals = params.reveals;
        this.positionsToReveal = params.positionsToReveal;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProof.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['c', this.sigCommit],
            ['w', this.signedWeight],
            ['S', this.sigProofs.toEncodingData()],
            ['P', this.partProofs.toEncodingData()],
            ['v', this.merkleSignatureSaltVersion],
            [
                'r',
                convertMap(this.reveals, (key, value) => [key, value.toEncodingData()]),
            ],
            ['pr', this.positionsToReveal],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProof: ${data}`);
        }
        return new StateProof({
            sigCommit: data.get('c'),
            signedWeight: data.get('w'),
            sigProofs: MerkleArrayProof$1.fromEncodingData(data.get('S')),
            partProofs: MerkleArrayProof$1.fromEncodingData(data.get('P')),
            merkleSignatureSaltVersion: Number(data.get('v')),
            reveals: convertMap(data.get('r'), (key, value) => [
                key,
                Reveal.fromEncodingData(value),
            ]),
            positionsToReveal: data.get('pr'),
        });
    }
};
StateProof$2.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'c', // sigCommit
        valueSchema: new ByteArraySchema(),
    },
    {
        key: 'w', // signedWeight
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'S', // sigProofs
        valueSchema: MerkleArrayProof$1.encodingSchema,
    },
    {
        key: 'P', // partProofs
        valueSchema: MerkleArrayProof$1.encodingSchema,
    },
    {
        key: 'v', // merkleSignatureSaltVersion
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'r', // reveals
        valueSchema: new Uint64MapSchema(Reveal.encodingSchema),
    },
    {
        key: 'pr', // positionsToReveal
        valueSchema: new ArraySchema(new Uint64Schema()),
    },
]));
let StateProofMessage$1 = class StateProofMessage {
    constructor(params) {
        this.blockHeadersCommitment = params.blockHeadersCommitment;
        this.votersCommitment = params.votersCommitment;
        this.lnProvenWeight = params.lnProvenWeight;
        this.firstAttestedRound = params.firstAttestedRound;
        this.lastAttestedRound = params.lastAttestedRound;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProofMessage.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['b', this.blockHeadersCommitment],
            ['v', this.votersCommitment],
            ['P', this.lnProvenWeight],
            ['f', this.firstAttestedRound],
            ['l', this.lastAttestedRound],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProofMessage: ${data}`);
        }
        return new StateProofMessage({
            blockHeadersCommitment: data.get('b'),
            votersCommitment: data.get('v'),
            lnProvenWeight: data.get('P'),
            firstAttestedRound: data.get('f'),
            lastAttestedRound: data.get('l'),
        });
    }
    static fromMap(data) {
        return new StateProofMessage({
            blockHeadersCommitment: data.get('b'),
            votersCommitment: data.get('v'),
            lnProvenWeight: data.get('P'),
            firstAttestedRound: data.get('f'),
            lastAttestedRound: data.get('l'),
        });
    }
};
StateProofMessage$1.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'b', valueSchema: new ByteArraySchema() }, // blockHeadersCommitment
    { key: 'v', valueSchema: new ByteArraySchema() }, // votersCommitment
    { key: 'P', valueSchema: new Uint64Schema() }, // lnProvenWeight
    { key: 'f', valueSchema: new Uint64Schema() }, // firstAttestedRound
    { key: 'l', valueSchema: new Uint64Schema() }, // lastAttestedRound
]));

class HeartbeatProof {
    constructor(params) {
        this.sig = params.sig;
        this.pk = params.pk;
        this.pk2 = params.pk2;
        this.pk1Sig = params.pk1Sig;
        this.pk2Sig = params.pk2Sig;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return HeartbeatProof.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['s', this.sig],
            ['p', this.pk],
            ['p2', this.pk2],
            ['p1s', this.pk1Sig],
            ['p2s', this.pk2Sig],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded HeartbeatProof: ${data}`);
        }
        return new HeartbeatProof({
            sig: data.get('s'),
            pk: data.get('p'),
            pk2: data.get('p2'),
            pk1Sig: data.get('p1s'),
            pk2Sig: data.get('p2s'),
        });
    }
}
HeartbeatProof.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 's', // Sig
        valueSchema: new FixedLengthByteArraySchema(64),
    },
    {
        key: 'p', // PK
        valueSchema: new FixedLengthByteArraySchema(32),
    },
    {
        key: 'p2', // PK2
        valueSchema: new FixedLengthByteArraySchema(32),
    },
    {
        key: 'p1s', // PK1Sig
        valueSchema: new FixedLengthByteArraySchema(64),
    },
    {
        key: 'p2s', // PK2Sig
        valueSchema: new FixedLengthByteArraySchema(64),
    },
]));
class Heartbeat {
    constructor(params) {
        this.address = params.address;
        this.proof = params.proof;
        this.seed = params.seed;
        this.voteID = params.voteID;
        this.keyDilution = params.keyDilution;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Heartbeat.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['a', this.address],
            ['prf', this.proof.toEncodingData()],
            ['sd', this.seed],
            ['vid', this.voteID],
            ['kd', this.keyDilution],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Heartbeat: ${data}`);
        }
        return new Heartbeat({
            address: data.get('a'),
            proof: HeartbeatProof.fromEncodingData(data.get('prf')),
            seed: data.get('sd'),
            voteID: data.get('vid'),
            keyDilution: data.get('kd'),
        });
    }
}
Heartbeat.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'a', // HbAddress
        valueSchema: new AddressSchema(),
    },
    {
        key: 'prf', // HbProof
        valueSchema: HeartbeatProof.encodingSchema,
    },
    {
        key: 'sd', // HbSeed
        valueSchema: new ByteArraySchema(),
    },
    {
        key: 'vid', // HbVoteID
        valueSchema: new FixedLengthByteArraySchema(32),
    },
    {
        key: 'kd', // HbKeyDilution
        valueSchema: new Uint64Schema(),
    },
]));

const ALGORAND_TRANSACTION_LENGTH = 52;
const ALGORAND_TRANSACTION_LEASE_LENGTH = 32;
const NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it
const ASSET_METADATA_HASH_LENGTH = 32;
const KEYREG_VOTE_KEY_LENGTH = 32;
const KEYREG_SELECTION_KEY_LENGTH = 32;
const KEYREG_STATE_PROOF_KEY_LENGTH = 64;
const ALGORAND_TRANSACTION_GROUP_LENGTH = 32;
function uint8ArrayIsEmpty(input) {
    return input.every((value) => value === 0);
}
function getKeyregKey(input, inputName, length) {
    if (input == null) {
        return undefined;
    }
    let inputBytes;
    if (input instanceof Uint8Array) {
        inputBytes = input;
    }
    if (inputBytes == null || inputBytes.byteLength !== length) {
        throw Error(`${inputName} must be a ${length} byte Uint8Array`);
    }
    return inputBytes;
}
function ensureAddress(input) {
    if (input == null) {
        throw new Error('Address must not be null or undefined');
    }
    if (typeof input === 'string') {
        return Address.fromString(input);
    }
    if (input instanceof Address) {
        return input;
    }
    throw new Error(`Not an address: ${input}`);
}
function optionalAddress(input) {
    if (input == null) {
        return undefined;
    }
    let addr;
    if (input instanceof Address) {
        addr = input;
    }
    else if (typeof input === 'string') {
        addr = Address.fromString(input);
    }
    else {
        throw new Error(`Not an address: ${input}`);
    }
    if (uint8ArrayIsEmpty(addr.publicKey)) {
        // If it's the zero address, throw an error so that the user won't be surprised that this gets dropped
        throw new Error('Invalid use of the zero address. To omit this value, pass in undefined');
    }
    return addr;
}
function optionalUint8Array(input) {
    if (typeof input === 'undefined') {
        return undefined;
    }
    if (input instanceof Uint8Array) {
        return input;
    }
    throw new Error(`Not a Uint8Array: ${input}`);
}
function ensureUint8Array(input) {
    if (input instanceof Uint8Array) {
        return input;
    }
    throw new Error(`Not a Uint8Array: ${input}`);
}
function optionalUint64(input) {
    if (typeof input === 'undefined') {
        return undefined;
    }
    return ensureUint64(input);
}
function ensureBoolean(input) {
    if (input === true || input === false) {
        return input;
    }
    throw new Error(`Not a boolean: ${input}`);
}
function ensureArray(input) {
    if (Array.isArray(input)) {
        return input.slice();
    }
    throw new Error(`Not an array: ${input}`);
}
function optionalFixedLengthByteArray(input, length, name) {
    const bytes = optionalUint8Array(input);
    if (typeof bytes === 'undefined') {
        return undefined;
    }
    if (bytes.byteLength !== length) {
        throw new Error(`${name} must be ${length} bytes long, was ${bytes.byteLength}`);
    }
    if (uint8ArrayIsEmpty(bytes)) {
        // if contains all 0s, omit it
        return undefined;
    }
    return bytes;
}
function ensureBoxReference(input) {
    if (input != null && typeof input === 'object') {
        const { appIndex, name } = input;
        return {
            appIndex: ensureUint64(appIndex),
            name: ensureUint8Array(name),
        };
    }
    throw new Error(`Not a box reference: ${input}`);
}
const TX_TAG = new TextEncoder().encode('TX');
/**
 * Transaction enables construction of Algorand transactions
 * */
let Transaction$1 = class Transaction {
    constructor(params) {
        if (!isTransactionType(params.type)) {
            throw new Error(`Invalid transaction type: ${params.type}`);
        }
        // Common fields
        this.type = params.type; // verified above
        this.sender = ensureAddress(params.sender);
        this.note = ensureUint8Array(params.note ?? new Uint8Array());
        this.lease = optionalFixedLengthByteArray(params.lease, ALGORAND_TRANSACTION_LEASE_LENGTH, 'lease');
        this.rekeyTo = optionalAddress(params.rekeyTo);
        // Group
        this.group = undefined;
        // Suggested params fields
        this.firstValid = ensureUint64(params.suggestedParams.firstValid);
        this.lastValid = ensureUint64(params.suggestedParams.lastValid);
        if (params.suggestedParams.genesisID) {
            if (typeof params.suggestedParams.genesisID !== 'string') {
                throw new Error('Genesis ID must be a string if present');
            }
            this.genesisID = params.suggestedParams.genesisID;
        }
        this.genesisHash = optionalUint8Array(params.suggestedParams.genesisHash);
        // Fee is handled at the end
        const fieldsPresent = [];
        if (params.paymentParams)
            fieldsPresent.push(TransactionType.pay);
        if (params.keyregParams)
            fieldsPresent.push(TransactionType.keyreg);
        if (params.assetConfigParams)
            fieldsPresent.push(TransactionType.acfg);
        if (params.assetTransferParams)
            fieldsPresent.push(TransactionType.axfer);
        if (params.assetFreezeParams)
            fieldsPresent.push(TransactionType.afrz);
        if (params.appCallParams)
            fieldsPresent.push(TransactionType.appl);
        if (params.stateProofParams)
            fieldsPresent.push(TransactionType.stpf);
        if (params.heartbeatParams)
            fieldsPresent.push(TransactionType.hb);
        if (fieldsPresent.length !== 1) {
            throw new Error(`Transaction has wrong number of type fields present (${fieldsPresent.length}): ${fieldsPresent}`);
        }
        if (this.type !== fieldsPresent[0]) {
            throw new Error(`Transaction has type ${this.type} but fields present for ${fieldsPresent[0]}`);
        }
        if (params.paymentParams) {
            this.payment = {
                receiver: ensureAddress(params.paymentParams.receiver),
                amount: ensureUint64(params.paymentParams.amount),
                closeRemainderTo: optionalAddress(params.paymentParams.closeRemainderTo),
            };
        }
        if (params.keyregParams) {
            this.keyreg = {
                voteKey: getKeyregKey(params.keyregParams.voteKey, 'voteKey', KEYREG_VOTE_KEY_LENGTH),
                selectionKey: getKeyregKey(params.keyregParams.selectionKey, 'selectionKey', KEYREG_SELECTION_KEY_LENGTH),
                stateProofKey: getKeyregKey(params.keyregParams.stateProofKey, 'stateProofKey', KEYREG_STATE_PROOF_KEY_LENGTH),
                voteFirst: optionalUint64(params.keyregParams.voteFirst),
                voteLast: optionalUint64(params.keyregParams.voteLast),
                voteKeyDilution: optionalUint64(params.keyregParams.voteKeyDilution),
                nonParticipation: ensureBoolean(params.keyregParams.nonParticipation ?? false),
            };
            // Checking non-participation key registration
            if (this.keyreg.nonParticipation &&
                (this.keyreg.voteKey ||
                    this.keyreg.selectionKey ||
                    this.keyreg.stateProofKey ||
                    typeof this.keyreg.voteFirst !== 'undefined' ||
                    typeof this.keyreg.voteLast !== 'undefined' ||
                    typeof this.keyreg.voteKeyDilution !== 'undefined')) {
                throw new Error('nonParticipation is true but participation params are present.');
            }
            // Checking online key registration
            if (
            // If we are participating
            !this.keyreg.nonParticipation &&
                // And *ANY* participating fields are present
                (this.keyreg.voteKey ||
                    this.keyreg.selectionKey ||
                    this.keyreg.stateProofKey ||
                    typeof this.keyreg.voteFirst !== 'undefined' ||
                    typeof this.keyreg.voteLast !== 'undefined' ||
                    typeof this.keyreg.voteKeyDilution !== 'undefined') &&
                // Then *ALL* participating fields must be present (with an exception for stateProofKey,
                // which was introduced later so for backwards compatibility we don't require it)
                !(this.keyreg.voteKey &&
                    this.keyreg.selectionKey &&
                    typeof this.keyreg.voteFirst !== 'undefined' &&
                    typeof this.keyreg.voteLast !== 'undefined' &&
                    typeof this.keyreg.voteKeyDilution !== 'undefined')) {
                throw new Error(`Online key registration missing at least one of the following fields: voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution`);
            }
            // The last option is an offline key registration where all the fields
            // nonParticipation, voteKey, selectionKey, stateProofKey, voteFirst, voteLast, voteKeyDilution
            // are all undefined
        }
        if (params.assetConfigParams) {
            this.assetConfig = {
                assetIndex: ensureUint64(params.assetConfigParams.assetIndex ?? 0),
                total: ensureUint64(params.assetConfigParams.total ?? 0),
                decimals: ensureSafeUnsignedInteger(params.assetConfigParams.decimals ?? 0),
                defaultFrozen: ensureBoolean(params.assetConfigParams.defaultFrozen ?? false),
                manager: optionalAddress(params.assetConfigParams.manager),
                reserve: optionalAddress(params.assetConfigParams.reserve),
                freeze: optionalAddress(params.assetConfigParams.freeze),
                clawback: optionalAddress(params.assetConfigParams.clawback),
                unitName: params.assetConfigParams.unitName,
                assetName: params.assetConfigParams.assetName,
                assetURL: params.assetConfigParams.assetURL,
                assetMetadataHash: optionalFixedLengthByteArray(params.assetConfigParams.assetMetadataHash, ASSET_METADATA_HASH_LENGTH, 'assetMetadataHash'),
            };
        }
        if (params.assetTransferParams) {
            this.assetTransfer = {
                assetIndex: ensureUint64(params.assetTransferParams.assetIndex),
                amount: ensureUint64(params.assetTransferParams.amount),
                assetSender: optionalAddress(params.assetTransferParams.assetSender),
                receiver: ensureAddress(params.assetTransferParams.receiver),
                closeRemainderTo: optionalAddress(params.assetTransferParams.closeRemainderTo),
            };
        }
        if (params.assetFreezeParams) {
            this.assetFreeze = {
                assetIndex: ensureUint64(params.assetFreezeParams.assetIndex),
                freezeAccount: ensureAddress(params.assetFreezeParams.freezeTarget),
                frozen: ensureBoolean(params.assetFreezeParams.frozen),
            };
        }
        if (params.appCallParams) {
            const { onComplete } = params.appCallParams;
            if (!isOnApplicationComplete(onComplete)) {
                throw new Error(`Invalid onCompletion value: ${onComplete}`);
            }
            this.applicationCall = {
                appIndex: ensureUint64(params.appCallParams.appIndex),
                onComplete,
                numLocalInts: ensureSafeUnsignedInteger(params.appCallParams.numLocalInts ?? 0),
                numLocalByteSlices: ensureSafeUnsignedInteger(params.appCallParams.numLocalByteSlices ?? 0),
                numGlobalInts: ensureSafeUnsignedInteger(params.appCallParams.numGlobalInts ?? 0),
                numGlobalByteSlices: ensureSafeUnsignedInteger(params.appCallParams.numGlobalByteSlices ?? 0),
                extraPages: ensureSafeUnsignedInteger(params.appCallParams.extraPages ?? 0),
                approvalProgram: ensureUint8Array(params.appCallParams.approvalProgram ?? new Uint8Array()),
                clearProgram: ensureUint8Array(params.appCallParams.clearProgram ?? new Uint8Array()),
                appArgs: ensureArray(params.appCallParams.appArgs ?? []).map(ensureUint8Array),
                accounts: ensureArray(params.appCallParams.accounts ?? []).map(ensureAddress),
                foreignApps: ensureArray(params.appCallParams.foreignApps ?? []).map(ensureUint64),
                foreignAssets: ensureArray(params.appCallParams.foreignAssets ?? []).map(ensureUint64),
                boxes: ensureArray(params.appCallParams.boxes ?? []).map(ensureBoxReference),
            };
        }
        if (params.stateProofParams) {
            this.stateProof = {
                stateProofType: ensureSafeUnsignedInteger(params.stateProofParams.stateProofType ?? 0),
                stateProof: params.stateProofParams.stateProof,
                message: params.stateProofParams.message,
            };
        }
        if (params.heartbeatParams) {
            this.heartbeat = new Heartbeat({
                address: params.heartbeatParams.address,
                proof: params.heartbeatParams.proof,
                seed: params.heartbeatParams.seed,
                voteID: params.heartbeatParams.voteID,
                keyDilution: params.heartbeatParams.keyDilution,
            });
        }
        // Determine fee
        this.fee = ensureUint64(params.suggestedParams.fee);
        const feeDependsOnSize = !ensureBoolean(params.suggestedParams.flatFee ?? false);
        if (feeDependsOnSize) {
            const minFee = ensureUint64(params.suggestedParams.minFee);
            this.fee *= BigInt(this.estimateSize());
            // If suggested fee too small and will be rejected, set to min tx fee
            if (this.fee < minFee) {
                this.fee = minFee;
            }
        }
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Transaction.encodingSchema;
    }
    toEncodingData() {
        const data = new Map([
            ['type', this.type],
            ['fv', this.firstValid],
            ['lv', this.lastValid],
            ['snd', this.sender],
            ['gen', this.genesisID],
            ['gh', this.genesisHash],
            ['fee', this.fee],
            ['note', this.note],
            ['lx', this.lease],
            ['rekey', this.rekeyTo],
            ['grp', this.group],
        ]);
        if (this.payment) {
            data.set('amt', this.payment.amount);
            data.set('rcv', this.payment.receiver);
            data.set('close', this.payment.closeRemainderTo);
            return data;
        }
        if (this.keyreg) {
            data.set('votekey', this.keyreg.voteKey);
            data.set('selkey', this.keyreg.selectionKey);
            data.set('sprfkey', this.keyreg.stateProofKey);
            data.set('votefst', this.keyreg.voteFirst);
            data.set('votelst', this.keyreg.voteLast);
            data.set('votekd', this.keyreg.voteKeyDilution);
            data.set('nonpart', this.keyreg.nonParticipation);
            return data;
        }
        if (this.assetConfig) {
            data.set('caid', this.assetConfig.assetIndex);
            const assetParams = new Map([
                ['t', this.assetConfig.total],
                ['dc', this.assetConfig.decimals],
                ['df', this.assetConfig.defaultFrozen],
                ['m', this.assetConfig.manager],
                ['r', this.assetConfig.reserve],
                ['f', this.assetConfig.freeze],
                ['c', this.assetConfig.clawback],
                ['un', this.assetConfig.unitName],
                ['an', this.assetConfig.assetName],
                ['au', this.assetConfig.assetURL],
                ['am', this.assetConfig.assetMetadataHash],
            ]);
            data.set('apar', assetParams);
            return data;
        }
        if (this.assetTransfer) {
            data.set('xaid', this.assetTransfer.assetIndex);
            data.set('aamt', this.assetTransfer.amount);
            data.set('arcv', this.assetTransfer.receiver);
            data.set('aclose', this.assetTransfer.closeRemainderTo);
            data.set('asnd', this.assetTransfer.assetSender);
            return data;
        }
        if (this.assetFreeze) {
            data.set('faid', this.assetFreeze.assetIndex);
            data.set('afrz', this.assetFreeze.frozen);
            data.set('fadd', this.assetFreeze.freezeAccount);
            return data;
        }
        if (this.applicationCall) {
            data.set('apid', this.applicationCall.appIndex);
            data.set('apan', this.applicationCall.onComplete);
            data.set('apaa', this.applicationCall.appArgs);
            data.set('apat', this.applicationCall.accounts);
            data.set('apas', this.applicationCall.foreignAssets);
            data.set('apfa', this.applicationCall.foreignApps);
            data.set('apbx', boxReferencesToEncodingData(this.applicationCall.boxes, this.applicationCall.foreignApps, this.applicationCall.appIndex));
            data.set('apap', this.applicationCall.approvalProgram);
            data.set('apsu', this.applicationCall.clearProgram);
            data.set('apls', new Map([
                ['nui', this.applicationCall.numLocalInts],
                ['nbs', this.applicationCall.numLocalByteSlices],
            ]));
            data.set('apgs', new Map([
                ['nui', this.applicationCall.numGlobalInts],
                ['nbs', this.applicationCall.numGlobalByteSlices],
            ]));
            data.set('apep', this.applicationCall.extraPages);
            return data;
        }
        if (this.stateProof) {
            data.set('sptype', this.stateProof.stateProofType);
            data.set('sp', this.stateProof.stateProof
                ? this.stateProof.stateProof.toEncodingData()
                : undefined);
            data.set('spmsg', this.stateProof.message
                ? this.stateProof.message.toEncodingData()
                : undefined);
            return data;
        }
        if (this.heartbeat) {
            const heartbeat = new Heartbeat({
                address: this.heartbeat.address,
                proof: this.heartbeat.proof,
                seed: this.heartbeat.seed,
                voteID: this.heartbeat.voteID,
                keyDilution: this.heartbeat.keyDilution,
            });
            data.set('hb', heartbeat.toEncodingData());
            return data;
        }
        throw new Error(`Unexpected transaction type: ${this.type}`);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded logic sig account: ${data}`);
        }
        const suggestedParams = {
            minFee: BigInt(0),
            flatFee: true,
            fee: data.get('fee') ?? 0,
            firstValid: data.get('fv') ?? 0,
            lastValid: data.get('lv') ?? 0,
            genesisHash: data.get('gh'),
            genesisID: data.get('gen'),
        };
        const txnType = data.get('type');
        if (!isTransactionType(txnType)) {
            throw new Error(`Unrecognized transaction type: ${txnType}`);
        }
        const params = {
            type: txnType,
            sender: data.get('snd') ?? Address.zeroAddress(),
            note: data.get('note'),
            lease: data.get('lx'),
            suggestedParams,
        };
        if (data.get('rekey')) {
            params.rekeyTo = data.get('rekey');
        }
        if (params.type === TransactionType.pay) {
            const paymentParams = {
                amount: data.get('amt') ?? 0,
                receiver: data.get('rcv') ?? Address.zeroAddress(),
            };
            if (data.get('close')) {
                paymentParams.closeRemainderTo = data.get('close');
            }
            params.paymentParams = paymentParams;
        }
        else if (params.type === TransactionType.keyreg) {
            const keyregParams = {
                voteKey: data.get('votekey'),
                selectionKey: data.get('selkey'),
                stateProofKey: data.get('sprfkey'),
                voteFirst: data.get('votefst'),
                voteLast: data.get('votelst'),
                voteKeyDilution: data.get('votekd'),
                nonParticipation: data.get('nonpart'),
            };
            params.keyregParams = keyregParams;
        }
        else if (params.type === TransactionType.acfg) {
            const assetConfigParams = {
                assetIndex: data.get('caid'),
            };
            if (data.get('apar')) {
                const assetParams = data.get('apar');
                assetConfigParams.total = assetParams.get('t');
                assetConfigParams.decimals = assetParams.get('dc');
                assetConfigParams.defaultFrozen = assetParams.get('df');
                assetConfigParams.unitName = assetParams.get('un');
                assetConfigParams.assetName = assetParams.get('an');
                assetConfigParams.assetURL = assetParams.get('au');
                assetConfigParams.assetMetadataHash = assetParams.get('am');
                if (assetParams.get('m')) {
                    assetConfigParams.manager = assetParams.get('m');
                }
                if (assetParams.get('r')) {
                    assetConfigParams.reserve = assetParams.get('r');
                }
                if (assetParams.get('f')) {
                    assetConfigParams.freeze = assetParams.get('f');
                }
                if (assetParams.get('c')) {
                    assetConfigParams.clawback = assetParams.get('c');
                }
            }
            params.assetConfigParams = assetConfigParams;
        }
        else if (params.type === TransactionType.axfer) {
            const assetTransferParams = {
                assetIndex: data.get('xaid') ?? 0,
                amount: data.get('aamt') ?? 0,
                receiver: data.get('arcv') ?? Address.zeroAddress(),
            };
            if (data.get('aclose')) {
                assetTransferParams.closeRemainderTo = data.get('aclose');
            }
            if (data.get('asnd')) {
                assetTransferParams.assetSender = data.get('asnd');
            }
            params.assetTransferParams = assetTransferParams;
        }
        else if (params.type === TransactionType.afrz) {
            const assetFreezeParams = {
                assetIndex: data.get('faid') ?? 0,
                freezeTarget: data.get('fadd') ?? Address.zeroAddress(),
                frozen: data.get('afrz') ?? false,
            };
            params.assetFreezeParams = assetFreezeParams;
        }
        else if (params.type === TransactionType.appl) {
            const appCallParams = {
                appIndex: data.get('apid') ?? 0,
                onComplete: ensureSafeUnsignedInteger(data.get('apan') ?? 0),
                appArgs: data.get('apaa'),
                accounts: data.get('apat'),
                foreignAssets: data.get('apas'),
                foreignApps: data.get('apfa'),
                approvalProgram: data.get('apap'),
                clearProgram: data.get('apsu'),
                extraPages: data.get('apep'),
            };
            const localSchema = data.get('apls');
            if (localSchema) {
                appCallParams.numLocalInts = localSchema.get('nui');
                appCallParams.numLocalByteSlices = localSchema.get('nbs');
            }
            const globalSchema = data.get('apgs');
            if (globalSchema) {
                appCallParams.numGlobalInts = globalSchema.get('nui');
                appCallParams.numGlobalByteSlices = globalSchema.get('nbs');
            }
            const boxes = data.get('apbx');
            if (boxes) {
                appCallParams.boxes = boxes.map((box) => {
                    const index = ensureSafeUnsignedInteger(box.get('i') ?? 0);
                    const name = ensureUint8Array(box.get('n') ?? new Uint8Array());
                    if (index === 0) {
                        // We return 0 for the app ID so that it's guaranteed translateBoxReferences will
                        // translate the app index back to 0. If we instead returned the called app ID,
                        // translateBoxReferences would translate the app index to a nonzero value if the called
                        // app is also in the foreign app array.
                        return {
                            appIndex: 0,
                            name,
                        };
                    }
                    if (!appCallParams.foreignApps ||
                        index > appCallParams.foreignApps.length) {
                        throw new Error(`Cannot find foreign app index ${index} in ${appCallParams.foreignApps}`);
                    }
                    return {
                        appIndex: appCallParams.foreignApps[index - 1],
                        name,
                    };
                });
            }
            params.appCallParams = appCallParams;
        }
        else if (params.type === TransactionType.stpf) {
            const stateProofParams = {
                stateProofType: data.get('sptype'),
                stateProof: data.get('sp')
                    ? StateProof$2.fromEncodingData(data.get('sp'))
                    : undefined,
                message: data.get('spmsg')
                    ? StateProofMessage$1.fromEncodingData(data.get('spmsg'))
                    : undefined,
            };
            params.stateProofParams = stateProofParams;
        }
        else if (params.type === TransactionType.hb) {
            const heartbeat = Heartbeat.fromEncodingData(data.get('hb'));
            const heartbeatParams = {
                address: heartbeat.address,
                proof: heartbeat.proof,
                seed: heartbeat.seed,
                voteID: heartbeat.voteID,
                keyDilution: heartbeat.keyDilution,
            };
            params.heartbeatParams = heartbeatParams;
        }
        else {
            const exhaustiveCheck = params.type;
            throw new Error(`Unexpected transaction type: ${exhaustiveCheck}`);
        }
        const txn = new Transaction(params);
        if (data.get('grp')) {
            const group = ensureUint8Array(data.get('grp'));
            if (group.byteLength !== ALGORAND_TRANSACTION_GROUP_LENGTH) {
                throw new Error(`Invalid group length: ${group.byteLength}`);
            }
            txn.group = group;
        }
        return txn;
    }
    estimateSize() {
        return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;
    }
    bytesToSign() {
        const encodedMsg = this.toByte();
        return concatArrays(TX_TAG, encodedMsg);
    }
    toByte() {
        return encodeMsgpack(this);
    }
    // returns the raw signature
    rawSignTxn(sk) {
        const toBeSigned = this.bytesToSign();
        const sig = sign(toBeSigned, sk);
        return sig;
    }
    signTxn(sk) {
        // TODO: deprecate in favor of SignedTransaction class
        const keypair = keyPairFromSecretKey(sk);
        const signerAddr = new Address(keypair.publicKey);
        const sig = this.rawSignTxn(sk);
        return this.attachSignature(signerAddr, sig);
    }
    attachSignature(signerAddr, signature) {
        // TODO: deprecate in favor of SignedTransaction class
        if (!isValidSignatureLength(signature.length)) {
            throw new Error('Invalid signature length');
        }
        const sTxn = new Map([
            ['sig', signature],
            ['txn', this.toEncodingData()],
        ]);
        const signerAddrObj = ensureAddress(signerAddr);
        // add AuthAddr if signing with a different key than From indicates
        if (!this.sender.equals(signerAddrObj)) {
            sTxn.set('sgnr', signerAddrObj);
        }
        // This is a hack to avoid a circular reference with the SignedTransaction class
        const stxnSchema = new NamedMapSchema(allOmitEmpty([
            {
                key: 'txn',
                valueSchema: Transaction.encodingSchema,
            },
            {
                key: 'sig',
                valueSchema: new FixedLengthByteArraySchema(64),
            },
            {
                key: 'sgnr',
                valueSchema: new OptionalSchema(new AddressSchema()),
            },
        ]));
        return msgpackRawEncode(stxnSchema.prepareMsgpack(sTxn));
    }
    rawTxID() {
        const enMsg = this.toByte();
        const gh = concatArrays(TX_TAG, enMsg);
        return Uint8Array.from(genericHash(gh));
    }
    txID() {
        const hash = this.rawTxID();
        return base32.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);
    }
};
Transaction$1.encodingSchema = new NamedMapSchema(allOmitEmpty([
    // Common
    { key: 'type', valueSchema: new StringSchema() },
    { key: 'snd', valueSchema: new AddressSchema() },
    { key: 'lv', valueSchema: new Uint64Schema() },
    { key: 'gen', valueSchema: new OptionalSchema(new StringSchema()) },
    {
        key: 'gh',
        valueSchema: new OptionalSchema(new FixedLengthByteArraySchema(32)),
    },
    { key: 'fee', valueSchema: new Uint64Schema() },
    { key: 'fv', valueSchema: new Uint64Schema() },
    { key: 'note', valueSchema: new ByteArraySchema() },
    {
        key: 'lx',
        valueSchema: new OptionalSchema(new FixedLengthByteArraySchema(32)),
    },
    { key: 'rekey', valueSchema: new OptionalSchema(new AddressSchema()) },
    {
        key: 'grp',
        valueSchema: new OptionalSchema(new FixedLengthByteArraySchema(32)),
    },
    // We mark all top-level type-specific fields optional because they will not be present when
    // the transaction is not that type.
    // Payment
    { key: 'amt', valueSchema: new OptionalSchema(new Uint64Schema()) },
    { key: 'rcv', valueSchema: new OptionalSchema(new AddressSchema()) },
    { key: 'close', valueSchema: new OptionalSchema(new AddressSchema()) },
    // Keyreg
    {
        key: 'votekey',
        valueSchema: new OptionalSchema(new FixedLengthByteArraySchema(32)),
    },
    {
        key: 'selkey',
        valueSchema: new OptionalSchema(new FixedLengthByteArraySchema(32)),
    },
    {
        key: 'sprfkey',
        valueSchema: new OptionalSchema(new FixedLengthByteArraySchema(64)),
    },
    { key: 'votefst', valueSchema: new OptionalSchema(new Uint64Schema()) },
    { key: 'votelst', valueSchema: new OptionalSchema(new Uint64Schema()) },
    { key: 'votekd', valueSchema: new OptionalSchema(new Uint64Schema()) },
    { key: 'nonpart', valueSchema: new OptionalSchema(new BooleanSchema()) },
    // AssetConfig
    { key: 'caid', valueSchema: new OptionalSchema(new Uint64Schema()) },
    {
        key: 'apar',
        valueSchema: new OptionalSchema(new NamedMapSchema(allOmitEmpty([
            { key: 't', valueSchema: new Uint64Schema() },
            { key: 'dc', valueSchema: new Uint64Schema() },
            { key: 'df', valueSchema: new BooleanSchema() },
            {
                key: 'm',
                valueSchema: new OptionalSchema(new AddressSchema()),
            },
            {
                key: 'r',
                valueSchema: new OptionalSchema(new AddressSchema()),
            },
            {
                key: 'f',
                valueSchema: new OptionalSchema(new AddressSchema()),
            },
            {
                key: 'c',
                valueSchema: new OptionalSchema(new AddressSchema()),
            },
            {
                key: 'un',
                valueSchema: new OptionalSchema(new StringSchema()),
            },
            {
                key: 'an',
                valueSchema: new OptionalSchema(new StringSchema()),
            },
            {
                key: 'au',
                valueSchema: new OptionalSchema(new StringSchema()),
            },
            {
                key: 'am',
                valueSchema: new OptionalSchema(new FixedLengthByteArraySchema(32)),
            },
        ]))),
    },
    // AssetTransfer
    { key: 'xaid', valueSchema: new OptionalSchema(new Uint64Schema()) },
    { key: 'aamt', valueSchema: new OptionalSchema(new Uint64Schema()) },
    { key: 'arcv', valueSchema: new OptionalSchema(new AddressSchema()) },
    { key: 'aclose', valueSchema: new OptionalSchema(new AddressSchema()) },
    { key: 'asnd', valueSchema: new OptionalSchema(new AddressSchema()) },
    // AssetFreeze
    { key: 'faid', valueSchema: new OptionalSchema(new Uint64Schema()) },
    { key: 'afrz', valueSchema: new OptionalSchema(new BooleanSchema()) },
    { key: 'fadd', valueSchema: new OptionalSchema(new AddressSchema()) },
    // Application
    { key: 'apid', valueSchema: new OptionalSchema(new Uint64Schema()) },
    { key: 'apan', valueSchema: new OptionalSchema(new Uint64Schema()) },
    {
        key: 'apaa',
        valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),
    },
    {
        key: 'apat',
        valueSchema: new OptionalSchema(new ArraySchema(new AddressSchema())),
    },
    {
        key: 'apas',
        valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),
    },
    {
        key: 'apfa',
        valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),
    },
    {
        key: 'apbx',
        valueSchema: new OptionalSchema(new ArraySchema(new NamedMapSchema(allOmitEmpty([
            {
                key: 'i',
                valueSchema: new Uint64Schema(),
            },
            {
                key: 'n',
                valueSchema: new ByteArraySchema(),
            },
        ])))),
    },
    { key: 'apap', valueSchema: new OptionalSchema(new ByteArraySchema()) },
    { key: 'apsu', valueSchema: new OptionalSchema(new ByteArraySchema()) },
    {
        key: 'apls',
        valueSchema: new OptionalSchema(new NamedMapSchema(allOmitEmpty([
            {
                key: 'nui',
                valueSchema: new Uint64Schema(),
            },
            {
                key: 'nbs',
                valueSchema: new Uint64Schema(),
            },
        ]))),
    },
    {
        key: 'apgs',
        valueSchema: new OptionalSchema(new NamedMapSchema(allOmitEmpty([
            {
                key: 'nui',
                valueSchema: new Uint64Schema(),
            },
            {
                key: 'nbs',
                valueSchema: new Uint64Schema(),
            },
        ]))),
    },
    { key: 'apep', valueSchema: new OptionalSchema(new Uint64Schema()) },
    // StateProof
    { key: 'sptype', valueSchema: new OptionalSchema(new Uint64Schema()) },
    { key: 'sp', valueSchema: new OptionalSchema(StateProof$2.encodingSchema) },
    {
        key: 'spmsg',
        valueSchema: new OptionalSchema(StateProofMessage$1.encodingSchema),
    },
    // Heartbeat
    { key: 'hb', valueSchema: new OptionalSchema(Heartbeat.encodingSchema) },
]));
/**
 * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo
 * family of transactions, and converts it to a Buffer
 * @param transactionObject - the completed Transaction object
 */
function encodeUnsignedTransaction(transactionObject) {
    return encodeMsgpack(transactionObject);
}
/**
 * decodeUnsignedTransaction takes a Uint8Array (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object
 * @param transactionBuffer - the Uint8Array containing a transaction
 */
function decodeUnsignedTransaction(transactionBuffer) {
    return decodeMsgpack(transactionBuffer, Transaction$1);
}

// Convert "MultisigAddr" UTF-8 to byte array
const MULTISIG_PREIMG2ADDR_PREFIX = new Uint8Array([
    77, 117, 108, 116, 105, 115, 105, 103, 65, 100, 100, 114,
]);
const INVALID_MSIG_VERSION_ERROR_MSG = 'invalid multisig version';
const INVALID_MSIG_THRESHOLD_ERROR_MSG = 'bad multisig threshold';
const INVALID_MSIG_PK_ERROR_MSG = 'bad multisig public key - wrong length';
const UNEXPECTED_PK_LEN_ERROR_MSG = 'nacl public key length is not 32 bytes';
function pksFromAddresses(addrs) {
    return addrs.map((addr) => {
        if (typeof addr === 'string') {
            return Address.fromString(addr).publicKey;
        }
        return addr.publicKey;
    });
}
/**
 * fromMultisigPreImg takes multisig parameters and returns a 32 byte typed array public key,
 * representing an address that identifies the "exact group, version, and public keys" that are required for signing.
 * Hash("MultisigAddr" || version uint8 || threshold uint8 || PK1 || PK2 || ...)
 * Encoding this output yields a human readable address.
 * @param version - multisig version
 * @param threshold - multisig threshold
 * @param pks - array of typed array public keys
 */
function addressFromMultisigPreImg({ version, threshold, pks, }) {
    if (version !== 1 || version > 255 || version < 0) {
        // ^ a tad redundant, but in case in the future version != 1, still check for uint8
        throw new Error(INVALID_MSIG_VERSION_ERROR_MSG);
    }
    if (threshold === 0 ||
        pks.length === 0 ||
        threshold > pks.length ||
        threshold > 255) {
        throw new Error(INVALID_MSIG_THRESHOLD_ERROR_MSG);
    }
    const pkLen = ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH;
    if (pkLen !== PUBLIC_KEY_LENGTH) {
        throw new Error(UNEXPECTED_PK_LEN_ERROR_MSG);
    }
    const merged = new Uint8Array(MULTISIG_PREIMG2ADDR_PREFIX.length + 2 + pkLen * pks.length);
    merged.set(MULTISIG_PREIMG2ADDR_PREFIX, 0);
    merged.set([version], MULTISIG_PREIMG2ADDR_PREFIX.length);
    merged.set([threshold], MULTISIG_PREIMG2ADDR_PREFIX.length + 1);
    for (let i = 0; i < pks.length; i++) {
        if (pks[i].length !== pkLen) {
            throw new Error(INVALID_MSIG_PK_ERROR_MSG);
        }
        merged.set(pks[i], MULTISIG_PREIMG2ADDR_PREFIX.length + 2 + i * pkLen);
    }
    return new Address(Uint8Array.from(genericHash(merged)));
}
/**
 * fromMultisigPreImgAddrs takes multisig parameters and returns a human readable Algorand address.
 * This is equivalent to fromMultisigPreImg, but interfaces with encoded addresses.
 * @param version - multisig version
 * @param threshold - multisig threshold
 * @param addrs - array of encoded addresses
 */
function addressFromMultisigPreImgAddrs({ version, threshold, addrs, }) {
    const pks = pksFromAddresses(addrs);
    return addressFromMultisigPreImg({ version, threshold, pks });
}
function verifyMultisig(toBeVerified, msig, publicKey) {
    const version = msig.v;
    const threshold = msig.thr;
    const subsigs = msig.subsig;
    const pks = subsigs.map((subsig) => subsig.pk);
    if (msig.subsig.length < threshold) {
        return false;
    }
    let pk;
    try {
        pk = addressFromMultisigPreImg({ version, threshold, pks }).publicKey;
    }
    catch (e) {
        return false;
    }
    if (!arrayEqual(pk, publicKey)) {
        return false;
    }
    let counter = 0;
    for (const subsig of subsigs) {
        if (subsig.s !== undefined) {
            counter += 1;
        }
    }
    if (counter < threshold) {
        return false;
    }
    let verifiedCounter = 0;
    for (const subsig of subsigs) {
        if (subsig.s !== undefined) {
            if (verify(toBeVerified, subsig.s, subsig.pk)) {
                verifiedCounter += 1;
            }
        }
    }
    if (verifiedCounter < threshold) {
        return false;
    }
    return true;
}
/**
 * multisigAddress takes multisig metadata (preimage) and returns the corresponding human readable Algorand address.
 * @param version - multisig version
 * @param threshold - multisig threshold
 * @param addrs - list of Algorand addresses
 */
function multisigAddress({ version, threshold, addrs, }) {
    return addressFromMultisigPreImgAddrs({ version, threshold, addrs });
}

const ENCODED_SUBSIG_SCHEMA = new NamedMapSchema(allOmitEmpty([
    {
        key: 'pk',
        valueSchema: new FixedLengthByteArraySchema(32),
    },
    {
        key: 's',
        valueSchema: new OptionalSchema(new FixedLengthByteArraySchema(64)),
    },
]));
function encodedSubsigFromEncodingData(data) {
    if (!(data instanceof Map)) {
        throw new Error(`Invalid decoded EncodedSubsig: ${data}`);
    }
    const subsig = {
        pk: data.get('pk'),
    };
    if (data.get('s')) {
        subsig.s = data.get('s');
    }
    return subsig;
}
function encodedSubsigToEncodingData(subsig) {
    const data = new Map([['pk', subsig.pk]]);
    if (subsig.s) {
        data.set('s', subsig.s);
    }
    return data;
}
const ENCODED_MULTISIG_SCHEMA = new NamedMapSchema(allOmitEmpty([
    {
        key: 'v',
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'thr',
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'subsig',
        valueSchema: new ArraySchema(ENCODED_SUBSIG_SCHEMA),
    },
]));
function encodedMultiSigFromEncodingData(data) {
    if (!(data instanceof Map)) {
        throw new Error(`Invalid decoded EncodedMultiSig: ${data}`);
    }
    return {
        v: ensureSafeUnsignedInteger(data.get('v')),
        thr: ensureSafeUnsignedInteger(data.get('thr')),
        subsig: data.get('subsig').map(encodedSubsigFromEncodingData),
    };
}
function encodedMultiSigToEncodingData(msig) {
    return new Map([
        ['v', msig.v],
        ['thr', msig.thr],
        ['subsig', msig.subsig.map(encodedSubsigToEncodingData)],
    ]);
}

// base64regex is the regex to test for base64 strings
const base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
/** sanityCheckProgram performs heuristic program validation:
 * check if passed in bytes are Algorand address or is B64 encoded, rather than Teal bytes
 *
 * @param program - Program bytes to check
 */
function sanityCheckProgram(program) {
    if (!program || program.length === 0)
        throw new Error('empty program');
    const lineBreakOrd = '\n'.charCodeAt(0);
    const blankSpaceOrd = ' '.charCodeAt(0);
    const tildeOrd = '~'.charCodeAt(0);
    const isPrintable = (x) => blankSpaceOrd <= x && x <= tildeOrd;
    const isAsciiPrintable = program.every((x) => x === lineBreakOrd || isPrintable(x));
    if (isAsciiPrintable) {
        const programStr = new TextDecoder().decode(program);
        if (isValidAddress(programStr))
            throw new Error('requesting program bytes, get Algorand address');
        if (base64regex.test(programStr))
            throw new Error('program should not be b64 encoded');
        throw new Error('program bytes are all ASCII printable characters, not looking like Teal byte code');
    }
}
const programTag = new TextEncoder().encode('Program');
/**
 LogicSig implementation

 LogicSig cannot sign transactions in all cases.  Instead, use LogicSigAccount as a safe, general purpose signing mechanism.  Since LogicSig does not track the provided signature's public key, LogicSig cannot sign transactions when delegated to a non-multisig account _and_ the sender is not the delegating account.
 */
class LogicSig {
    constructor(program, programArgs) {
        if (programArgs &&
            (!Array.isArray(programArgs) ||
                !programArgs.every((arg) => arg.constructor === Uint8Array))) {
            throw new TypeError('Invalid arguments');
        }
        let args = [];
        if (programArgs != null)
            args = programArgs.map((arg) => new Uint8Array(arg));
        sanityCheckProgram(program);
        this.logic = program;
        this.args = args;
        this.sig = undefined;
        this.msig = undefined;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return LogicSig.encodingSchema;
    }
    toEncodingData() {
        const data = new Map([
            ['l', this.logic],
            ['arg', this.args],
            ['sig', this.sig],
        ]);
        if (this.msig) {
            data.set('msig', encodedMultiSigToEncodingData(this.msig));
        }
        return data;
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded logic sig: ${data}`);
        }
        const lsig = new LogicSig(data.get('l'), data.get('arg'));
        lsig.sig = data.get('sig');
        if (data.get('msig')) {
            lsig.msig = encodedMultiSigFromEncodingData(data.get('msig'));
        }
        return lsig;
    }
    /**
     * Performs signature verification
     * @param publicKey - Verification key (derived from sender address or escrow address)
     */
    verify(publicKey) {
        if (this.sig && this.msig) {
            return false;
        }
        try {
            sanityCheckProgram(this.logic);
        }
        catch (e) {
            return false;
        }
        const toBeSigned = concatArrays(programTag, this.logic);
        if (!this.sig && !this.msig) {
            const hash = genericHash(toBeSigned);
            return arrayEqual(hash, publicKey);
        }
        if (this.sig) {
            return verify(toBeSigned, this.sig, publicKey);
        }
        return verifyMultisig(toBeSigned, this.msig, publicKey);
    }
    /**
     * Compute hash of the logic sig program (that is the same as escrow account address) as string address
     * @returns String representation of the address
     */
    address() {
        const toBeSigned = concatArrays(programTag, this.logic);
        const hash = genericHash(toBeSigned);
        return new Address(Uint8Array.from(hash));
    }
    /**
     * Creates signature (if no msig provided) or multi signature otherwise
     * @param secretKey - Secret key to sign with
     * @param msig - Multisig account as \{version, threshold, addrs\}
     */
    sign(secretKey, msig) {
        if (msig == null) {
            this.sig = this.signProgram(secretKey);
        }
        else {
            const subsigs = pksFromAddresses(msig.addrs).map((pk) => ({ pk }));
            this.msig = {
                v: msig.version,
                thr: msig.threshold,
                subsig: subsigs,
            };
            const [sig, index] = this.singleSignMultisig(secretKey, this.msig);
            this.msig.subsig[index].s = sig;
        }
    }
    /**
     * Appends a signature to multi signature
     * @param secretKey - Secret key to sign with
     */
    appendToMultisig(secretKey) {
        if (this.msig === undefined) {
            throw new Error('no multisig present');
        }
        const [sig, index] = this.singleSignMultisig(secretKey, this.msig);
        this.msig.subsig[index].s = sig;
    }
    signProgram(secretKey) {
        const toBeSigned = concatArrays(programTag, this.logic);
        const sig = sign(toBeSigned, secretKey);
        return sig;
    }
    singleSignMultisig(secretKey, msig) {
        let index = -1;
        const myPk = keyPairFromSecretKey(secretKey).publicKey;
        for (let i = 0; i < msig.subsig.length; i++) {
            const { pk } = msig.subsig[i];
            if (arrayEqual(pk, myPk)) {
                index = i;
                break;
            }
        }
        if (index === -1) {
            throw new Error('invalid secret key');
        }
        const sig = this.signProgram(secretKey);
        return [sig, index];
    }
    toByte() {
        return encodeMsgpack(this);
    }
    static fromByte(encoded) {
        return decodeMsgpack(encoded, LogicSig);
    }
}
LogicSig.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'l',
        valueSchema: new ByteArraySchema(),
    },
    {
        key: 'arg',
        valueSchema: new ArraySchema(new ByteArraySchema()),
    },
    {
        key: 'sig',
        valueSchema: new OptionalSchema(new FixedLengthByteArraySchema(64)),
    },
    {
        key: 'msig',
        valueSchema: new OptionalSchema(ENCODED_MULTISIG_SCHEMA),
    },
]));
/**
 * Represents an account that can sign with a LogicSig program.
 */
class LogicSigAccount {
    /**
     * Create a new LogicSigAccount. By default this will create an escrow
     * LogicSig account. Call `sign` or `signMultisig` on the newly created
     * LogicSigAccount to make it a delegated account.
     *
     * @param program - The compiled TEAL program which contains the logic for
     *   this LogicSig.
     * @param args - An optional array of arguments for the program.
     */
    constructor(program, args) {
        this.lsig = new LogicSig(program, args);
        this.sigkey = undefined;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return LogicSigAccount.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['lsig', this.lsig.toEncodingData()],
            ['sigkey', this.sigkey],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded logic sig account: ${data}`);
        }
        const value = data;
        const lsig = LogicSig.fromEncodingData(value.get('lsig'));
        const lsigAccount = new LogicSigAccount(lsig.logic, lsig.args);
        lsigAccount.lsig = lsig; // Restore other properties of the lsig
        lsigAccount.sigkey = value.get('sigkey');
        return lsigAccount;
    }
    /**
     * Encode this object into msgpack.
     */
    toByte() {
        return encodeMsgpack(this);
    }
    /**
     * Decode a msgpack object into a LogicSigAccount.
     * @param encoded - The encoded LogicSigAccount.
     */
    static fromByte(encoded) {
        return decodeMsgpack(encoded, LogicSigAccount);
    }
    /**
     * Check if this LogicSigAccount has been delegated to another account with a
     * signature.
     *
     * Note this function only checks for the presence of a delegation signature.
     * To verify the delegation signature, use `verify`.
     */
    isDelegated() {
        return !!(this.lsig.sig || this.lsig.msig);
    }
    /**
     * Verifies this LogicSig's program and signatures.
     * @returns true if and only if the LogicSig program and signatures are valid.
     */
    verify() {
        const addr = this.address();
        return this.lsig.verify(addr.publicKey);
    }
    /**
     * Get the address of this LogicSigAccount.
     *
     * If the LogicSig is delegated to another account, this will return the
     * address of that account.
     *
     * If the LogicSig is not delegated to another account, this will return an
     *  escrow address that is the hash of the LogicSig's program code.
     */
    address() {
        if (this.lsig.sig && this.lsig.msig) {
            throw new Error('LogicSig has too many signatures. At most one of sig or msig may be present');
        }
        if (this.lsig.sig) {
            if (!this.sigkey) {
                throw new Error('Signing key for delegated account is missing');
            }
            return new Address(this.sigkey);
        }
        if (this.lsig.msig) {
            const msigMetadata = {
                version: this.lsig.msig.v,
                threshold: this.lsig.msig.thr,
                pks: this.lsig.msig.subsig.map((subsig) => subsig.pk),
            };
            return addressFromMultisigPreImg(msigMetadata);
        }
        return this.lsig.address();
    }
    /**
     * Turns this LogicSigAccount into a delegated LogicSig. This type of LogicSig
     * has the authority to sign transactions on behalf of another account, called
     * the delegating account. Use this function if the delegating account is a
     * multisig account.
     *
     * @param msig - The multisig delegating account
     * @param secretKey - The secret key of one of the members of the delegating
     *   multisig account. Use `appendToMultisig` to add additional signatures
     *   from other members.
     */
    signMultisig(msig, secretKey) {
        this.lsig.sign(secretKey, msig);
    }
    /**
     * Adds an additional signature from a member of the delegating multisig
     * account.
     *
     * @param secretKey - The secret key of one of the members of the delegating
     *   multisig account.
     */
    appendToMultisig(secretKey) {
        this.lsig.appendToMultisig(secretKey);
    }
    /**
     * Turns this LogicSigAccount into a delegated LogicSig. This type of LogicSig
     * has the authority to sign transactions on behalf of another account, called
     * the delegating account. If the delegating account is a multisig account,
     * use `signMultisig` instead.
     *
     * @param secretKey - The secret key of the delegating account.
     */
    sign(secretKey) {
        this.lsig.sign(secretKey);
        this.sigkey = keyPairFromSecretKey(secretKey).publicKey;
    }
}
LogicSigAccount.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'lsig',
        valueSchema: LogicSig.encodingSchema,
    },
    {
        key: 'sigkey',
        valueSchema: new OptionalSchema(new FixedLengthByteArraySchema(32)),
    },
]));
/**
 * logicSigFromByte accepts encoded logic sig bytes and attempts to call logicsig.fromByte on it,
 * returning the result
 */
function logicSigFromByte(encoded) {
    return decodeMsgpack(encoded, LogicSig);
}
const SIGN_PROGRAM_DATA_PREFIX = new TextEncoder().encode('ProgData');
/**
 * tealSign creates a signature compatible with ed25519verify opcode from program hash
 * @param sk - Uint8Array with secret key
 * @param data - Uint8Array with data to sign
 * @param programHash - string representation of teal program hash (= contract address for LogicSigs)
 */
function tealSign(sk, data, programHash) {
    const programAddr = typeof programHash === 'string'
        ? Address.fromString(programHash)
        : programHash;
    const parts = concatArrays(programAddr.publicKey, data);
    const toBeSigned = concatArrays(SIGN_PROGRAM_DATA_PREFIX, parts);
    return sign(toBeSigned, sk);
}
/**
 * verifyTealSign verifies a signature as would the ed25519verify opcode
 * @param data - Uint8Array with original signed data
 * @param programHash - string representation of teal program hash (= contract address for LogicSigs)
 * @param sig - uint8array with the signature to verify (produced by tealSign/tealSignFromProgram)
 * @param pk - uint8array with public key to verify against
 */
function verifyTealSign(data, programHash, sig, pk) {
    const programAddr = typeof programHash === 'string'
        ? Address.fromString(programHash)
        : programHash;
    const parts = concatArrays(programAddr.publicKey, data);
    const toBeSigned = concatArrays(SIGN_PROGRAM_DATA_PREFIX, parts);
    return verify(toBeSigned, sig, pk);
}
/**
 * tealSignFromProgram creates a signature compatible with ed25519verify opcode from raw program bytes
 * @param sk - uint8array with secret key
 * @param data - Uint8Array with data to sign
 * @param program - Uint8Array with teal program
 */
function tealSignFromProgram(sk, data, program) {
    const lsig = new LogicSig(program);
    const contractAddress = lsig.address();
    return tealSign(sk, data, contractAddress);
}

class SignedTransaction {
    constructor({ txn, sig, msig, lsig, sgnr, }) {
        this.txn = txn;
        this.sig = sig;
        this.msig = msig;
        this.lsig = lsig;
        this.sgnr = sgnr;
        let numberOfSigs = 0;
        if (sig)
            numberOfSigs += 1;
        if (msig)
            numberOfSigs += 1;
        if (lsig)
            numberOfSigs += 1;
        if (numberOfSigs > 1) {
            throw new Error(`SignedTransaction must not have more than 1 signature. Got ${numberOfSigs}`);
        }
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SignedTransaction.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['txn', this.txn.toEncodingData()],
            ['sig', this.sig],
            [
                'msig',
                this.msig ? encodedMultiSigToEncodingData(this.msig) : undefined,
            ],
            ['lsig', this.lsig ? this.lsig.toEncodingData() : undefined],
            ['sgnr', this.sgnr],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SignedTransaction: ${data}`);
        }
        return new SignedTransaction({
            txn: Transaction$1.fromEncodingData(data.get('txn')),
            sig: data.get('sig'),
            msig: data.get('msig')
                ? encodedMultiSigFromEncodingData(data.get('msig'))
                : undefined,
            lsig: data.get('lsig')
                ? LogicSig.fromEncodingData(data.get('lsig'))
                : undefined,
            sgnr: data.get('sgnr'),
        });
    }
}
SignedTransaction.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'txn',
        valueSchema: Transaction$1.encodingSchema,
    },
    {
        key: 'sig',
        valueSchema: new OptionalSchema(new FixedLengthByteArraySchema(64)),
    },
    {
        key: 'msig',
        valueSchema: new OptionalSchema(ENCODED_MULTISIG_SCHEMA),
    },
    {
        key: 'lsig',
        valueSchema: new OptionalSchema(LogicSig.encodingSchema),
    },
    {
        key: 'sgnr',
        valueSchema: new OptionalSchema(new AddressSchema()),
    },
]));
/**
 * decodeSignedTransaction takes a Uint8Array (from transaction.signTxn) and converts it to an object
 * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)
 * @param transactionBuffer - the Uint8Array containing a transaction
 * @returns containing a Transaction, the signature, and possibly an auth-addr field
 */
function decodeSignedTransaction(transactionBuffer) {
    return decodeMsgpack(transactionBuffer, SignedTransaction);
}
/**
 * encodeUnsignedSimulateTransaction takes a txnBuilder.Transaction object,
 * converts it into a SignedTransaction-like object, and converts it to a Buffer.
 *
 * Note: this function should only be used to simulate unsigned transactions.
 *
 * @param txn - Transaction object to simulate.
 */
function encodeUnsignedSimulateTransaction(txn) {
    const stxn = new SignedTransaction({ txn });
    return encodeMsgpack(stxn);
}

/**
 * StateProofTrackingData tracks the status of state proofs.
 */
class StateProofTrackingData {
    constructor(params) {
        this.stateProofVotersCommitment = params.stateProofVotersCommitment;
        this.stateProofOnlineTotalWeight = params.stateProofOnlineTotalWeight;
        this.stateProofNextRound = params.stateProofNextRound;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProofTrackingData.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['v', this.stateProofVotersCommitment],
            ['t', this.stateProofOnlineTotalWeight],
            ['n', this.stateProofNextRound],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProofTrackingData: ${data}`);
        }
        return new StateProofTrackingData({
            stateProofVotersCommitment: data.get('v'),
            stateProofOnlineTotalWeight: data.get('t'),
            stateProofNextRound: data.get('n'),
        });
    }
}
StateProofTrackingData.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'v', // stateProofVotersCommitment
        valueSchema: new ByteArraySchema(),
    },
    {
        key: 't', // stateProofOnlineTotalWeight
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'n', // stateProofNextRound
        valueSchema: new Uint64Schema(),
    },
]));
/**
 * TxnCommitments represents the commitments computed from the transactions in the block.
 * It contains multiple commitments based on different algorithms and hash functions, to support
 * different use cases.
 */
class TxnCommitments {
    constructor(params) {
        this.nativeSha512_256Commitment = params.nativeSha512_256Commitment;
        this.sha256Commitment = params.sha256Commitment;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TxnCommitments.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['txn', this.nativeSha512_256Commitment],
            ['txn256', this.sha256Commitment],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TxnCommitments: ${data}`);
        }
        return new TxnCommitments({
            nativeSha512_256Commitment: data.get('txn'),
            sha256Commitment: data.get('txn256'),
        });
    }
}
TxnCommitments.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'txn', // nativeSha512_256Commitment
        valueSchema: new FixedLengthByteArraySchema(32),
    },
    {
        key: 'txn256', // sha256Commitment
        valueSchema: new FixedLengthByteArraySchema(32),
    },
]));
/**
 * RewardsState represents the global parameters controlling the rate at which accounts accrue rewards.
 */
class RewardState {
    constructor(params) {
        this.feeSink = params.feeSink;
        this.rewardsPool = params.rewardsPool;
        this.rewardsLevel = params.rewardsLevel;
        this.rewardsRate = params.rewardsRate;
        this.rewardsResidue = params.rewardsResidue;
        this.rewardsRecalculationRound = params.rewardsRecalculationRound;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return RewardState.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['fees', this.feeSink],
            ['rwd', this.rewardsPool],
            ['earn', this.rewardsLevel],
            ['rate', this.rewardsRate],
            ['frac', this.rewardsResidue],
            ['rwcalr', this.rewardsRecalculationRound],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded RewardState: ${data}`);
        }
        return new RewardState({
            feeSink: data.get('fees'),
            rewardsPool: data.get('rwd'),
            rewardsLevel: data.get('earn'),
            rewardsRate: data.get('rate'),
            rewardsResidue: data.get('frac'),
            rewardsRecalculationRound: data.get('rwcalr'),
        });
    }
}
RewardState.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'fees', // feeSink
        valueSchema: new AddressSchema(),
    },
    {
        key: 'rwd', // rewardsPool
        valueSchema: new AddressSchema(),
    },
    {
        key: 'earn', // rewardsLevel
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'rate', // rewardsRate
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'frac', // rewardsResidue
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'rwcalr', // rewardsRecalculationRound
        valueSchema: new Uint64Schema(),
    },
]));
/**
 * UpgradeState tracks the protocol upgrade state machine.  It is, strictly speaking, computable from
 * the history of all UpgradeVotes but we keep it in the block for explicitness and convenience
 * (instead of materializing it separately, like balances).
 */
class UpgradeState {
    constructor(params) {
        this.currentProtocol = params.currentProtocol;
        this.nextProtocol = params.nextProtocol;
        this.nextProtocolApprovals = params.nextProtocolApprovals;
        this.nextProtocolVoteBefore = params.nextProtocolVoteBefore;
        this.nextProtocolSwitchOn = params.nextProtocolSwitchOn;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return UpgradeState.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['proto', this.currentProtocol],
            ['nextproto', this.nextProtocol],
            ['nextyes', this.nextProtocolApprovals],
            ['nextbefore', this.nextProtocolVoteBefore],
            ['nextswitch', this.nextProtocolSwitchOn],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded UpgradeState: ${data}`);
        }
        return new UpgradeState({
            currentProtocol: data.get('proto'),
            nextProtocol: data.get('nextproto'),
            nextProtocolApprovals: data.get('nextyes'),
            nextProtocolVoteBefore: data.get('nextbefore'),
            nextProtocolSwitchOn: data.get('nextswitch'),
        });
    }
}
UpgradeState.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'proto', // currentProtocol
        valueSchema: new StringSchema(),
    },
    {
        key: 'nextproto', // nextProtocol
        valueSchema: new StringSchema(),
    },
    {
        key: 'nextyes', // nextProtocolApprovals
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'nextbefore', // nextProtocolVoteBefore
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'nextswitch', // nextProtocolSwitchOn
        valueSchema: new Uint64Schema(),
    },
]));
/**
 * UpgradeVote represents the vote of the block proposer with respect to protocol upgrades.
 */
class UpgradeVote {
    constructor(params) {
        this.upgradePropose = params.upgradePropose;
        this.upgradeDelay = params.upgradeDelay;
        this.upgradeApprove = params.upgradeApprove;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return UpgradeVote.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['upgradeprop', this.upgradePropose],
            ['upgradedelay', this.upgradeDelay],
            ['upgradeyes', this.upgradeApprove],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded UpgradeVote: ${data}`);
        }
        return new UpgradeVote({
            upgradePropose: data.get('upgradeprop'),
            upgradeDelay: data.get('upgradedelay'),
            upgradeApprove: data.get('upgradeyes'),
        });
    }
}
UpgradeVote.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'upgradeprop', // upgradePropose
        valueSchema: new StringSchema(),
    },
    {
        key: 'upgradedelay', // upgradeDelay
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'upgradeyes', // upgradeApprove
        valueSchema: new BooleanSchema(),
    },
]));
/**
 * ParticipationUpdates represents participation account data that needs to be checked/acted on by
 * the network
 */
let ParticipationUpdates$1 = class ParticipationUpdates {
    constructor(params) {
        this.expiredParticipationAccounts = params.expiredParticipationAccounts;
        this.absentParticipationAccounts = params.absentParticipationAccounts;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ParticipationUpdates.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['partupdrmv', this.expiredParticipationAccounts],
            ['partupdabs', this.absentParticipationAccounts],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ParticipationUpdates: ${data}`);
        }
        return new ParticipationUpdates({
            expiredParticipationAccounts: data.get('partupdrmv'),
            absentParticipationAccounts: data.get('partupdabs'),
        });
    }
};
ParticipationUpdates$1.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'partupdrmv', // expiredParticipationAccounts
        valueSchema: new ArraySchema(new AddressSchema()),
    },
    {
        key: 'partupdabs', // absentParticipationAccounts
        valueSchema: new ArraySchema(new AddressSchema()),
    },
]));
/**
 * Represents the metadata and state of a block.
 *
 * For more information, refer to: https://github.com/algorand/go-algorand/blob/master/data/bookkeeping/block.go
 */
class BlockHeader {
    constructor(params) {
        this.round = params.round;
        this.branch = params.branch;
        this.seed = params.seed;
        this.txnCommitments = params.txnCommitments;
        this.timestamp = params.timestamp;
        this.genesisID = params.genesisID;
        this.genesisHash = params.genesisHash;
        this.proposer = params.proposer;
        this.feesCollected = params.feesCollected;
        this.bonus = params.bonus;
        this.proposerPayout = params.proposerPayout;
        this.rewardState = params.rewardState;
        this.upgradeState = params.upgradeState;
        this.upgradeVote = params.upgradeVote;
        this.txnCounter = params.txnCounter;
        this.stateproofTracking = params.stateproofTracking;
        this.participationUpdates = params.participationUpdates;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BlockHeader.encodingSchema;
    }
    toEncodingData() {
        const data = new Map([
            ['rnd', this.round],
            ['prev', this.branch],
            ['seed', this.seed],
            ['ts', this.timestamp],
            ['gen', this.genesisID],
            ['gh', this.genesisHash],
            ['prp', this.proposer],
            ['fc', this.feesCollected],
            ['bi', this.bonus],
            ['pp', this.proposerPayout],
            ['tc', this.txnCounter],
            [
                'spt',
                convertMap(this.stateproofTracking, (key, value) => [
                    key,
                    value.toEncodingData(),
                ]),
            ],
        ]);
        return combineMaps(data, this.txnCommitments.toEncodingData(), this.rewardState.toEncodingData(), this.upgradeState.toEncodingData(), this.upgradeVote.toEncodingData(), this.participationUpdates.toEncodingData());
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BlockHeader: ${data}`);
        }
        return new BlockHeader({
            round: data.get('rnd'),
            branch: data.get('prev'),
            seed: data.get('seed'),
            txnCommitments: TxnCommitments.fromEncodingData(data),
            timestamp: data.get('ts'),
            genesisID: data.get('gen'),
            genesisHash: data.get('gh'),
            proposer: data.get('prp'),
            feesCollected: data.get('fc'),
            bonus: data.get('bi'),
            proposerPayout: data.get('pp'),
            rewardState: RewardState.fromEncodingData(data),
            upgradeState: UpgradeState.fromEncodingData(data),
            upgradeVote: UpgradeVote.fromEncodingData(data),
            txnCounter: data.get('tc'),
            stateproofTracking: convertMap(data.get('spt'), (key, value) => [
                Number(key),
                StateProofTrackingData.fromEncodingData(value),
            ]),
            participationUpdates: ParticipationUpdates$1.fromEncodingData(data),
        });
    }
}
BlockHeader.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'rnd', // round
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'prev', // branch
        valueSchema: new BlockHashSchema(),
    },
    {
        key: 'seed', // seed
        valueSchema: new ByteArraySchema(),
    },
    {
        key: '',
        valueSchema: TxnCommitments.encodingSchema,
        embedded: true,
    },
    {
        key: 'ts', // timestamp
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'gen', // genesisID
        valueSchema: new StringSchema(),
    },
    {
        key: 'gh', // genesisHash
        valueSchema: new FixedLengthByteArraySchema(32),
    },
    {
        key: 'prp', // proposer
        valueSchema: new AddressSchema(),
    },
    {
        key: 'fc', // feesCollected
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'bi', // bonus
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'pp', // proposerPayout
        valueSchema: new Uint64Schema(),
    },
    {
        key: '',
        valueSchema: RewardState.encodingSchema,
        embedded: true,
    },
    {
        key: '',
        valueSchema: UpgradeState.encodingSchema,
        embedded: true,
    },
    {
        key: '',
        valueSchema: UpgradeVote.encodingSchema,
        embedded: true,
    },
    {
        key: 'tc', // txnCounter
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'spt', // stateproofTracking
        valueSchema: new Uint64MapSchema(StateProofTrackingData.encodingSchema),
    },
    {
        key: '',
        valueSchema: ParticipationUpdates$1.encodingSchema,
        embedded: true,
    },
]));
class ValueDelta {
    constructor(params) {
        this.action = params.action;
        this.bytes = params.bytes;
        this.uint = params.uint;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ValueDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['at', this.action],
            ['bs', this.bytes],
            ['ui', this.uint],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ValueDelta: ${data}`);
        }
        return new ValueDelta({
            action: Number(data.get('at')),
            bytes: data.get('bs'),
            uint: data.get('ui'),
        });
    }
}
ValueDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'at', // action
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'bs', // bytes
        valueSchema: new SpecialCaseBinaryStringSchema(),
    },
    {
        key: 'ui', // uint
        valueSchema: new Uint64Schema(),
    },
]));
let EvalDelta$2 = class EvalDelta {
    static get encodingSchema() {
        // This is declared like this in order to break the circular dependency of
        // SignedTxnWithAD -> ApplyData -> EvalDelta -> SignedTxnWithAD
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries(...allOmitEmpty([
                {
                    key: 'gd', // globalDelta
                    valueSchema: new OptionalSchema(new SpecialCaseBinaryStringMapSchema(ValueDelta.encodingSchema)),
                },
                {
                    key: 'ld', // localDeltas
                    valueSchema: new OptionalSchema(new Uint64MapSchema(new SpecialCaseBinaryStringMapSchema(ValueDelta.encodingSchema))),
                },
                {
                    key: 'sa', // sharedAccts
                    valueSchema: new OptionalSchema(new ArraySchema(new AddressSchema())),
                },
                {
                    key: 'lg', // logs
                    valueSchema: new OptionalSchema(new ArraySchema(new SpecialCaseBinaryStringSchema())),
                },
                {
                    key: 'itx', // innerTxns
                    valueSchema: new OptionalSchema(
                    // eslint-disable-next-line no-use-before-define
                    new ArraySchema(SignedTxnWithAD.encodingSchema)),
                },
            ]));
        }
        return this.encodingSchemaValue;
    }
    constructor(params) {
        this.globalDelta = params.globalDelta ?? new Map();
        this.localDeltas =
            params.localDeltas ?? new Map();
        this.sharedAccts = params.sharedAccts ?? [];
        this.logs = params.logs ?? [];
        this.innerTxns = params.innerTxns ?? [];
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return EvalDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'gd',
                convertMap(this.globalDelta, (key, value) => [
                    key,
                    value.toEncodingData(),
                ]),
            ],
            [
                'ld',
                convertMap(this.localDeltas, (key, value) => [
                    key,
                    convertMap(value, (k, v) => [k, v.toEncodingData()]),
                ]),
            ],
            ['sa', this.sharedAccts],
            ['lg', this.logs],
            ['itx', this.innerTxns.map((t) => t.toEncodingData())],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded EvalDelta: ${data}`);
        }
        return new EvalDelta({
            globalDelta: data.get('gd')
                ? convertMap(data.get('gd'), (key, value) => [key, ValueDelta.fromEncodingData(value)])
                : undefined,
            localDeltas: data.get('ld')
                ? convertMap(data.get('ld'), (key, value) => [
                    Number(key),
                    convertMap(value, (k, v) => [k, ValueDelta.fromEncodingData(v)]),
                ])
                : undefined,
            sharedAccts: data.get('sa'),
            logs: data.get('lg'),
            // eslint-disable-next-line no-use-before-define
            innerTxns: (data.get('itx') ?? []).map(SignedTxnWithAD.fromEncodingData),
        });
    }
};
class ApplyData {
    static get encodingSchema() {
        // This is declared like this in order to break the circular dependency of
        // SignedTxnWithAD -> ApplyData -> EvalDelta -> SignedTxnWithAD
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries(...allOmitEmpty([
                {
                    key: 'ca', // closingAmount
                    valueSchema: new OptionalSchema(new Uint64Schema()),
                },
                {
                    key: 'aca', // assetClosingAmount
                    valueSchema: new OptionalSchema(new Uint64Schema()),
                },
                {
                    key: 'rs', // senderRewards
                    valueSchema: new OptionalSchema(new Uint64Schema()),
                },
                {
                    key: 'rr', // receiverRewards
                    valueSchema: new OptionalSchema(new Uint64Schema()),
                },
                {
                    key: 'rc', // closeRewards
                    valueSchema: new OptionalSchema(new Uint64Schema()),
                },
                {
                    key: 'dt', // evalDelta
                    valueSchema: new OptionalSchema(EvalDelta$2.encodingSchema),
                },
                {
                    key: 'caid', // configAsset
                    valueSchema: new OptionalSchema(new Uint64Schema()),
                },
                {
                    key: 'apid', // applicationID
                    valueSchema: new OptionalSchema(new Uint64Schema()),
                },
            ]));
        }
        return this.encodingSchemaValue;
    }
    constructor(params) {
        this.closingAmount = params.closingAmount;
        this.assetClosingAmount = params.assetClosingAmount;
        this.senderRewards = params.senderRewards;
        this.receiverRewards = params.receiverRewards;
        this.closeRewards = params.closeRewards;
        this.evalDelta = params.evalDelta;
        this.configAsset = params.configAsset;
        this.applicationID = params.applicationID;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplyData.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['ca', this.closingAmount],
            ['aca', this.assetClosingAmount],
            ['rs', this.senderRewards],
            ['rr', this.receiverRewards],
            ['rc', this.closeRewards],
            ['dt', this.evalDelta ? this.evalDelta.toEncodingData() : undefined],
            ['caid', this.configAsset],
            ['apid', this.applicationID],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplyData: ${data}`);
        }
        return new ApplyData({
            closingAmount: data.get('ca'),
            assetClosingAmount: data.get('aca'),
            senderRewards: data.get('rs'),
            receiverRewards: data.get('rr'),
            closeRewards: data.get('rc'),
            evalDelta: data.get('dt')
                ? EvalDelta$2.fromEncodingData(data.get('dt'))
                : undefined,
            configAsset: data.get('caid'),
            applicationID: data.get('apid'),
        });
    }
}
class SignedTxnWithAD {
    static get encodingSchema() {
        // This is declared like this in order to break the circular dependency of
        // SignedTxnWithAD -> ApplyData -> EvalDelta -> SignedTxnWithAD
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries(...allOmitEmpty([
                {
                    key: '',
                    valueSchema: SignedTransaction.encodingSchema,
                    embedded: true,
                },
                {
                    key: '',
                    valueSchema: ApplyData.encodingSchema,
                    embedded: true,
                },
            ]));
        }
        return this.encodingSchemaValue;
    }
    constructor(params) {
        this.signedTxn = params.signedTxn;
        this.applyData = params.applyData;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SignedTxnWithAD.encodingSchema;
    }
    toEncodingData() {
        return combineMaps(this.signedTxn.toEncodingData(), this.applyData.toEncodingData());
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SignedTxnWithAD: ${data}`);
        }
        return new SignedTxnWithAD({
            signedTxn: SignedTransaction.fromEncodingData(data),
            applyData: ApplyData.fromEncodingData(data),
        });
    }
}
/**
 * SignedTxnInBlock is how a signed transaction is encoded in a block.
 */
class SignedTxnInBlock {
    constructor(params) {
        this.signedTxn = params.signedTxn;
        this.hasGenesisID = params.hasGenesisID;
        this.hasGenesisHash = params.hasGenesisHash;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SignedTxnInBlock.encodingSchema;
    }
    toEncodingData() {
        const data = new Map([
            ['hgi', this.hasGenesisID],
            ['hgh', this.hasGenesisHash],
        ]);
        return combineMaps(data, this.signedTxn.toEncodingData());
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SignedTxnInBlock: ${data}`);
        }
        return new SignedTxnInBlock({
            signedTxn: SignedTxnWithAD.fromEncodingData(data),
            hasGenesisID: data.get('hgi'),
            hasGenesisHash: data.get('hgh'),
        });
    }
}
SignedTxnInBlock.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: '',
        valueSchema: SignedTxnWithAD.encodingSchema,
        embedded: true,
    },
    {
        key: 'hgi', // hasGenesisID
        valueSchema: new BooleanSchema(),
    },
    {
        key: 'hgh', // hasGenesisHash
        valueSchema: new BooleanSchema(),
    },
]));
/**
 * A Block contains the Payset and metadata corresponding to a given Round.
 */
let Block$2 = class Block {
    constructor(params) {
        this.header = params.header;
        this.payset = params.payset;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Block.encodingSchema;
    }
    toEncodingData() {
        const data = new Map([
            ['txns', this.payset.map((p) => p.toEncodingData())],
        ]);
        return combineMaps(data, this.header.toEncodingData());
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BlockHeader: ${data}`);
        }
        return new Block({
            header: BlockHeader.fromEncodingData(data),
            payset: data.get('txns').map(SignedTxnInBlock.fromEncodingData),
        });
    }
};
Block$2.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: '',
        valueSchema: BlockHeader.encodingSchema,
        embedded: true,
    },
    {
        key: 'txns', // payset
        valueSchema: new ArraySchema(SignedTxnInBlock.encodingSchema),
    },
]));

class UntypedValue {
    constructor(data) {
        this.data = data;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return UntypedValue.encodingSchema;
    }
    toEncodingData() {
        return this.data;
    }
    static fromEncodingData(data) {
        return new UntypedValue(data);
    }
}
UntypedValue.encodingSchema = new UntypedSchema();

// TealValue contains type information and a value, representing a value in a TEAL program
let TealValue$2 = class TealValue {
    constructor(params) {
        this.type = params.type;
        this.bytes = params.bytes;
        this.uint = params.uint;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TealValue.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['tt', this.type],
            ['tb', this.bytes],
            ['ui', this.uint],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TealValue: ${data}`);
        }
        return new TealValue({
            type: Number(data.get('tt')),
            bytes: data.get('tb'),
            uint: data.get('ui'),
        });
    }
};
TealValue$2.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'tt', valueSchema: new Uint64Schema() }, // type
    {
        key: 'tb', // bytes
        valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema()),
    },
    { key: 'ui', valueSchema: new OptionalSchema(new Uint64Schema()) }, // uint
]));
/**
 * StateSchema sets maximums on the number of each type that may be stored
 */
let StateSchema$1 = class StateSchema {
    constructor(params) {
        this.numUints = params.numUints;
        this.numByteSlices = params.numByteSlices;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateSchema.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['nui', this.numUints],
            ['nbs', this.numByteSlices],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateSchema: ${data}`);
        }
        return new StateSchema({
            numUints: Number(data.get('nui')),
            numByteSlices: Number(data.get('nbs')),
        });
    }
};
StateSchema$1.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'nui', // numUints
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'nbs', // numByteSlices
        valueSchema: new Uint64Schema(),
    },
]));
/**
 * AppParams stores the global information associated with an application
 */
class AppParams {
    constructor(params) {
        this.approvalProgram = params.approvalProgram;
        this.clearStateProgram = params.clearStateProgram;
        this.globalState = params.globalState;
        this.localStateSchema = params.localStateSchema;
        this.globalStateSchema = params.globalStateSchema;
        this.extraProgramPages = params.extraProgramPages;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AppParams.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['approv', this.approvalProgram],
            ['clearp', this.clearStateProgram],
            ['gs', convertMap(this.globalState, (k, v) => [k, v.toEncodingData()])],
            ['lsch', this.localStateSchema.toEncodingData()],
            ['gsch', this.globalStateSchema.toEncodingData()],
            ['epp', this.extraProgramPages],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AppParams: ${data}`);
        }
        return new AppParams({
            approvalProgram: data.get('approv'),
            clearStateProgram: data.get('clearp'),
            globalState: convertMap(data.get('gs'), (k, v) => [k, TealValue$2.fromEncodingData(v)]),
            localStateSchema: StateSchema$1.fromEncodingData(data.get('lsch')),
            globalStateSchema: StateSchema$1.fromEncodingData(data.get('gsch')),
            extraProgramPages: Number(data.get('epp')),
        });
    }
}
AppParams.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'approv', valueSchema: new ByteArraySchema() }, // approvalProgram
    { key: 'clearp', valueSchema: new ByteArraySchema() }, // alearStateProgram
    {
        key: 'gs',
        valueSchema: new SpecialCaseBinaryStringMapSchema(TealValue$2.encodingSchema),
    }, // globalState
    { key: 'lsch', valueSchema: StateSchema$1.encodingSchema }, // localStateSchema
    { key: 'gsch', valueSchema: StateSchema$1.encodingSchema }, // globalStateSchema
    { key: 'epp', valueSchema: new Uint64Schema() }, // extraProgramPages
]));
/**
 * AppLocalState stores the LocalState associated with an application.
 */
class AppLocalState {
    constructor(params) {
        this.schema = params.schema;
        this.keyValue = params.keyValue;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AppLocalState.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['hsch', this.schema.toEncodingData()],
            ['tkv', convertMap(this.keyValue, (k, v) => [k, v.toEncodingData()])],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AppLocalState: ${data}`);
        }
        return new AppLocalState({
            schema: StateSchema$1.fromEncodingData(data.get('hsch')),
            keyValue: convertMap(data.get('tkv'), (k, v) => [k, TealValue$2.fromEncodingData(v)]),
        });
    }
}
AppLocalState.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'hsch', valueSchema: StateSchema$1.encodingSchema }, // schema
    {
        key: 'tkv', // keyValue
        valueSchema: new SpecialCaseBinaryStringMapSchema(TealValue$2.encodingSchema),
    },
]));
/**
 * AppLocalStateDelta tracks a changed AppLocalState, and whether it was deleted
 */
class AppLocalStateDelta {
    constructor(params) {
        this.localState = params.localState;
        this.deleted = params.deleted;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AppLocalStateDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'LocalState',
                this.localState ? this.localState.toEncodingData() : undefined,
            ],
            ['Deleted', this.deleted],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AppLocalStateDelta: ${data}`);
        }
        return new AppLocalStateDelta({
            localState: data.get('LocalState')
                ? AppLocalState.fromEncodingData(data.get('LocalState'))
                : undefined,
            deleted: data.get('Deleted'),
        });
    }
}
AppLocalStateDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'LocalState', // localState
        valueSchema: new OptionalSchema(AppLocalState.encodingSchema),
    },
    { key: 'Deleted', valueSchema: new BooleanSchema() }, // deleted
]));
/**
 * AppParamsDelta tracks a changed AppParams, and whether it was deleted
 */
class AppParamsDelta {
    constructor(params) {
        this.params = params.params;
        this.deleted = params.deleted;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AppParamsDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Params', this.params ? this.params.toEncodingData() : undefined],
            ['Deleted', this.deleted],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AppParamsDelta: ${data}`);
        }
        return new AppParamsDelta({
            params: data.get('Params')
                ? AppParams.fromEncodingData(data.get('Params'))
                : undefined,
            deleted: data.get('Deleted'),
        });
    }
}
AppParamsDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'Params', // params
        valueSchema: new OptionalSchema(AppParams.encodingSchema),
    },
    { key: 'Deleted', valueSchema: new BooleanSchema() }, // deleted
]));
/**
 * AppResourceRecord represents AppParams and AppLocalState in deltas
 */
class AppResourceRecord {
    constructor(params) {
        this.id = params.id;
        this.address = params.address;
        this.params = params.params;
        this.state = params.state;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AppResourceRecord.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Aidx', this.id],
            ['Addr', this.address],
            ['Params', this.params.toEncodingData()],
            ['State', this.state.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AppResourceRecord: ${data}`);
        }
        return new AppResourceRecord({
            id: data.get('Aidx'),
            address: data.get('Addr'),
            params: AppParamsDelta.fromEncodingData(data.get('Params')),
            state: AppLocalStateDelta.fromEncodingData(data.get('State')),
        });
    }
}
AppResourceRecord.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'Aidx', valueSchema: new Uint64Schema() }, // id
    { key: 'Addr', valueSchema: new AddressSchema() }, // address
    {
        key: 'Params', // params
        valueSchema: AppParamsDelta.encodingSchema,
    },
    {
        key: 'State', // state
        valueSchema: AppLocalStateDelta.encodingSchema,
    },
]));
/**
 * AssetHolding describes an asset held by an account.
 */
let AssetHolding$2 = class AssetHolding {
    constructor(params) {
        this.amount = params.amount;
        this.frozen = params.frozen;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetHolding.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['a', this.amount],
            ['f', this.frozen],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetHolding: ${data}`);
        }
        return new AssetHolding({
            amount: data.get('a'),
            frozen: data.get('f'),
        });
    }
};
AssetHolding$2.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'a', valueSchema: new Uint64Schema() }, // amount
    { key: 'f', valueSchema: new BooleanSchema() }, // frozen
]));
/**
 * AssetHoldingDelta records a changed AssetHolding, and whether it was deleted
 */
class AssetHoldingDelta {
    constructor(params) {
        this.holding = params.holding;
        this.deleted = params.deleted;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetHoldingDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Holding', this.holding ? this.holding.toEncodingData() : undefined],
            ['Deleted', this.deleted],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetHoldingDelta: ${data}`);
        }
        return new AssetHoldingDelta({
            holding: data.get('Holding')
                ? AssetHolding$2.fromEncodingData(data.get('Holding'))
                : undefined,
            deleted: data.get('Deleted'),
        });
    }
}
AssetHoldingDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'Holding', // holding
        valueSchema: new OptionalSchema(AssetHolding$2.encodingSchema),
    },
    { key: 'Deleted', valueSchema: new BooleanSchema() }, // deleted
]));
/**
 * AssetParams describes the parameters of an asset.
 */
let AssetParams$2 = class AssetParams {
    constructor(params) {
        this.total = params.total;
        this.decimals = params.decimals;
        this.defaultFrozen = params.defaultFrozen;
        this.unitName = params.unitName;
        this.assetName = params.assetName;
        this.url = params.url;
        this.metadataHash = params.metadataHash;
        this.manager = params.manager;
        this.reserve = params.reserve;
        this.freeze = params.freeze;
        this.clawback = params.clawback;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetParams.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['t', this.total],
            ['dc', this.decimals],
            ['df', this.defaultFrozen],
            ['un', this.unitName],
            ['an', this.assetName],
            ['au', this.url],
            ['am', this.metadataHash],
            ['m', this.manager],
            ['r', this.reserve],
            ['f', this.freeze],
            ['c', this.clawback],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetParams: ${data}`);
        }
        return new AssetParams({
            total: data.get('t'),
            decimals: data.get('dc'),
            defaultFrozen: data.get('df'),
            unitName: data.get('un'),
            assetName: data.get('an'),
            url: data.get('au'),
            metadataHash: data.get('am'),
            manager: data.get('m'),
            reserve: data.get('r'),
            freeze: data.get('f'),
            clawback: data.get('c'),
        });
    }
};
AssetParams$2.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 't', valueSchema: new Uint64Schema() }, // total
    { key: 'dc', valueSchema: new Uint64Schema() }, // decimals
    { key: 'df', valueSchema: new BooleanSchema() }, // defaultFrozen
    {
        key: 'un', // unitName
        valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema()),
    },
    {
        key: 'an', // assetName
        valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema()),
    },
    {
        key: 'au', // url
        valueSchema: new OptionalSchema(new SpecialCaseBinaryStringSchema()),
    },
    { key: 'am', valueSchema: new FixedLengthByteArraySchema(32) }, // metadataHash
    { key: 'm', valueSchema: new OptionalSchema(new AddressSchema()) }, // manager
    { key: 'r', valueSchema: new OptionalSchema(new AddressSchema()) }, // reserve
    { key: 'f', valueSchema: new OptionalSchema(new AddressSchema()) }, // freeze
    { key: 'c', valueSchema: new OptionalSchema(new AddressSchema()) }, // clawback
]));
/**
 * AssetParamsDelta tracks a changed AssetParams, and whether it was deleted
 */
class AssetParamsDelta {
    constructor(params) {
        this.params = params.params;
        this.deleted = params.deleted;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetParamsDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Params', this.params ? this.params.toEncodingData() : undefined],
            ['Deleted', this.deleted],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetParamsDelta: ${data}`);
        }
        return new AssetParamsDelta({
            params: data.get('Params')
                ? AssetParams$2.fromEncodingData(data.get('Params'))
                : undefined,
            deleted: data.get('Deleted'),
        });
    }
}
AssetParamsDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'Params', // params
        valueSchema: new OptionalSchema(AssetParams$2.encodingSchema),
    },
    { key: 'Deleted', valueSchema: new BooleanSchema() }, // deleted
]));
/**
 * AssetResourceRecord represents AssetParams and AssetHolding in deltas
 */
class AssetResourceRecord {
    constructor(params) {
        this.id = params.id;
        this.address = params.address;
        this.params = params.params;
        this.holding = params.holding;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetResourceRecord.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Aidx', this.id],
            ['Addr', this.address],
            ['Params', this.params.toEncodingData()],
            ['Holding', this.holding.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetResourceRecord: ${data}`);
        }
        return new AssetResourceRecord({
            id: data.get('Aidx'),
            address: data.get('Addr'),
            params: AssetParamsDelta.fromEncodingData(data.get('Params')),
            holding: AssetHoldingDelta.fromEncodingData(data.get('Holding')),
        });
    }
}
AssetResourceRecord.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'Aidx', valueSchema: new Uint64Schema() }, // id
    { key: 'Addr', valueSchema: new AddressSchema() }, // address
    {
        key: 'Params', // params
        valueSchema: AssetParamsDelta.encodingSchema,
    },
    {
        key: 'Holding', // holding
        valueSchema: AssetHoldingDelta.encodingSchema,
    },
]));
/**
 * VotingData holds participation information
 */
class VotingData {
    constructor(params) {
        this.voteID = params.voteID;
        this.selectionID = params.selectionID;
        this.stateProofID = params.stateProofID;
        this.voteFirstValid = params.voteFirstValid;
        this.voteLastValid = params.voteLastValid;
        this.voteKeyDilution = params.voteKeyDilution;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return VotingData.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['VoteID', this.voteID],
            ['SelectionID', this.selectionID],
            ['StateProofID', this.stateProofID],
            ['VoteFirstValid', this.voteFirstValid],
            ['VoteLastValid', this.voteLastValid],
            ['VoteKeyDilution', this.voteKeyDilution],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded VotingData: ${data}`);
        }
        return new VotingData({
            voteID: data.get('VoteID'),
            selectionID: data.get('SelectionID'),
            stateProofID: data.get('StateProofID'),
            voteFirstValid: data.get('VoteFirstValid'),
            voteLastValid: data.get('VoteLastValid'),
            voteKeyDilution: data.get('VoteKeyDilution'),
        });
    }
}
VotingData.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'VoteID', // voteID
        valueSchema: new FixedLengthByteArraySchema(32),
    },
    {
        key: 'SelectionID', // selectionID
        valueSchema: new FixedLengthByteArraySchema(32),
    },
    {
        key: 'StateProofID', // stateProofID
        valueSchema: new FixedLengthByteArraySchema(64),
    },
    {
        key: 'VoteFirstValid', // voteFirstValid
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'VoteLastValid', // voteLastValid
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'VoteKeyDilution', // voteKeyDilution
        valueSchema: new Uint64Schema(),
    },
]));
/**
 * AccountBaseData contains base account info like balance, status and total number of resources
 */
class AccountBaseData {
    constructor(params) {
        this.status = params.status;
        this.microAlgos = params.microAlgos;
        this.rewardsBase = params.rewardsBase;
        this.rewardedMicroAlgos = params.rewardedMicroAlgos;
        this.authAddr = params.authAddr;
        this.incentiveEligible = params.incentiveEligible;
        this.totalAppSchema = params.totalAppSchema;
        this.totalExtraAppPages = params.totalExtraAppPages;
        this.totalAppParams = params.totalAppParams;
        this.totalAppLocalStates = params.totalAppLocalStates;
        this.totalAssetParams = params.totalAssetParams;
        this.totalAssets = params.totalAssets;
        this.totalBoxes = params.totalBoxes;
        this.totalBoxBytes = params.totalBoxBytes;
        this.lastProposed = params.lastProposed;
        this.lastHeartbeat = params.lastHeartbeat;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountBaseData.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Status', this.status],
            ['MicroAlgos', this.microAlgos],
            ['RewardsBase', this.rewardsBase],
            ['RewardedMicroAlgos', this.rewardedMicroAlgos],
            ['AuthAddr', this.authAddr],
            ['IncentiveEligible', this.incentiveEligible],
            ['TotalAppSchema', this.totalAppSchema.toEncodingData()],
            ['TotalExtraAppPages', this.totalExtraAppPages],
            ['TotalAppParams', this.totalAppParams],
            ['TotalAppLocalStates', this.totalAppLocalStates],
            ['TotalAssetParams', this.totalAssetParams],
            ['TotalAssets', this.totalAssets],
            ['TotalBoxes', this.totalBoxes],
            ['TotalBoxBytes', this.totalBoxBytes],
            ['LastProposed', this.lastProposed],
            ['LastHeartbeat', this.lastHeartbeat],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountBaseData: ${data}`);
        }
        return new AccountBaseData({
            status: Number(data.get('Status')),
            microAlgos: data.get('MicroAlgos'),
            rewardsBase: data.get('RewardsBase'),
            rewardedMicroAlgos: data.get('RewardedMicroAlgos'),
            authAddr: data.get('AuthAddr'),
            incentiveEligible: data.get('IncentiveEligible'),
            totalAppSchema: StateSchema$1.fromEncodingData(data.get('TotalAppSchema')),
            totalExtraAppPages: Number(data.get('TotalExtraAppPages')),
            totalAppParams: data.get('TotalAppParams'),
            totalAppLocalStates: data.get('TotalAppLocalStates'),
            totalAssetParams: data.get('TotalAssetParams'),
            totalAssets: data.get('TotalAssets'),
            totalBoxes: data.get('TotalBoxes'),
            totalBoxBytes: data.get('TotalBoxBytes'),
            lastProposed: data.get('LastProposed'),
            lastHeartbeat: data.get('LastHeartbeat'),
        });
    }
}
AccountBaseData.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'Status', valueSchema: new Uint64Schema() }, // status
    { key: 'MicroAlgos', valueSchema: new Uint64Schema() }, // microAlgos
    { key: 'RewardsBase', valueSchema: new Uint64Schema() }, // rewardsBase
    {
        key: 'RewardedMicroAlgos', // rewardedMicroAlgos
        valueSchema: new Uint64Schema(),
    },
    { key: 'AuthAddr', valueSchema: new AddressSchema() }, // authAddr
    {
        key: 'IncentiveEligible', // incentiveEligible
        valueSchema: new BooleanSchema(),
    },
    {
        key: 'TotalAppSchema', // totalAppSchema
        valueSchema: StateSchema$1.encodingSchema,
    },
    {
        key: 'TotalExtraAppPages', // totalExtraAppPages
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'TotalAppParams', // totalAppParams
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'TotalAppLocalStates', // totalAppLocalStates
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'TotalAssetParams', // totalAssetParams
        valueSchema: new Uint64Schema(),
    },
    { key: 'TotalAssets', valueSchema: new Uint64Schema() }, // totalAssets
    { key: 'TotalBoxes', valueSchema: new Uint64Schema() }, // totalBoxes
    {
        key: 'TotalBoxBytes', // totalBoxBytes
        valueSchema: new Uint64Schema(),
    },
    { key: 'LastProposed', valueSchema: new Uint64Schema() }, // lastProposed
    {
        key: 'LastHeartbeat', // lastHeartbeat
        valueSchema: new Uint64Schema(),
    },
]));
/**
 * AccountData provides per-account data
 */
class AccountData {
    constructor(params) {
        this.accountBaseData = params.accountBaseData;
        this.votingData = params.votingData;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountData.encodingSchema;
    }
    toEncodingData() {
        return combineMaps(this.accountBaseData.toEncodingData(), this.votingData.toEncodingData());
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountData: ${data}`);
        }
        return new AccountData({
            accountBaseData: AccountBaseData.fromEncodingData(data),
            votingData: VotingData.fromEncodingData(data),
        });
    }
}
AccountData.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: '',
        valueSchema: AccountBaseData.encodingSchema,
        embedded: true,
    },
    {
        key: '',
        valueSchema: VotingData.encodingSchema,
        embedded: true,
    },
]));
class BalanceRecord {
    constructor(params) {
        this.addr = params.addr;
        this.accountData = params.accountData;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BalanceRecord.encodingSchema;
    }
    toEncodingData() {
        return combineMaps(new Map([['Addr', this.addr]]), this.accountData.toEncodingData());
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BalanceRecord: ${data}`);
        }
        return new BalanceRecord({
            addr: data.get('Addr'),
            accountData: AccountData.fromEncodingData(data),
        });
    }
}
BalanceRecord.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'Addr',
        valueSchema: new AddressSchema(),
    },
    {
        key: '',
        valueSchema: AccountData.encodingSchema,
        embedded: true,
    },
]));
class AccountDeltas {
    constructor(params) {
        this.accounts = params.accounts;
        this.appResources = params.appResources;
        this.assetResources = params.assetResources;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountDeltas.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Accts', this.accounts.map((account) => account.toEncodingData())],
            [
                'AppResources',
                this.appResources.length === 0
                    ? undefined
                    : this.appResources.map((appResource) => appResource.toEncodingData()),
            ],
            [
                'AssetResources',
                this.assetResources.length === 0
                    ? undefined
                    : this.assetResources.map((assetResource) => assetResource.toEncodingData()),
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountDeltas: ${data}`);
        }
        return new AccountDeltas({
            accounts: (data.get('Accts') ?? []).map(BalanceRecord.fromEncodingData),
            appResources: (data.get('AppResources') ?? []).map(AppResourceRecord.fromEncodingData),
            assetResources: (data.get('AssetResources') ?? []).map(AssetResourceRecord.fromEncodingData),
        });
    }
}
AccountDeltas.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'Accts', // accounts
        valueSchema: new ArraySchema(BalanceRecord.encodingSchema),
    },
    {
        key: 'AppResources', // appResources
        valueSchema: new OptionalSchema(new ArraySchema(AppResourceRecord.encodingSchema)),
    },
    {
        key: 'AssetResources', // assetResources
        valueSchema: new OptionalSchema(new ArraySchema(AssetResourceRecord.encodingSchema)),
    },
]));
/**
 * A KvValueDelta shows how the Data associated with a key in the kvstore has changed.
 */
class KvValueDelta {
    constructor(params) {
        this.data = params.data;
        this.oldData = params.oldData;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return KvValueDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Data', this.data],
            ['OldData', this.oldData],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded KvValueDelta: ${data}`);
        }
        return new KvValueDelta({
            data: data.get('Data'),
            oldData: data.get('OldData'),
        });
    }
}
KvValueDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'Data',
        valueSchema: new OptionalSchema(new ByteArraySchema()),
    },
    {
        key: 'OldData',
        valueSchema: new OptionalSchema(new ByteArraySchema()),
    },
]));
/**
 * IncludedTransactions defines the transactions included in a block, their index and last valid round.
 */
class IncludedTransactions {
    constructor(params) {
        this.lastValid = params.lastValid;
        this.intra = params.intra;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return IncludedTransactions.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['LastValid', this.lastValid],
            ['Intra', this.intra],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded IncludedTransactions: ${data}`);
        }
        return new IncludedTransactions({
            lastValid: data.get('LastValid'),
            intra: Number(data.get('Intra')),
        });
    }
}
IncludedTransactions.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'LastValid',
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'Intra',
        valueSchema: new Uint64Schema(),
    },
]));
/**
 * ModifiedCreatable represents a change to a single creatable state
 */
class ModifiedCreatable {
    constructor(params) {
        this.creatableType = params.creatableType;
        this.created = params.created;
        this.creator = params.creator;
        this.ndeltas = params.ndeltas;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ModifiedCreatable.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Ctype', this.creatableType],
            ['Created', this.created],
            ['Creator', this.creator],
            ['Ndeltas', this.ndeltas],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ModifiedCreatable: ${data}`);
        }
        return new ModifiedCreatable({
            creatableType: Number(data.get('Ctype')),
            created: data.get('Created'),
            creator: data.get('Creator'),
            ndeltas: Number(data.get('Ndeltas')),
        });
    }
}
ModifiedCreatable.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'Ctype', // creatableType
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'Created', // created
        valueSchema: new BooleanSchema(),
    },
    {
        key: 'Creator', // creator
        valueSchema: new AddressSchema(),
    },
    {
        key: 'Ndeltas', // ndeltas
        valueSchema: new Uint64Schema(),
    },
]));
/**
 * AlgoCount represents a total of algos of a certain class of accounts (split up by their Status value).
 */
class AlgoCount {
    constructor(params) {
        this.money = params.money;
        this.rewardUnits = params.rewardUnits;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AlgoCount.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['mon', this.money],
            ['rwd', this.rewardUnits],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AlgoCount: ${data}`);
        }
        return new AlgoCount({
            money: data.get('mon'),
            rewardUnits: data.get('rwd'),
        });
    }
}
AlgoCount.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'mon', valueSchema: new Uint64Schema() }, // money
    { key: 'rwd', valueSchema: new Uint64Schema() }, // rewardUnits
]));
/**
 * AccountTotals represents the totals of algos in the system grouped by different account status values.
 */
class AccountTotals {
    constructor(params) {
        this.online = params.online;
        this.offline = params.offline;
        this.notParticipating = params.notParticipating;
        this.rewardsLevel = params.rewardsLevel;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountTotals.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['online', this.online.toEncodingData()],
            ['offline', this.offline.toEncodingData()],
            ['notpart', this.notParticipating.toEncodingData()],
            ['rwdlvl', this.rewardsLevel],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountTotals: ${data}`);
        }
        return new AccountTotals({
            online: AlgoCount.fromEncodingData(data.get('online')),
            offline: AlgoCount.fromEncodingData(data.get('offline')),
            notParticipating: AlgoCount.fromEncodingData(data.get('notpart')),
            rewardsLevel: data.get('rwdlvl'),
        });
    }
}
AccountTotals.encodingSchema = new NamedMapSchema(allOmitEmpty([
    { key: 'online', valueSchema: AlgoCount.encodingSchema }, // online
    { key: 'offline', valueSchema: AlgoCount.encodingSchema }, // offline
    { key: 'notpart', valueSchema: AlgoCount.encodingSchema }, // notParticipating
    { key: 'rwdlvl', valueSchema: new Uint64Schema() }, // rewardsLevel
]));
/**
 * LedgerStateDelta describes the delta between a given round to the previous round
 */
class LedgerStateDelta {
    constructor(params) {
        this.accounts = params.accounts;
        this.kvMods = params.kvMods;
        this.txids = params.txids;
        this.txleases = params.txleases;
        this.creatables = params.creatables;
        this.blockHeader = params.blockHeader;
        this.stateProofNext = params.stateProofNext;
        this.prevTimestamp = params.prevTimestamp;
        this.totals = params.totals;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return LedgerStateDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Accts', this.accounts.toEncodingData()],
            [
                'KvMods',
                this.kvMods.size === 0
                    ? undefined
                    : convertMap(this.kvMods, (key, value) => [
                        key,
                        value.toEncodingData(),
                    ]),
            ],
            [
                'Txids',
                convertMap(this.txids, (key, value) => [key, value.toEncodingData()]),
            ],
            ['Txleases', this.txleases.toEncodingData()],
            [
                'Creatables',
                this.creatables.size === 0
                    ? undefined
                    : convertMap(this.creatables, (key, value) => [
                        key,
                        value.toEncodingData(),
                    ]),
            ],
            ['Hdr', this.blockHeader.toEncodingData()],
            ['StateProofNext', this.stateProofNext],
            ['PrevTimestamp', this.prevTimestamp],
            ['Totals', this.totals.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded LedgerStateDelta: ${data}`);
        }
        return new LedgerStateDelta({
            accounts: AccountDeltas.fromEncodingData(data.get('Accts')),
            kvMods: convertMap((data.get('KvMods') ?? new Map()), (key, value) => [key, KvValueDelta.fromEncodingData(value)]),
            txids: convertMap(data.get('Txids'), (key, value) => [key, IncludedTransactions.fromEncodingData(value)]),
            txleases: UntypedValue.fromEncodingData(data.get('Txleases')),
            creatables: convertMap((data.get('Creatables') ?? new Map()), (key, value) => [key, ModifiedCreatable.fromEncodingData(value)]),
            blockHeader: BlockHeader.fromEncodingData(data.get('Hdr')),
            stateProofNext: data.get('StateProofNext'),
            prevTimestamp: data.get('PrevTimestamp'),
            totals: AccountTotals.fromEncodingData(data.get('Totals')),
        });
    }
}
LedgerStateDelta.encodingSchema = new NamedMapSchema(allOmitEmpty([
    {
        key: 'Accts', // accounts
        valueSchema: AccountDeltas.encodingSchema,
    },
    {
        key: 'KvMods', // kvMods
        valueSchema: new OptionalSchema(new SpecialCaseBinaryStringMapSchema(KvValueDelta.encodingSchema)),
    },
    {
        key: 'Txids', // txids
        valueSchema: new ByteArrayMapSchema(IncludedTransactions.encodingSchema),
    },
    {
        key: 'Txleases', // txleases
        // Note: because txleases is currently just an UntypedSchema and we are expected to decode
        // null values for this field, we use OptionalSchema to coerce null values to undefined so
        // that the values can be properly omitted during encoding.
        valueSchema: new OptionalSchema(new UntypedSchema()),
    },
    {
        key: 'Creatables', // creatables
        valueSchema: new OptionalSchema(new Uint64MapSchema(ModifiedCreatable.encodingSchema)),
    },
    {
        key: 'Hdr', // blockHeader
        valueSchema: BlockHeader.encodingSchema,
    },
    {
        key: 'StateProofNext', // stateProofNext
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'PrevTimestamp', // prevTimestamp
        valueSchema: new Uint64Schema(),
    },
    {
        key: 'Totals', // totals
        valueSchema: AccountTotals.encodingSchema,
    },
]));

/**
 * NOTICE: This file was generated. Editing this file manually is not recommended.
 */
/* eslint-disable no-use-before-define */
/**
 * Account information at a given round.
 * Definition:
 * data/basics/userBalance.go : AccountData
 */
let Account$1 = class Account {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'address', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'amount-without-pending-rewards',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'min-balance',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'pending-rewards',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, { key: 'rewards', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'status', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'total-apps-opted-in',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'total-assets-opted-in',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'total-created-apps',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'total-created-assets',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'apps-local-state',
                valueSchema: new OptionalSchema(new ArraySchema(ApplicationLocalState$1.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'apps-total-extra-pages',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'apps-total-schema',
                valueSchema: new OptionalSchema(ApplicationStateSchema$1.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'assets',
                valueSchema: new OptionalSchema(new ArraySchema(AssetHolding$1.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'auth-addr',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'created-apps',
                valueSchema: new OptionalSchema(new ArraySchema(Application$1.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'created-assets',
                valueSchema: new OptionalSchema(new ArraySchema(Asset$1.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'incentive-eligible',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'last-heartbeat',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'last-proposed',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'participation',
                valueSchema: new OptionalSchema(AccountParticipation$1.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'reward-base',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'sig-type',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'total-box-bytes',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'total-boxes',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `Account` object.
     * @param address - the account public key
     * @param amount - (algo) total number of MicroAlgos in the account
     * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.
     * @param minBalance - MicroAlgo balance required by the account.
     * The requirement grows based on asset and application usage.
     * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.
     * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending
     * rewards.
     * @param round - The round for which this information is relevant.
     * @param status - (onl) delegation status of the account's MicroAlgos
     * * Offline - indicates that the associated account is delegated.
     * * Online - indicates that the associated account used as part of the delegation
     * pool.
     * * NotParticipating - indicates that the associated account is neither a
     * delegator nor a delegate.
     * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count
     * of application local data (AppLocalState objects) stored in this account.
     * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of
     * AssetHolding objects held by this account.
     * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.
     * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.
     * @param appsLocalState - (appl) applications local data stored in this account.
     * Note the raw object uses `map[int] -> AppLocalState` for this type.
     * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.
     * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this
     * account.
     * Note: the raw account uses `StateSchema` for this type.
     * @param assets - (asset) assets held by this account.
     * Note the raw object uses `map[int] -> AssetHolding` for this type.
     * @param authAddr - (spend) the address against which signing should be checked. If empty, the
     * address of the current account is used. This field can be updated in any
     * transaction by setting the RekeyTo field.
     * @param createdApps - (appp) parameters of applications created by this account including app global
     * data.
     * Note: the raw account uses `map[int] -> AppParams` for this type.
     * @param createdAssets - (apar) parameters of assets created by this account.
     * Note: the raw account uses `map[int] -> Asset` for this type.
     * @param incentiveEligible - Whether or not the account can receive block incentives if its balance is in
     * range at proposal time.
     * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their
     * online status.
     * @param lastProposed - The round in which this account last proposed the block.
     * @param participation - AccountParticipation describes the parameters used by this account in consensus
     * protocol.
     * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts
     * which are participating.
     * @param sigType - Indicates what type of signature is used by this account, must be one of:
     * * sig
     * * msig
     * * lsig
     * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and
     * values.
     * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.
     */
    constructor({ address, amount, amountWithoutPendingRewards, minBalance, pendingRewards, rewards, round, status, totalAppsOptedIn, totalAssetsOptedIn, totalCreatedApps, totalCreatedAssets, appsLocalState, appsTotalExtraPages, appsTotalSchema, assets, authAddr, createdApps, createdAssets, incentiveEligible, lastHeartbeat, lastProposed, participation, rewardBase, sigType, totalBoxBytes, totalBoxes, }) {
        this.address = address;
        this.amount = ensureBigInt(amount);
        this.amountWithoutPendingRewards = ensureBigInt(amountWithoutPendingRewards);
        this.minBalance = ensureBigInt(minBalance);
        this.pendingRewards = ensureBigInt(pendingRewards);
        this.rewards = ensureBigInt(rewards);
        this.round = ensureBigInt(round);
        this.status = status;
        this.totalAppsOptedIn = ensureSafeInteger(totalAppsOptedIn);
        this.totalAssetsOptedIn = ensureSafeInteger(totalAssetsOptedIn);
        this.totalCreatedApps = ensureSafeInteger(totalCreatedApps);
        this.totalCreatedAssets = ensureSafeInteger(totalCreatedAssets);
        this.appsLocalState = appsLocalState;
        this.appsTotalExtraPages =
            typeof appsTotalExtraPages === 'undefined'
                ? undefined
                : ensureSafeInteger(appsTotalExtraPages);
        this.appsTotalSchema = appsTotalSchema;
        this.assets = assets;
        this.authAddr =
            typeof authAddr === 'string' ? Address.fromString(authAddr) : authAddr;
        this.createdApps = createdApps;
        this.createdAssets = createdAssets;
        this.incentiveEligible = incentiveEligible;
        this.lastHeartbeat =
            typeof lastHeartbeat === 'undefined'
                ? undefined
                : ensureSafeInteger(lastHeartbeat);
        this.lastProposed =
            typeof lastProposed === 'undefined'
                ? undefined
                : ensureSafeInteger(lastProposed);
        this.participation = participation;
        this.rewardBase =
            typeof rewardBase === 'undefined' ? undefined : ensureBigInt(rewardBase);
        this.sigType = sigType;
        this.totalBoxBytes =
            typeof totalBoxBytes === 'undefined'
                ? undefined
                : ensureSafeInteger(totalBoxBytes);
        this.totalBoxes =
            typeof totalBoxes === 'undefined'
                ? undefined
                : ensureSafeInteger(totalBoxes);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Account.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['address', this.address],
            ['amount', this.amount],
            ['amount-without-pending-rewards', this.amountWithoutPendingRewards],
            ['min-balance', this.minBalance],
            ['pending-rewards', this.pendingRewards],
            ['rewards', this.rewards],
            ['round', this.round],
            ['status', this.status],
            ['total-apps-opted-in', this.totalAppsOptedIn],
            ['total-assets-opted-in', this.totalAssetsOptedIn],
            ['total-created-apps', this.totalCreatedApps],
            ['total-created-assets', this.totalCreatedAssets],
            [
                'apps-local-state',
                typeof this.appsLocalState !== 'undefined'
                    ? this.appsLocalState.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['apps-total-extra-pages', this.appsTotalExtraPages],
            [
                'apps-total-schema',
                typeof this.appsTotalSchema !== 'undefined'
                    ? this.appsTotalSchema.toEncodingData()
                    : undefined,
            ],
            [
                'assets',
                typeof this.assets !== 'undefined'
                    ? this.assets.map((v) => v.toEncodingData())
                    : undefined,
            ],
            [
                'auth-addr',
                typeof this.authAddr !== 'undefined'
                    ? this.authAddr.toString()
                    : undefined,
            ],
            [
                'created-apps',
                typeof this.createdApps !== 'undefined'
                    ? this.createdApps.map((v) => v.toEncodingData())
                    : undefined,
            ],
            [
                'created-assets',
                typeof this.createdAssets !== 'undefined'
                    ? this.createdAssets.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['incentive-eligible', this.incentiveEligible],
            ['last-heartbeat', this.lastHeartbeat],
            ['last-proposed', this.lastProposed],
            [
                'participation',
                typeof this.participation !== 'undefined'
                    ? this.participation.toEncodingData()
                    : undefined,
            ],
            ['reward-base', this.rewardBase],
            ['sig-type', this.sigType],
            ['total-box-bytes', this.totalBoxBytes],
            ['total-boxes', this.totalBoxes],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Account: ${data}`);
        }
        return new Account({
            address: data.get('address'),
            amount: data.get('amount'),
            amountWithoutPendingRewards: data.get('amount-without-pending-rewards'),
            minBalance: data.get('min-balance'),
            pendingRewards: data.get('pending-rewards'),
            rewards: data.get('rewards'),
            round: data.get('round'),
            status: data.get('status'),
            totalAppsOptedIn: data.get('total-apps-opted-in'),
            totalAssetsOptedIn: data.get('total-assets-opted-in'),
            totalCreatedApps: data.get('total-created-apps'),
            totalCreatedAssets: data.get('total-created-assets'),
            appsLocalState: typeof data.get('apps-local-state') !== 'undefined'
                ? data
                    .get('apps-local-state')
                    .map((v) => ApplicationLocalState$1.fromEncodingData(v))
                : undefined,
            appsTotalExtraPages: data.get('apps-total-extra-pages'),
            appsTotalSchema: typeof data.get('apps-total-schema') !== 'undefined'
                ? ApplicationStateSchema$1.fromEncodingData(data.get('apps-total-schema'))
                : undefined,
            assets: typeof data.get('assets') !== 'undefined'
                ? data
                    .get('assets')
                    .map((v) => AssetHolding$1.fromEncodingData(v))
                : undefined,
            authAddr: data.get('auth-addr'),
            createdApps: typeof data.get('created-apps') !== 'undefined'
                ? data
                    .get('created-apps')
                    .map((v) => Application$1.fromEncodingData(v))
                : undefined,
            createdAssets: typeof data.get('created-assets') !== 'undefined'
                ? data
                    .get('created-assets')
                    .map((v) => Asset$1.fromEncodingData(v))
                : undefined,
            incentiveEligible: data.get('incentive-eligible'),
            lastHeartbeat: data.get('last-heartbeat'),
            lastProposed: data.get('last-proposed'),
            participation: typeof data.get('participation') !== 'undefined'
                ? AccountParticipation$1.fromEncodingData(data.get('participation'))
                : undefined,
            rewardBase: data.get('reward-base'),
            sigType: data.get('sig-type'),
            totalBoxBytes: data.get('total-box-bytes'),
            totalBoxes: data.get('total-boxes'),
        });
    }
};
/**
 * AccountApplicationResponse describes the account's application local state and
 * global state (AppLocalState and AppParams, if either exists) for a specific
 * application ID. Global state will only be returned if the provided address is
 * the application's creator.
 */
class AccountApplicationResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'app-local-state',
                valueSchema: new OptionalSchema(ApplicationLocalState$1.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'created-app',
                valueSchema: new OptionalSchema(ApplicationParams$1.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AccountApplicationResponse` object.
     * @param round - The round for which this information is relevant.
     * @param appLocalState - (appl) the application local data stored in this account.
     * The raw account uses `AppLocalState` for this type.
     * @param createdApp - (appp) parameters of the application created by this account including app
     * global data.
     * The raw account uses `AppParams` for this type.
     */
    constructor({ round, appLocalState, createdApp, }) {
        this.round = ensureBigInt(round);
        this.appLocalState = appLocalState;
        this.createdApp = createdApp;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountApplicationResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['round', this.round],
            [
                'app-local-state',
                typeof this.appLocalState !== 'undefined'
                    ? this.appLocalState.toEncodingData()
                    : undefined,
            ],
            [
                'created-app',
                typeof this.createdApp !== 'undefined'
                    ? this.createdApp.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountApplicationResponse: ${data}`);
        }
        return new AccountApplicationResponse({
            round: data.get('round'),
            appLocalState: typeof data.get('app-local-state') !== 'undefined'
                ? ApplicationLocalState$1.fromEncodingData(data.get('app-local-state'))
                : undefined,
            createdApp: typeof data.get('created-app') !== 'undefined'
                ? ApplicationParams$1.fromEncodingData(data.get('created-app'))
                : undefined,
        });
    }
}
/**
 * AccountAssetHolding describes the account's asset holding and asset parameters
 * (if either exist) for a specific asset ID.
 */
class AccountAssetHolding {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'asset-holding',
                valueSchema: AssetHolding$1.encodingSchema,
                omitEmpty: true,
            }, {
                key: 'asset-params',
                valueSchema: new OptionalSchema(AssetParams$1.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AccountAssetHolding` object.
     * @param assetHolding - (asset) Details about the asset held by this account.
     * The raw account uses `AssetHolding` for this type.
     * @param assetParams - (apar) parameters of the asset held by this account.
     * The raw account uses `AssetParams` for this type.
     */
    constructor({ assetHolding, assetParams, }) {
        this.assetHolding = assetHolding;
        this.assetParams = assetParams;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountAssetHolding.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['asset-holding', this.assetHolding.toEncodingData()],
            [
                'asset-params',
                typeof this.assetParams !== 'undefined'
                    ? this.assetParams.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountAssetHolding: ${data}`);
        }
        return new AccountAssetHolding({
            assetHolding: AssetHolding$1.fromEncodingData(data.get('asset-holding') ?? new Map()),
            assetParams: typeof data.get('asset-params') !== 'undefined'
                ? AssetParams$1.fromEncodingData(data.get('asset-params'))
                : undefined,
        });
    }
}
/**
 * AccountAssetResponse describes the account's asset holding and asset parameters
 * (if either exist) for a specific asset ID. Asset parameters will only be
 * returned if the provided address is the asset's creator.
 */
class AccountAssetResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'asset-holding',
                valueSchema: new OptionalSchema(AssetHolding$1.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'created-asset',
                valueSchema: new OptionalSchema(AssetParams$1.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AccountAssetResponse` object.
     * @param round - The round for which this information is relevant.
     * @param assetHolding - (asset) Details about the asset held by this account.
     * The raw account uses `AssetHolding` for this type.
     * @param createdAsset - (apar) parameters of the asset created by this account.
     * The raw account uses `AssetParams` for this type.
     */
    constructor({ round, assetHolding, createdAsset, }) {
        this.round = ensureBigInt(round);
        this.assetHolding = assetHolding;
        this.createdAsset = createdAsset;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountAssetResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['round', this.round],
            [
                'asset-holding',
                typeof this.assetHolding !== 'undefined'
                    ? this.assetHolding.toEncodingData()
                    : undefined,
            ],
            [
                'created-asset',
                typeof this.createdAsset !== 'undefined'
                    ? this.createdAsset.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountAssetResponse: ${data}`);
        }
        return new AccountAssetResponse({
            round: data.get('round'),
            assetHolding: typeof data.get('asset-holding') !== 'undefined'
                ? AssetHolding$1.fromEncodingData(data.get('asset-holding'))
                : undefined,
            createdAsset: typeof data.get('created-asset') !== 'undefined'
                ? AssetParams$1.fromEncodingData(data.get('created-asset'))
                : undefined,
        });
    }
}
/**
 * AccountAssetsInformationResponse contains a list of assets held by an account.
 */
class AccountAssetsInformationResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'asset-holdings',
                valueSchema: new OptionalSchema(new ArraySchema(AccountAssetHolding.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'next-token',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AccountAssetsInformationResponse` object.
     * @param round - The round for which this information is relevant.
     * @param assetHoldings -
     * @param nextToken - Used for pagination, when making another request provide this token with the
     * next parameter.
     */
    constructor({ round, assetHoldings, nextToken, }) {
        this.round = ensureSafeInteger(round);
        this.assetHoldings = assetHoldings;
        this.nextToken = nextToken;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountAssetsInformationResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['round', this.round],
            [
                'asset-holdings',
                typeof this.assetHoldings !== 'undefined'
                    ? this.assetHoldings.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['next-token', this.nextToken],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountAssetsInformationResponse: ${data}`);
        }
        return new AccountAssetsInformationResponse({
            round: data.get('round'),
            assetHoldings: typeof data.get('asset-holdings') !== 'undefined'
                ? data
                    .get('asset-holdings')
                    .map((v) => AccountAssetHolding.fromEncodingData(v))
                : undefined,
            nextToken: data.get('next-token'),
        });
    }
}
/**
 * AccountParticipation describes the parameters used by this account in consensus
 * protocol.
 */
let AccountParticipation$1 = class AccountParticipation {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'selection-participation-key',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, {
                key: 'vote-first-valid',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'vote-key-dilution',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'vote-last-valid',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'vote-participation-key',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, {
                key: 'state-proof-key',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AccountParticipation` object.
     * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.
     * @param voteFirstValid - (voteFst) First round for which this participation is valid.
     * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.
     * @param voteLastValid - (voteLst) Last round for which this participation is valid.
     * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this
     * round.
     * @param stateProofKey - (stprf) Root of the state proof key (if any)
     */
    constructor({ selectionParticipationKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, stateProofKey, }) {
        this.selectionParticipationKey =
            typeof selectionParticipationKey === 'string'
                ? base64ToBytes(selectionParticipationKey)
                : selectionParticipationKey;
        this.voteFirstValid = ensureBigInt(voteFirstValid);
        this.voteKeyDilution = ensureBigInt(voteKeyDilution);
        this.voteLastValid = ensureBigInt(voteLastValid);
        this.voteParticipationKey =
            typeof voteParticipationKey === 'string'
                ? base64ToBytes(voteParticipationKey)
                : voteParticipationKey;
        this.stateProofKey =
            typeof stateProofKey === 'string'
                ? base64ToBytes(stateProofKey)
                : stateProofKey;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountParticipation.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['selection-participation-key', this.selectionParticipationKey],
            ['vote-first-valid', this.voteFirstValid],
            ['vote-key-dilution', this.voteKeyDilution],
            ['vote-last-valid', this.voteLastValid],
            ['vote-participation-key', this.voteParticipationKey],
            ['state-proof-key', this.stateProofKey],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountParticipation: ${data}`);
        }
        return new AccountParticipation({
            selectionParticipationKey: data.get('selection-participation-key'),
            voteFirstValid: data.get('vote-first-valid'),
            voteKeyDilution: data.get('vote-key-dilution'),
            voteLastValid: data.get('vote-last-valid'),
            voteParticipationKey: data.get('vote-participation-key'),
            stateProofKey: data.get('state-proof-key'),
        });
    }
};
/**
 * Application state delta.
 */
let AccountStateDelta$1 = class AccountStateDelta {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'address', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'delta',
                valueSchema: new ArraySchema(EvalDeltaKeyValue$1.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AccountStateDelta` object.
     * @param address -
     * @param delta - Application state delta.
     */
    constructor({ address, delta, }) {
        this.address = address;
        this.delta = delta;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountStateDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['address', this.address],
            ['delta', this.delta.map((v) => v.toEncodingData())],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountStateDelta: ${data}`);
        }
        return new AccountStateDelta({
            address: data.get('address'),
            delta: (data.get('delta') ?? []).map((v) => EvalDeltaKeyValue$1.fromEncodingData(v)),
        });
    }
};
/**
 * The logged messages from an app call along with the app ID and outer transaction
 * ID. Logs appear in the same order that they were emitted.
 */
class AppCallLogs {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'application-index',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'logs',
                valueSchema: new ArraySchema(new ByteArraySchema()),
                omitEmpty: true,
            }, { key: 'txId', valueSchema: new StringSchema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AppCallLogs` object.
     * @param applicationIndex - The application from which the logs were generated
     * @param logs - An array of logs
     * @param txid - The transaction ID of the outer app call that lead to these logs
     */
    constructor({ applicationIndex, logs, txid, }) {
        this.applicationIndex = ensureSafeInteger(applicationIndex);
        this.logs = logs;
        this.txid = txid;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AppCallLogs.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['application-index', this.applicationIndex],
            ['logs', this.logs],
            ['txId', this.txid],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AppCallLogs: ${data}`);
        }
        return new AppCallLogs({
            applicationIndex: data.get('application-index'),
            logs: data.get('logs'),
            txid: data.get('txId'),
        });
    }
}
/**
 * Application index and its parameters
 */
let Application$1 = class Application {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'id', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'params',
                valueSchema: ApplicationParams$1.encodingSchema,
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `Application` object.
     * @param id - (appidx) application index.
     * @param params - (appparams) application parameters.
     */
    constructor({ id, params, }) {
        this.id = ensureBigInt(id);
        this.params = params;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Application.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['id', this.id],
            ['params', this.params.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Application: ${data}`);
        }
        return new Application({
            id: data.get('id'),
            params: ApplicationParams$1.fromEncodingData(data.get('params') ?? new Map()),
        });
    }
};
/**
 * An application's initial global/local/box states that were accessed during
 * simulation.
 */
class ApplicationInitialStates {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'id', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'app-boxes',
                valueSchema: new OptionalSchema(ApplicationKVStorage.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'app-globals',
                valueSchema: new OptionalSchema(ApplicationKVStorage.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'app-locals',
                valueSchema: new OptionalSchema(new ArraySchema(ApplicationKVStorage.encodingSchema)),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationInitialStates` object.
     * @param id - Application index.
     * @param appBoxes - An application's global/local/box state.
     * @param appGlobals - An application's global/local/box state.
     * @param appLocals - An application's initial local states tied to different accounts.
     */
    constructor({ id, appBoxes, appGlobals, appLocals, }) {
        this.id = ensureBigInt(id);
        this.appBoxes = appBoxes;
        this.appGlobals = appGlobals;
        this.appLocals = appLocals;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationInitialStates.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['id', this.id],
            [
                'app-boxes',
                typeof this.appBoxes !== 'undefined'
                    ? this.appBoxes.toEncodingData()
                    : undefined,
            ],
            [
                'app-globals',
                typeof this.appGlobals !== 'undefined'
                    ? this.appGlobals.toEncodingData()
                    : undefined,
            ],
            [
                'app-locals',
                typeof this.appLocals !== 'undefined'
                    ? this.appLocals.map((v) => v.toEncodingData())
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationInitialStates: ${data}`);
        }
        return new ApplicationInitialStates({
            id: data.get('id'),
            appBoxes: typeof data.get('app-boxes') !== 'undefined'
                ? ApplicationKVStorage.fromEncodingData(data.get('app-boxes'))
                : undefined,
            appGlobals: typeof data.get('app-globals') !== 'undefined'
                ? ApplicationKVStorage.fromEncodingData(data.get('app-globals'))
                : undefined,
            appLocals: typeof data.get('app-locals') !== 'undefined'
                ? data
                    .get('app-locals')
                    .map((v) => ApplicationKVStorage.fromEncodingData(v))
                : undefined,
        });
    }
}
/**
 * An application's global/local/box state.
 */
class ApplicationKVStorage {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'kvs',
                valueSchema: new ArraySchema(AvmKeyValue.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'account',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationKVStorage` object.
     * @param kvs - Key-Value pairs representing application states.
     * @param account - The address of the account associated with the local state.
     */
    constructor({ kvs, account, }) {
        this.kvs = kvs;
        this.account =
            typeof account === 'string' ? Address.fromString(account) : account;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationKVStorage.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['kvs', this.kvs.map((v) => v.toEncodingData())],
            [
                'account',
                typeof this.account !== 'undefined'
                    ? this.account.toString()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationKVStorage: ${data}`);
        }
        return new ApplicationKVStorage({
            kvs: (data.get('kvs') ?? []).map((v) => AvmKeyValue.fromEncodingData(v)),
            account: data.get('account'),
        });
    }
}
/**
 * References an account's local state for an application.
 */
class ApplicationLocalReference {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'account', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'app', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationLocalReference` object.
     * @param account - Address of the account with the local state.
     * @param app - Application ID of the local state application.
     */
    constructor({ account, app, }) {
        this.account =
            typeof account === 'string' ? Address.fromString(account) : account;
        this.app = ensureBigInt(app);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationLocalReference.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['account', this.account.toString()],
            ['app', this.app],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationLocalReference: ${data}`);
        }
        return new ApplicationLocalReference({
            account: data.get('account'),
            app: data.get('app'),
        });
    }
}
/**
 * Stores local state associated with an application.
 */
let ApplicationLocalState$1 = class ApplicationLocalState {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'id', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'schema',
                valueSchema: ApplicationStateSchema$1.encodingSchema,
                omitEmpty: true,
            }, {
                key: 'key-value',
                valueSchema: new OptionalSchema(new ArraySchema(TealKeyValue$1.encodingSchema)),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationLocalState` object.
     * @param id - The application which this local state is for.
     * @param schema - (hsch) schema.
     * @param keyValue - (tkv) storage.
     */
    constructor({ id, schema, keyValue, }) {
        this.id = ensureBigInt(id);
        this.schema = schema;
        this.keyValue = keyValue;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationLocalState.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['id', this.id],
            ['schema', this.schema.toEncodingData()],
            [
                'key-value',
                typeof this.keyValue !== 'undefined'
                    ? this.keyValue.map((v) => v.toEncodingData())
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationLocalState: ${data}`);
        }
        return new ApplicationLocalState({
            id: data.get('id'),
            schema: ApplicationStateSchema$1.fromEncodingData(data.get('schema') ?? new Map()),
            keyValue: typeof data.get('key-value') !== 'undefined'
                ? data
                    .get('key-value')
                    .map((v) => TealKeyValue$1.fromEncodingData(v))
                : undefined,
        });
    }
};
/**
 * Stores the global information associated with an application.
 */
let ApplicationParams$1 = class ApplicationParams {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'approval-program',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, {
                key: 'clear-state-program',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, { key: 'creator', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'extra-program-pages',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'global-state',
                valueSchema: new OptionalSchema(new ArraySchema(TealKeyValue$1.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'global-state-schema',
                valueSchema: new OptionalSchema(ApplicationStateSchema$1.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'local-state-schema',
                valueSchema: new OptionalSchema(ApplicationStateSchema$1.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationParams` object.
     * @param approvalProgram - (approv) approval program.
     * @param clearStateProgram - (clearp) approval program.
     * @param creator - The address that created this application. This is the address where the
     * parameters and global state for this application can be found.
     * @param extraProgramPages - (epp) the amount of extra program pages available to this app.
     * @param globalState - (gs) global state
     * @param globalStateSchema - (gsch) global schema
     * @param localStateSchema - (lsch) local schema
     */
    constructor({ approvalProgram, clearStateProgram, creator, extraProgramPages, globalState, globalStateSchema, localStateSchema, }) {
        this.approvalProgram =
            typeof approvalProgram === 'string'
                ? base64ToBytes(approvalProgram)
                : approvalProgram;
        this.clearStateProgram =
            typeof clearStateProgram === 'string'
                ? base64ToBytes(clearStateProgram)
                : clearStateProgram;
        this.creator =
            typeof creator === 'string' ? Address.fromString(creator) : creator;
        this.extraProgramPages =
            typeof extraProgramPages === 'undefined'
                ? undefined
                : ensureSafeInteger(extraProgramPages);
        this.globalState = globalState;
        this.globalStateSchema = globalStateSchema;
        this.localStateSchema = localStateSchema;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationParams.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['approval-program', this.approvalProgram],
            ['clear-state-program', this.clearStateProgram],
            ['creator', this.creator.toString()],
            ['extra-program-pages', this.extraProgramPages],
            [
                'global-state',
                typeof this.globalState !== 'undefined'
                    ? this.globalState.map((v) => v.toEncodingData())
                    : undefined,
            ],
            [
                'global-state-schema',
                typeof this.globalStateSchema !== 'undefined'
                    ? this.globalStateSchema.toEncodingData()
                    : undefined,
            ],
            [
                'local-state-schema',
                typeof this.localStateSchema !== 'undefined'
                    ? this.localStateSchema.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationParams: ${data}`);
        }
        return new ApplicationParams({
            approvalProgram: data.get('approval-program'),
            clearStateProgram: data.get('clear-state-program'),
            creator: data.get('creator'),
            extraProgramPages: data.get('extra-program-pages'),
            globalState: typeof data.get('global-state') !== 'undefined'
                ? data
                    .get('global-state')
                    .map((v) => TealKeyValue$1.fromEncodingData(v))
                : undefined,
            globalStateSchema: typeof data.get('global-state-schema') !== 'undefined'
                ? ApplicationStateSchema$1.fromEncodingData(data.get('global-state-schema'))
                : undefined,
            localStateSchema: typeof data.get('local-state-schema') !== 'undefined'
                ? ApplicationStateSchema$1.fromEncodingData(data.get('local-state-schema'))
                : undefined,
        });
    }
};
/**
 * An operation against an application's global/local/box state.
 */
class ApplicationStateOperation {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'app-state-type',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            }, { key: 'key', valueSchema: new ByteArraySchema(), omitEmpty: true }, { key: 'operation', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'account',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'new-value',
                valueSchema: new OptionalSchema(AvmValue.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationStateOperation` object.
     * @param appStateType - Type of application state. Value `g` is **global state**, `l` is **local
     * state**, `b` is **boxes**.
     * @param key - The key (name) of the global/local/box state.
     * @param operation - Operation type. Value `w` is **write**, `d` is **delete**.
     * @param account - For local state changes, the address of the account associated with the local
     * state.
     * @param newValue - Represents an AVM value.
     */
    constructor({ appStateType, key, operation, account, newValue, }) {
        this.appStateType = appStateType;
        this.key = typeof key === 'string' ? base64ToBytes(key) : key;
        this.operation = operation;
        this.account =
            typeof account === 'string' ? Address.fromString(account) : account;
        this.newValue = newValue;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationStateOperation.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['app-state-type', this.appStateType],
            ['key', this.key],
            ['operation', this.operation],
            [
                'account',
                typeof this.account !== 'undefined'
                    ? this.account.toString()
                    : undefined,
            ],
            [
                'new-value',
                typeof this.newValue !== 'undefined'
                    ? this.newValue.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationStateOperation: ${data}`);
        }
        return new ApplicationStateOperation({
            appStateType: data.get('app-state-type'),
            key: data.get('key'),
            operation: data.get('operation'),
            account: data.get('account'),
            newValue: typeof data.get('new-value') !== 'undefined'
                ? AvmValue.fromEncodingData(data.get('new-value'))
                : undefined,
        });
    }
}
/**
 * Specifies maximums on the number of each type that may be stored.
 */
let ApplicationStateSchema$1 = class ApplicationStateSchema {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'num-byte-slice',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, { key: 'num-uint', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationStateSchema` object.
     * @param numByteSlice - (nbs) num of byte slices.
     * @param numUint - (nui) num of uints.
     */
    constructor({ numByteSlice, numUint, }) {
        this.numByteSlice = ensureSafeInteger(numByteSlice);
        this.numUint = ensureSafeInteger(numUint);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationStateSchema.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['num-byte-slice', this.numByteSlice],
            ['num-uint', this.numUint],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationStateSchema: ${data}`);
        }
        return new ApplicationStateSchema({
            numByteSlice: data.get('num-byte-slice'),
            numUint: data.get('num-uint'),
        });
    }
};
/**
 * Specifies both the unique identifier and the parameters for an asset
 */
let Asset$1 = class Asset {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'index', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'params',
                valueSchema: AssetParams$1.encodingSchema,
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `Asset` object.
     * @param index - unique asset identifier
     * @param params - AssetParams specifies the parameters for an asset.
     * (apar) when part of an AssetConfig transaction.
     * Definition:
     * data/transactions/asset.go : AssetParams
     */
    constructor({ index, params, }) {
        this.index = ensureBigInt(index);
        this.params = params;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Asset.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['index', this.index],
            ['params', this.params.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Asset: ${data}`);
        }
        return new Asset({
            index: data.get('index'),
            params: AssetParams$1.fromEncodingData(data.get('params') ?? new Map()),
        });
    }
};
/**
 * Describes an asset held by an account.
 * Definition:
 * data/basics/userBalance.go : AssetHolding
 */
let AssetHolding$1 = class AssetHolding {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'asset-id', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'is-frozen', valueSchema: new BooleanSchema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AssetHolding` object.
     * @param amount - (a) number of units held.
     * @param assetId - Asset ID of the holding.
     * @param isFrozen - (f) whether or not the holding is frozen.
     */
    constructor({ amount, assetId, isFrozen, }) {
        this.amount = ensureBigInt(amount);
        this.assetId = ensureBigInt(assetId);
        this.isFrozen = isFrozen;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetHolding.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['amount', this.amount],
            ['asset-id', this.assetId],
            ['is-frozen', this.isFrozen],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetHolding: ${data}`);
        }
        return new AssetHolding({
            amount: data.get('amount'),
            assetId: data.get('asset-id'),
            isFrozen: data.get('is-frozen'),
        });
    }
};
/**
 * References an asset held by an account.
 */
class AssetHoldingReference {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'account', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'asset', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AssetHoldingReference` object.
     * @param account - Address of the account holding the asset.
     * @param asset - Asset ID of the holding.
     */
    constructor({ account, asset, }) {
        this.account =
            typeof account === 'string' ? Address.fromString(account) : account;
        this.asset = ensureBigInt(asset);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetHoldingReference.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['account', this.account.toString()],
            ['asset', this.asset],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetHoldingReference: ${data}`);
        }
        return new AssetHoldingReference({
            account: data.get('account'),
            asset: data.get('asset'),
        });
    }
}
/**
 * AssetParams specifies the parameters for an asset.
 * (apar) when part of an AssetConfig transaction.
 * Definition:
 * data/transactions/asset.go : AssetParams
 */
let AssetParams$1 = class AssetParams {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'creator', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'decimals', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'total', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'clawback',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'default-frozen',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'freeze',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'manager',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'metadata-hash',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'name',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'name-b64',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'reserve',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'unit-name',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'unit-name-b64',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'url',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'url-b64',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AssetParams` object.
     * @param creator - The address that created this asset. This is the address where the parameters
     * for this asset can be found, and also the address where unwanted asset units can
     * be sent in the worst case.
     * @param decimals - (dc) The number of digits to use after the decimal point when displaying this
     * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in
     * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value
     * must be between 0 and 19 (inclusive).
     * @param total - (t) The total number of units of this asset.
     * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,
     * clawback is not permitted.
     * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.
     * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing
     * is not permitted.
     * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.
     * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this
     * metadata is up to the application.
     * @param name - (an) Name of this asset, as supplied by the creator. Included only when the
     * asset name is composed of printable utf-8 characters.
     * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.
     * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.
     * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only
     * when the name of a unit of this asset is composed of printable utf-8 characters.
     * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.
     * @param url - (au) URL where more information about the asset can be retrieved. Included only
     * when the URL is composed of printable utf-8 characters.
     * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.
     */
    constructor({ creator, decimals, total, clawback, defaultFrozen, freeze, manager, metadataHash, name, nameB64, reserve, unitName, unitNameB64, url, urlB64, }) {
        this.creator = creator;
        this.decimals = ensureSafeInteger(decimals);
        this.total = ensureBigInt(total);
        this.clawback = clawback;
        this.defaultFrozen = defaultFrozen;
        this.freeze = freeze;
        this.manager = manager;
        this.metadataHash =
            typeof metadataHash === 'string'
                ? base64ToBytes(metadataHash)
                : metadataHash;
        this.name = name;
        this.nameB64 =
            typeof nameB64 === 'string' ? base64ToBytes(nameB64) : nameB64;
        this.reserve = reserve;
        this.unitName = unitName;
        this.unitNameB64 =
            typeof unitNameB64 === 'string'
                ? base64ToBytes(unitNameB64)
                : unitNameB64;
        this.url = url;
        this.urlB64 = typeof urlB64 === 'string' ? base64ToBytes(urlB64) : urlB64;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetParams.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['creator', this.creator],
            ['decimals', this.decimals],
            ['total', this.total],
            ['clawback', this.clawback],
            ['default-frozen', this.defaultFrozen],
            ['freeze', this.freeze],
            ['manager', this.manager],
            ['metadata-hash', this.metadataHash],
            ['name', this.name],
            ['name-b64', this.nameB64],
            ['reserve', this.reserve],
            ['unit-name', this.unitName],
            ['unit-name-b64', this.unitNameB64],
            ['url', this.url],
            ['url-b64', this.urlB64],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetParams: ${data}`);
        }
        return new AssetParams({
            creator: data.get('creator'),
            decimals: data.get('decimals'),
            total: data.get('total'),
            clawback: data.get('clawback'),
            defaultFrozen: data.get('default-frozen'),
            freeze: data.get('freeze'),
            manager: data.get('manager'),
            metadataHash: data.get('metadata-hash'),
            name: data.get('name'),
            nameB64: data.get('name-b64'),
            reserve: data.get('reserve'),
            unitName: data.get('unit-name'),
            unitNameB64: data.get('unit-name-b64'),
            url: data.get('url'),
            urlB64: data.get('url-b64'),
        });
    }
};
/**
 * Represents an AVM key-value pair in an application store.
 */
class AvmKeyValue {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'key', valueSchema: new ByteArraySchema(), omitEmpty: true }, { key: 'value', valueSchema: AvmValue.encodingSchema, omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AvmKeyValue` object.
     * @param key -
     * @param value - Represents an AVM value.
     */
    constructor({ key, value }) {
        this.key = typeof key === 'string' ? base64ToBytes(key) : key;
        this.value = value;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AvmKeyValue.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['key', this.key],
            ['value', this.value.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AvmKeyValue: ${data}`);
        }
        return new AvmKeyValue({
            key: data.get('key'),
            value: AvmValue.fromEncodingData(data.get('value') ?? new Map()),
        });
    }
}
/**
 * Represents an AVM value.
 */
class AvmValue {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'type', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'bytes',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'uint',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AvmValue` object.
     * @param type - value type. Value `1` refers to **bytes**, value `2` refers to **uint64**
     * @param bytes - bytes value.
     * @param uint - uint value.
     */
    constructor({ type, bytes, uint, }) {
        this.type = ensureSafeInteger(type);
        this.bytes = typeof bytes === 'string' ? base64ToBytes(bytes) : bytes;
        this.uint = typeof uint === 'undefined' ? undefined : ensureBigInt(uint);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AvmValue.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['type', this.type],
            ['bytes', this.bytes],
            ['uint', this.uint],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AvmValue: ${data}`);
        }
        return new AvmValue({
            type: data.get('type'),
            bytes: data.get('bytes'),
            uint: data.get('uint'),
        });
    }
}
/**
 * Hash of a block header.
 */
class BlockHashResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'blockHash',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BlockHashResponse` object.
     * @param blockhash - Block header hash.
     */
    constructor({ blockhash }) {
        this.blockhash = blockhash;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BlockHashResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([['blockHash', this.blockhash]]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BlockHashResponse: ${data}`);
        }
        return new BlockHashResponse({
            blockhash: data.get('blockHash'),
        });
    }
}
/**
 * All logs emitted in the given round. Each app call, whether top-level or inner,
 * that contains logs results in a separate AppCallLogs object. Therefore there may
 * be multiple AppCallLogs with the same application ID and outer transaction ID in
 * the event of multiple inner app calls to the same app. App calls with no logs
 * are not included in the response. AppCallLogs are returned in the same order
 * that their corresponding app call appeared in the block (pre-order traversal of
 * inner app calls)
 */
class BlockLogsResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'logs',
                valueSchema: new ArraySchema(AppCallLogs.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BlockLogsResponse` object.
     * @param logs -
     */
    constructor({ logs }) {
        this.logs = logs;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BlockLogsResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['logs', this.logs.map((v) => v.toEncodingData())],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BlockLogsResponse: ${data}`);
        }
        return new BlockLogsResponse({
            logs: (data.get('logs') ?? []).map((v) => AppCallLogs.fromEncodingData(v)),
        });
    }
}
/**
 * Encoded block object.
 */
class BlockResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'block', valueSchema: Block$2.encodingSchema, omitEmpty: true }, {
                key: 'cert',
                valueSchema: new OptionalSchema(UntypedValue.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BlockResponse` object.
     * @param block - Block header data.
     * @param cert - Optional certificate object. This is only included when the format is set to
     * message pack.
     */
    constructor({ block, cert }) {
        this.block = block;
        this.cert = cert;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BlockResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['block', this.block.toEncodingData()],
            [
                'cert',
                typeof this.cert !== 'undefined'
                    ? this.cert.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BlockResponse: ${data}`);
        }
        return new BlockResponse({
            block: Block$2.fromEncodingData(data.get('block') ?? new Map()),
            cert: typeof data.get('cert') !== 'undefined'
                ? UntypedValue.fromEncodingData(data.get('cert'))
                : undefined,
        });
    }
}
/**
 * Top level transaction IDs in a block.
 */
class BlockTxidsResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'blockTxids',
                valueSchema: new ArraySchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BlockTxidsResponse` object.
     * @param blocktxids - Block transaction IDs.
     */
    constructor({ blocktxids }) {
        this.blocktxids = blocktxids;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BlockTxidsResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([['blockTxids', this.blocktxids]]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BlockTxidsResponse: ${data}`);
        }
        return new BlockTxidsResponse({
            blocktxids: data.get('blockTxids'),
        });
    }
}
/**
 * Box name and its content.
 */
let Box$1 = class Box {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'name', valueSchema: new ByteArraySchema(), omitEmpty: true }, { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'value', valueSchema: new ByteArraySchema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `Box` object.
     * @param name - (name) box name, base64 encoded
     * @param round - The round for which this information is relevant
     * @param value - (value) box value, base64 encoded.
     */
    constructor({ name, round, value, }) {
        this.name = typeof name === 'string' ? base64ToBytes(name) : name;
        this.round = ensureBigInt(round);
        this.value = typeof value === 'string' ? base64ToBytes(value) : value;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Box.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['name', this.name],
            ['round', this.round],
            ['value', this.value],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Box: ${data}`);
        }
        return new Box({
            name: data.get('name'),
            round: data.get('round'),
            value: data.get('value'),
        });
    }
};
/**
 * Box descriptor describes a Box.
 */
let BoxDescriptor$1 = class BoxDescriptor {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'name',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BoxDescriptor` object.
     * @param name - Base64 encoded box name
     */
    constructor({ name }) {
        this.name = typeof name === 'string' ? base64ToBytes(name) : name;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BoxDescriptor.encodingSchema;
    }
    toEncodingData() {
        return new Map([['name', this.name]]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BoxDescriptor: ${data}`);
        }
        return new BoxDescriptor({
            name: data.get('name'),
        });
    }
};
/**
 * References a box of an application.
 */
class BoxReference {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'app', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'name', valueSchema: new ByteArraySchema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BoxReference` object.
     * @param app - Application ID which this box belongs to
     * @param name - Base64 encoded box name
     */
    constructor({ app, name, }) {
        this.app = ensureBigInt(app);
        this.name = typeof name === 'string' ? base64ToBytes(name) : name;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BoxReference.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['app', this.app],
            ['name', this.name],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BoxReference: ${data}`);
        }
        return new BoxReference({
            app: data.get('app'),
            name: data.get('name'),
        });
    }
}
/**
 * Box names of an application
 */
let BoxesResponse$1 = class BoxesResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'boxes',
                valueSchema: new ArraySchema(BoxDescriptor$1.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BoxesResponse` object.
     * @param boxes -
     */
    constructor({ boxes }) {
        this.boxes = boxes;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BoxesResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['boxes', this.boxes.map((v) => v.toEncodingData())],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BoxesResponse: ${data}`);
        }
        return new BoxesResponse({
            boxes: (data.get('boxes') ?? []).map((v) => BoxDescriptor$1.fromEncodingData(v)),
        });
    }
};
class BuildVersion {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'branch', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'build_number',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, { key: 'channel', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'commit_hash',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            }, { key: 'major', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'minor', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BuildVersion` object.
     * @param branch -
     * @param buildNumber -
     * @param channel -
     * @param commitHash -
     * @param major -
     * @param minor -
     */
    constructor({ branch, buildNumber, channel, commitHash, major, minor, }) {
        this.branch = branch;
        this.buildNumber = ensureSafeInteger(buildNumber);
        this.channel = channel;
        this.commitHash = commitHash;
        this.major = ensureSafeInteger(major);
        this.minor = ensureSafeInteger(minor);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BuildVersion.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['branch', this.branch],
            ['build_number', this.buildNumber],
            ['channel', this.channel],
            ['commit_hash', this.commitHash],
            ['major', this.major],
            ['minor', this.minor],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BuildVersion: ${data}`);
        }
        return new BuildVersion({
            branch: data.get('branch'),
            buildNumber: data.get('build_number'),
            channel: data.get('channel'),
            commitHash: data.get('commit_hash'),
            major: data.get('major'),
            minor: data.get('minor'),
        });
    }
}
/**
 * Teal compile Result
 */
class CompileResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'hash', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'result', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'sourcemap',
                valueSchema: new OptionalSchema(UntypedValue.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `CompileResponse` object.
     * @param hash - base32 SHA512_256 of program bytes (Address style)
     * @param result - base64 encoded program bytes
     * @param sourcemap - JSON of the source map
     */
    constructor({ hash, result, sourcemap, }) {
        this.hash = hash;
        this.result = result;
        this.sourcemap = sourcemap;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return CompileResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['hash', this.hash],
            ['result', this.result],
            [
                'sourcemap',
                typeof this.sourcemap !== 'undefined'
                    ? this.sourcemap.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded CompileResponse: ${data}`);
        }
        return new CompileResponse({
            hash: data.get('hash'),
            result: data.get('result'),
            sourcemap: typeof data.get('sourcemap') !== 'undefined'
                ? UntypedValue.fromEncodingData(data.get('sourcemap'))
                : undefined,
        });
    }
}
/**
 * Teal disassembly Result
 */
class DisassembleResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'result',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `DisassembleResponse` object.
     * @param result - disassembled Teal code
     */
    constructor({ result }) {
        this.result = result;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return DisassembleResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([['result', this.result]]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded DisassembleResponse: ${data}`);
        }
        return new DisassembleResponse({
            result: data.get('result'),
        });
    }
}
/**
 * Request data type for dryrun endpoint. Given the Transactions and simulated
 * ledger state upload, run TEAL scripts and return debugging information.
 */
class DryrunRequest {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'accounts',
                valueSchema: new ArraySchema(Account$1.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'apps',
                valueSchema: new ArraySchema(Application$1.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'latest-timestamp',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'protocol-version',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            }, { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'sources',
                valueSchema: new ArraySchema(DryrunSource.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'txns',
                valueSchema: new ArraySchema(SignedTransaction.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `DryrunRequest` object.
     * @param accounts -
     * @param apps -
     * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest
     * confirmed timestamp this algod is attached to.
     * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise
     * whatever the current protocol of the network this algod is running in.
     * @param round - Round is available to some TEAL scripts. Defaults to the current round on the
     * network this algod is attached to.
     * @param sources -
     * @param txns -
     */
    constructor({ accounts, apps, latestTimestamp, protocolVersion, round, sources, txns, }) {
        this.accounts = accounts;
        this.apps = apps;
        this.latestTimestamp = ensureSafeInteger(latestTimestamp);
        this.protocolVersion = protocolVersion;
        this.round = ensureBigInt(round);
        this.sources = sources;
        this.txns = txns;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return DryrunRequest.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['accounts', this.accounts.map((v) => v.toEncodingData())],
            ['apps', this.apps.map((v) => v.toEncodingData())],
            ['latest-timestamp', this.latestTimestamp],
            ['protocol-version', this.protocolVersion],
            ['round', this.round],
            ['sources', this.sources.map((v) => v.toEncodingData())],
            ['txns', this.txns.map((v) => v.toEncodingData())],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded DryrunRequest: ${data}`);
        }
        return new DryrunRequest({
            accounts: (data.get('accounts') ?? []).map((v) => Account$1.fromEncodingData(v)),
            apps: (data.get('apps') ?? []).map((v) => Application$1.fromEncodingData(v)),
            latestTimestamp: data.get('latest-timestamp'),
            protocolVersion: data.get('protocol-version'),
            round: data.get('round'),
            sources: (data.get('sources') ?? []).map((v) => DryrunSource.fromEncodingData(v)),
            txns: (data.get('txns') ?? []).map((v) => SignedTransaction.fromEncodingData(v)),
        });
    }
}
/**
 * DryrunResponse contains per-txn debug information from a dryrun.
 */
class DryrunResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'error', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'protocol-version',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            }, {
                key: 'txns',
                valueSchema: new ArraySchema(DryrunTxnResult.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `DryrunResponse` object.
     * @param error -
     * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.
     * @param txns -
     */
    constructor({ error, protocolVersion, txns, }) {
        this.error = error;
        this.protocolVersion = protocolVersion;
        this.txns = txns;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return DryrunResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['error', this.error],
            ['protocol-version', this.protocolVersion],
            ['txns', this.txns.map((v) => v.toEncodingData())],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded DryrunResponse: ${data}`);
        }
        return new DryrunResponse({
            error: data.get('error'),
            protocolVersion: data.get('protocol-version'),
            txns: (data.get('txns') ?? []).map((v) => DryrunTxnResult.fromEncodingData(v)),
        });
    }
}
/**
 * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into
 * transactions or application state.
 */
class DryrunSource {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'app-index', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'field-name', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'source', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'txn-index', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `DryrunSource` object.
     * @param appIndex -
     * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the
     * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the
     * Approval Program or Clear State Program of application[this.AppIndex].
     * @param source -
     * @param txnIndex -
     */
    constructor({ appIndex, fieldName, source, txnIndex, }) {
        this.appIndex = ensureBigInt(appIndex);
        this.fieldName = fieldName;
        this.source = source;
        this.txnIndex = ensureSafeInteger(txnIndex);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return DryrunSource.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['app-index', this.appIndex],
            ['field-name', this.fieldName],
            ['source', this.source],
            ['txn-index', this.txnIndex],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded DryrunSource: ${data}`);
        }
        return new DryrunSource({
            appIndex: data.get('app-index'),
            fieldName: data.get('field-name'),
            source: data.get('source'),
            txnIndex: data.get('txn-index'),
        });
    }
}
/**
 * Stores the TEAL eval step data
 */
class DryrunState {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'line', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'pc', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'stack',
                valueSchema: new ArraySchema(TealValue$1.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'error',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'scratch',
                valueSchema: new OptionalSchema(new ArraySchema(TealValue$1.encodingSchema)),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `DryrunState` object.
     * @param line - Line number
     * @param pc - Program counter
     * @param stack -
     * @param error - Evaluation error if any
     * @param scratch -
     */
    constructor({ line, pc, stack, error, scratch, }) {
        this.line = ensureSafeInteger(line);
        this.pc = ensureSafeInteger(pc);
        this.stack = stack;
        this.error = error;
        this.scratch = scratch;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return DryrunState.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['line', this.line],
            ['pc', this.pc],
            ['stack', this.stack.map((v) => v.toEncodingData())],
            ['error', this.error],
            [
                'scratch',
                typeof this.scratch !== 'undefined'
                    ? this.scratch.map((v) => v.toEncodingData())
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded DryrunState: ${data}`);
        }
        return new DryrunState({
            line: data.get('line'),
            pc: data.get('pc'),
            stack: (data.get('stack') ?? []).map((v) => TealValue$1.fromEncodingData(v)),
            error: data.get('error'),
            scratch: typeof data.get('scratch') !== 'undefined'
                ? data
                    .get('scratch')
                    .map((v) => TealValue$1.fromEncodingData(v))
                : undefined,
        });
    }
}
/**
 * DryrunTxnResult contains any LogicSig or ApplicationCall program debug
 * information and state updates from a dryrun.
 */
class DryrunTxnResult {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'disassembly',
                valueSchema: new ArraySchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'app-call-messages',
                valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),
                omitEmpty: true,
            }, {
                key: 'app-call-trace',
                valueSchema: new OptionalSchema(new ArraySchema(DryrunState.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'budget-added',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'budget-consumed',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'global-delta',
                valueSchema: new OptionalSchema(new ArraySchema(EvalDeltaKeyValue$1.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'local-deltas',
                valueSchema: new OptionalSchema(new ArraySchema(AccountStateDelta$1.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'logic-sig-disassembly',
                valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),
                omitEmpty: true,
            }, {
                key: 'logic-sig-messages',
                valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),
                omitEmpty: true,
            }, {
                key: 'logic-sig-trace',
                valueSchema: new OptionalSchema(new ArraySchema(DryrunState.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'logs',
                valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `DryrunTxnResult` object.
     * @param disassembly - Disassembled program line by line.
     * @param appCallMessages -
     * @param appCallTrace -
     * @param budgetAdded - Budget added during execution of app call transaction.
     * @param budgetConsumed - Budget consumed during execution of app call transaction.
     * @param globalDelta - Application state delta.
     * @param localDeltas -
     * @param logicSigDisassembly - Disassembled lsig program line by line.
     * @param logicSigMessages -
     * @param logicSigTrace -
     * @param logs -
     */
    constructor({ disassembly, appCallMessages, appCallTrace, budgetAdded, budgetConsumed, globalDelta, localDeltas, logicSigDisassembly, logicSigMessages, logicSigTrace, logs, }) {
        this.disassembly = disassembly;
        this.appCallMessages = appCallMessages;
        this.appCallTrace = appCallTrace;
        this.budgetAdded =
            typeof budgetAdded === 'undefined'
                ? undefined
                : ensureSafeInteger(budgetAdded);
        this.budgetConsumed =
            typeof budgetConsumed === 'undefined'
                ? undefined
                : ensureSafeInteger(budgetConsumed);
        this.globalDelta = globalDelta;
        this.localDeltas = localDeltas;
        this.logicSigDisassembly = logicSigDisassembly;
        this.logicSigMessages = logicSigMessages;
        this.logicSigTrace = logicSigTrace;
        this.logs = logs;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return DryrunTxnResult.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['disassembly', this.disassembly],
            ['app-call-messages', this.appCallMessages],
            [
                'app-call-trace',
                typeof this.appCallTrace !== 'undefined'
                    ? this.appCallTrace.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['budget-added', this.budgetAdded],
            ['budget-consumed', this.budgetConsumed],
            [
                'global-delta',
                typeof this.globalDelta !== 'undefined'
                    ? this.globalDelta.map((v) => v.toEncodingData())
                    : undefined,
            ],
            [
                'local-deltas',
                typeof this.localDeltas !== 'undefined'
                    ? this.localDeltas.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['logic-sig-disassembly', this.logicSigDisassembly],
            ['logic-sig-messages', this.logicSigMessages],
            [
                'logic-sig-trace',
                typeof this.logicSigTrace !== 'undefined'
                    ? this.logicSigTrace.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['logs', this.logs],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded DryrunTxnResult: ${data}`);
        }
        return new DryrunTxnResult({
            disassembly: data.get('disassembly'),
            appCallMessages: data.get('app-call-messages'),
            appCallTrace: typeof data.get('app-call-trace') !== 'undefined'
                ? data
                    .get('app-call-trace')
                    .map((v) => DryrunState.fromEncodingData(v))
                : undefined,
            budgetAdded: data.get('budget-added'),
            budgetConsumed: data.get('budget-consumed'),
            globalDelta: typeof data.get('global-delta') !== 'undefined'
                ? data
                    .get('global-delta')
                    .map((v) => EvalDeltaKeyValue$1.fromEncodingData(v))
                : undefined,
            localDeltas: typeof data.get('local-deltas') !== 'undefined'
                ? data
                    .get('local-deltas')
                    .map((v) => AccountStateDelta$1.fromEncodingData(v))
                : undefined,
            logicSigDisassembly: data.get('logic-sig-disassembly'),
            logicSigMessages: data.get('logic-sig-messages'),
            logicSigTrace: typeof data.get('logic-sig-trace') !== 'undefined'
                ? data
                    .get('logic-sig-trace')
                    .map((v) => DryrunState.fromEncodingData(v))
                : undefined,
            logs: data.get('logs'),
        });
    }
}
/**
 * An error response with optional data field.
 */
let ErrorResponse$1 = class ErrorResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'message', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'data',
                valueSchema: new OptionalSchema(UntypedValue.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ErrorResponse` object.
     * @param message -
     * @param data -
     */
    constructor({ message, data }) {
        this.message = message;
        this.data = data;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ErrorResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['message', this.message],
            [
                'data',
                typeof this.data !== 'undefined'
                    ? this.data.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ErrorResponse: ${data}`);
        }
        return new ErrorResponse({
            message: data.get('message'),
            data: typeof data.get('data') !== 'undefined'
                ? UntypedValue.fromEncodingData(data.get('data'))
                : undefined,
        });
    }
};
/**
 * Represents a TEAL value delta.
 */
let EvalDelta$1 = class EvalDelta {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'action', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'bytes',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'uint',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `EvalDelta` object.
     * @param action - (at) delta action.
     * @param bytes - (bs) bytes value.
     * @param uint - (ui) uint value.
     */
    constructor({ action, bytes, uint, }) {
        this.action = ensureSafeInteger(action);
        this.bytes = bytes;
        this.uint = typeof uint === 'undefined' ? undefined : ensureBigInt(uint);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return EvalDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['action', this.action],
            ['bytes', this.bytes],
            ['uint', this.uint],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded EvalDelta: ${data}`);
        }
        return new EvalDelta({
            action: data.get('action'),
            bytes: data.get('bytes'),
            uint: data.get('uint'),
        });
    }
};
/**
 * Key-value pairs for StateDelta.
 */
let EvalDeltaKeyValue$1 = class EvalDeltaKeyValue {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'key', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'value', valueSchema: EvalDelta$1.encodingSchema, omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `EvalDeltaKeyValue` object.
     * @param key -
     * @param value - Represents a TEAL value delta.
     */
    constructor({ key, value }) {
        this.key = key;
        this.value = value;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return EvalDeltaKeyValue.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['key', this.key],
            ['value', this.value.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded EvalDeltaKeyValue: ${data}`);
        }
        return new EvalDeltaKeyValue({
            key: data.get('key'),
            value: EvalDelta$1.fromEncodingData(data.get('value') ?? new Map()),
        });
    }
};
/**
 * Response containing the timestamp offset in seconds
 */
class GetBlockTimeStampOffsetResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'offset',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `GetBlockTimeStampOffsetResponse` object.
     * @param offset - Timestamp offset in seconds.
     */
    constructor({ offset }) {
        this.offset = ensureSafeInteger(offset);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return GetBlockTimeStampOffsetResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([['offset', this.offset]]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded GetBlockTimeStampOffsetResponse: ${data}`);
        }
        return new GetBlockTimeStampOffsetResponse({
            offset: data.get('offset'),
        });
    }
}
/**
 * Response containing the ledger's minimum sync round
 */
class GetSyncRoundResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `GetSyncRoundResponse` object.
     * @param round - The minimum sync round for the ledger.
     */
    constructor({ round }) {
        this.round = ensureBigInt(round);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return GetSyncRoundResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([['round', this.round]]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded GetSyncRoundResponse: ${data}`);
        }
        return new GetSyncRoundResponse({
            round: data.get('round'),
        });
    }
}
/**
 * A single Delta containing the key, the previous value and the current value for
 * a single round.
 */
class KvDelta {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'key',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'value',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `KvDelta` object.
     * @param key - The key, base64 encoded.
     * @param value - The new value of the KV store entry, base64 encoded.
     */
    constructor({ key, value, }) {
        this.key = typeof key === 'string' ? base64ToBytes(key) : key;
        this.value = typeof value === 'string' ? base64ToBytes(value) : value;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return KvDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['key', this.key],
            ['value', this.value],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded KvDelta: ${data}`);
        }
        return new KvDelta({
            key: data.get('key'),
            value: data.get('value'),
        });
    }
}
/**
 * Contains a ledger delta for a single transaction group
 */
class LedgerStateDeltaForTransactionGroup {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'Delta',
                valueSchema: LedgerStateDelta.encodingSchema,
                omitEmpty: true,
            }, {
                key: 'Ids',
                valueSchema: new ArraySchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `LedgerStateDeltaForTransactionGroup` object.
     * @param delta - Ledger StateDelta object
     * @param ids -
     */
    constructor({ delta, ids }) {
        this.delta = delta;
        this.ids = ids;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return LedgerStateDeltaForTransactionGroup.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Delta', this.delta.toEncodingData()],
            ['Ids', this.ids],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded LedgerStateDeltaForTransactionGroup: ${data}`);
        }
        return new LedgerStateDeltaForTransactionGroup({
            delta: LedgerStateDelta.fromEncodingData(data.get('Delta') ?? new Map()),
            ids: data.get('Ids'),
        });
    }
}
/**
 * Proof of membership and position of a light block header.
 */
let LightBlockHeaderProof$1 = class LightBlockHeaderProof {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'index', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'proof', valueSchema: new ByteArraySchema(), omitEmpty: true }, { key: 'treedepth', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `LightBlockHeaderProof` object.
     * @param index - The index of the light block header in the vector commitment tree
     * @param proof - The encoded proof.
     * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges
     * from a leaf to the root.
     */
    constructor({ index, proof, treedepth, }) {
        this.index = ensureSafeInteger(index);
        this.proof = typeof proof === 'string' ? base64ToBytes(proof) : proof;
        this.treedepth = ensureSafeInteger(treedepth);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return LightBlockHeaderProof.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['index', this.index],
            ['proof', this.proof],
            ['treedepth', this.treedepth],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded LightBlockHeaderProof: ${data}`);
        }
        return new LightBlockHeaderProof({
            index: data.get('index'),
            proof: data.get('proof'),
            treedepth: data.get('treedepth'),
        });
    }
};
/**
 *
 */
class NodeStatusResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'catchup-time',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, { key: 'last-round', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'last-version',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            }, {
                key: 'next-version',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            }, {
                key: 'next-version-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'next-version-supported',
                valueSchema: new BooleanSchema(),
                omitEmpty: true,
            }, {
                key: 'stopped-at-unsupported-round',
                valueSchema: new BooleanSchema(),
                omitEmpty: true,
            }, {
                key: 'time-since-last-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'catchpoint',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'catchpoint-acquired-blocks',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'catchpoint-processed-accounts',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'catchpoint-processed-kvs',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'catchpoint-total-accounts',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'catchpoint-total-blocks',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'catchpoint-total-kvs',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'catchpoint-verified-accounts',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'catchpoint-verified-kvs',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'last-catchpoint',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'upgrade-delay',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'upgrade-next-protocol-vote-before',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'upgrade-no-votes',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'upgrade-node-vote',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'upgrade-vote-rounds',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'upgrade-votes',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'upgrade-votes-required',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'upgrade-yes-votes',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `NodeStatusResponse` object.
     * @param catchupTime - CatchupTime in nanoseconds
     * @param lastRound - LastRound indicates the last round seen
     * @param lastVersion - LastVersion indicates the last consensus version supported
     * @param nextVersion - NextVersion of consensus protocol to use
     * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply
     * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported
     * by this node
     * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new
     * rounds and has stopped making progress
     * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds
     * @param catchpoint - The current catchpoint that is being caught up to
     * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the
     * catchup
     * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so
     * far as part of the catchup
     * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been
     * processed so far as part of the catchup
     * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint
     * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint
     * catchup
     * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint
     * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so
     * far as part of the catchup
     * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been
     * verified so far as part of the catchup
     * @param lastCatchpoint - The last catchpoint seen by the node
     * @param upgradeDelay - Upgrade delay
     * @param upgradeNextProtocolVoteBefore - Next protocol round
     * @param upgradeNoVotes - No votes cast for consensus upgrade
     * @param upgradeNodeVote - This node's upgrade vote
     * @param upgradeVoteRounds - Total voting rounds for current upgrade
     * @param upgradeVotes - Total votes cast for consensus upgrade
     * @param upgradeVotesRequired - Yes votes required for consensus upgrade
     * @param upgradeYesVotes - Yes votes cast for consensus upgrade
     */
    constructor({ catchupTime, lastRound, lastVersion, nextVersion, nextVersionRound, nextVersionSupported, stoppedAtUnsupportedRound, timeSinceLastRound, catchpoint, catchpointAcquiredBlocks, catchpointProcessedAccounts, catchpointProcessedKvs, catchpointTotalAccounts, catchpointTotalBlocks, catchpointTotalKvs, catchpointVerifiedAccounts, catchpointVerifiedKvs, lastCatchpoint, upgradeDelay, upgradeNextProtocolVoteBefore, upgradeNoVotes, upgradeNodeVote, upgradeVoteRounds, upgradeVotes, upgradeVotesRequired, upgradeYesVotes, }) {
        this.catchupTime = ensureBigInt(catchupTime);
        this.lastRound = ensureBigInt(lastRound);
        this.lastVersion = lastVersion;
        this.nextVersion = nextVersion;
        this.nextVersionRound = ensureBigInt(nextVersionRound);
        this.nextVersionSupported = nextVersionSupported;
        this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;
        this.timeSinceLastRound = ensureBigInt(timeSinceLastRound);
        this.catchpoint = catchpoint;
        this.catchpointAcquiredBlocks =
            typeof catchpointAcquiredBlocks === 'undefined'
                ? undefined
                : ensureSafeInteger(catchpointAcquiredBlocks);
        this.catchpointProcessedAccounts =
            typeof catchpointProcessedAccounts === 'undefined'
                ? undefined
                : ensureSafeInteger(catchpointProcessedAccounts);
        this.catchpointProcessedKvs =
            typeof catchpointProcessedKvs === 'undefined'
                ? undefined
                : ensureSafeInteger(catchpointProcessedKvs);
        this.catchpointTotalAccounts =
            typeof catchpointTotalAccounts === 'undefined'
                ? undefined
                : ensureSafeInteger(catchpointTotalAccounts);
        this.catchpointTotalBlocks =
            typeof catchpointTotalBlocks === 'undefined'
                ? undefined
                : ensureSafeInteger(catchpointTotalBlocks);
        this.catchpointTotalKvs =
            typeof catchpointTotalKvs === 'undefined'
                ? undefined
                : ensureSafeInteger(catchpointTotalKvs);
        this.catchpointVerifiedAccounts =
            typeof catchpointVerifiedAccounts === 'undefined'
                ? undefined
                : ensureSafeInteger(catchpointVerifiedAccounts);
        this.catchpointVerifiedKvs =
            typeof catchpointVerifiedKvs === 'undefined'
                ? undefined
                : ensureSafeInteger(catchpointVerifiedKvs);
        this.lastCatchpoint = lastCatchpoint;
        this.upgradeDelay =
            typeof upgradeDelay === 'undefined'
                ? undefined
                : ensureBigInt(upgradeDelay);
        this.upgradeNextProtocolVoteBefore =
            typeof upgradeNextProtocolVoteBefore === 'undefined'
                ? undefined
                : ensureBigInt(upgradeNextProtocolVoteBefore);
        this.upgradeNoVotes =
            typeof upgradeNoVotes === 'undefined'
                ? undefined
                : ensureSafeInteger(upgradeNoVotes);
        this.upgradeNodeVote = upgradeNodeVote;
        this.upgradeVoteRounds =
            typeof upgradeVoteRounds === 'undefined'
                ? undefined
                : ensureSafeInteger(upgradeVoteRounds);
        this.upgradeVotes =
            typeof upgradeVotes === 'undefined'
                ? undefined
                : ensureSafeInteger(upgradeVotes);
        this.upgradeVotesRequired =
            typeof upgradeVotesRequired === 'undefined'
                ? undefined
                : ensureSafeInteger(upgradeVotesRequired);
        this.upgradeYesVotes =
            typeof upgradeYesVotes === 'undefined'
                ? undefined
                : ensureSafeInteger(upgradeYesVotes);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return NodeStatusResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['catchup-time', this.catchupTime],
            ['last-round', this.lastRound],
            ['last-version', this.lastVersion],
            ['next-version', this.nextVersion],
            ['next-version-round', this.nextVersionRound],
            ['next-version-supported', this.nextVersionSupported],
            ['stopped-at-unsupported-round', this.stoppedAtUnsupportedRound],
            ['time-since-last-round', this.timeSinceLastRound],
            ['catchpoint', this.catchpoint],
            ['catchpoint-acquired-blocks', this.catchpointAcquiredBlocks],
            ['catchpoint-processed-accounts', this.catchpointProcessedAccounts],
            ['catchpoint-processed-kvs', this.catchpointProcessedKvs],
            ['catchpoint-total-accounts', this.catchpointTotalAccounts],
            ['catchpoint-total-blocks', this.catchpointTotalBlocks],
            ['catchpoint-total-kvs', this.catchpointTotalKvs],
            ['catchpoint-verified-accounts', this.catchpointVerifiedAccounts],
            ['catchpoint-verified-kvs', this.catchpointVerifiedKvs],
            ['last-catchpoint', this.lastCatchpoint],
            ['upgrade-delay', this.upgradeDelay],
            ['upgrade-next-protocol-vote-before', this.upgradeNextProtocolVoteBefore],
            ['upgrade-no-votes', this.upgradeNoVotes],
            ['upgrade-node-vote', this.upgradeNodeVote],
            ['upgrade-vote-rounds', this.upgradeVoteRounds],
            ['upgrade-votes', this.upgradeVotes],
            ['upgrade-votes-required', this.upgradeVotesRequired],
            ['upgrade-yes-votes', this.upgradeYesVotes],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded NodeStatusResponse: ${data}`);
        }
        return new NodeStatusResponse({
            catchupTime: data.get('catchup-time'),
            lastRound: data.get('last-round'),
            lastVersion: data.get('last-version'),
            nextVersion: data.get('next-version'),
            nextVersionRound: data.get('next-version-round'),
            nextVersionSupported: data.get('next-version-supported'),
            stoppedAtUnsupportedRound: data.get('stopped-at-unsupported-round'),
            timeSinceLastRound: data.get('time-since-last-round'),
            catchpoint: data.get('catchpoint'),
            catchpointAcquiredBlocks: data.get('catchpoint-acquired-blocks'),
            catchpointProcessedAccounts: data.get('catchpoint-processed-accounts'),
            catchpointProcessedKvs: data.get('catchpoint-processed-kvs'),
            catchpointTotalAccounts: data.get('catchpoint-total-accounts'),
            catchpointTotalBlocks: data.get('catchpoint-total-blocks'),
            catchpointTotalKvs: data.get('catchpoint-total-kvs'),
            catchpointVerifiedAccounts: data.get('catchpoint-verified-accounts'),
            catchpointVerifiedKvs: data.get('catchpoint-verified-kvs'),
            lastCatchpoint: data.get('last-catchpoint'),
            upgradeDelay: data.get('upgrade-delay'),
            upgradeNextProtocolVoteBefore: data.get('upgrade-next-protocol-vote-before'),
            upgradeNoVotes: data.get('upgrade-no-votes'),
            upgradeNodeVote: data.get('upgrade-node-vote'),
            upgradeVoteRounds: data.get('upgrade-vote-rounds'),
            upgradeVotes: data.get('upgrade-votes'),
            upgradeVotesRequired: data.get('upgrade-votes-required'),
            upgradeYesVotes: data.get('upgrade-yes-votes'),
        });
    }
}
/**
 * Details about a pending transaction. If the transaction was recently confirmed,
 * includes confirmation details like the round and reward details.
 */
class PendingTransactionResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'pool-error', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'txn',
                valueSchema: SignedTransaction.encodingSchema,
                omitEmpty: true,
            }, {
                key: 'application-index',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'asset-closing-amount',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'asset-index',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'close-rewards',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'closing-amount',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'confirmed-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'global-state-delta',
                valueSchema: new OptionalSchema(new ArraySchema(EvalDeltaKeyValue$1.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'inner-txns',
                valueSchema: new OptionalSchema(new ArraySchema(PendingTransactionResponse.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'local-state-delta',
                valueSchema: new OptionalSchema(new ArraySchema(AccountStateDelta$1.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'logs',
                valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),
                omitEmpty: true,
            }, {
                key: 'receiver-rewards',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'sender-rewards',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `PendingTransactionResponse` object.
     * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool
     * (and specifies why that happened). An empty string indicates the transaction
     * wasn't kicked out of this node's txpool due to an error.
     * @param txn - The raw signed transaction.
     * @param applicationIndex - The application index if the transaction was found and it created an
     * application.
     * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.
     * @param assetIndex - The asset index if the transaction was found and it created an asset.
     * @param closeRewards - Rewards in microalgos applied to the close remainder to account.
     * @param closingAmount - Closing amount for the transaction.
     * @param confirmedRound - The round where this transaction was confirmed, if present.
     * @param globalStateDelta - Global state key/value changes for the application being executed by this
     * transaction.
     * @param innerTxns - Inner transactions produced by application execution.
     * @param localStateDelta - Local state key/value changes for the application being executed by this
     * transaction.
     * @param logs - Logs for the application being executed by this transaction.
     * @param receiverRewards - Rewards in microalgos applied to the receiver account.
     * @param senderRewards - Rewards in microalgos applied to the sender account.
     */
    constructor({ poolError, txn, applicationIndex, assetClosingAmount, assetIndex, closeRewards, closingAmount, confirmedRound, globalStateDelta, innerTxns, localStateDelta, logs, receiverRewards, senderRewards, }) {
        this.poolError = poolError;
        this.txn = txn;
        this.applicationIndex =
            typeof applicationIndex === 'undefined'
                ? undefined
                : ensureBigInt(applicationIndex);
        this.assetClosingAmount =
            typeof assetClosingAmount === 'undefined'
                ? undefined
                : ensureBigInt(assetClosingAmount);
        this.assetIndex =
            typeof assetIndex === 'undefined' ? undefined : ensureBigInt(assetIndex);
        this.closeRewards =
            typeof closeRewards === 'undefined'
                ? undefined
                : ensureBigInt(closeRewards);
        this.closingAmount =
            typeof closingAmount === 'undefined'
                ? undefined
                : ensureBigInt(closingAmount);
        this.confirmedRound =
            typeof confirmedRound === 'undefined'
                ? undefined
                : ensureBigInt(confirmedRound);
        this.globalStateDelta = globalStateDelta;
        this.innerTxns = innerTxns;
        this.localStateDelta = localStateDelta;
        this.logs = logs;
        this.receiverRewards =
            typeof receiverRewards === 'undefined'
                ? undefined
                : ensureBigInt(receiverRewards);
        this.senderRewards =
            typeof senderRewards === 'undefined'
                ? undefined
                : ensureBigInt(senderRewards);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return PendingTransactionResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['pool-error', this.poolError],
            ['txn', this.txn.toEncodingData()],
            ['application-index', this.applicationIndex],
            ['asset-closing-amount', this.assetClosingAmount],
            ['asset-index', this.assetIndex],
            ['close-rewards', this.closeRewards],
            ['closing-amount', this.closingAmount],
            ['confirmed-round', this.confirmedRound],
            [
                'global-state-delta',
                typeof this.globalStateDelta !== 'undefined'
                    ? this.globalStateDelta.map((v) => v.toEncodingData())
                    : undefined,
            ],
            [
                'inner-txns',
                typeof this.innerTxns !== 'undefined'
                    ? this.innerTxns.map((v) => v.toEncodingData())
                    : undefined,
            ],
            [
                'local-state-delta',
                typeof this.localStateDelta !== 'undefined'
                    ? this.localStateDelta.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['logs', this.logs],
            ['receiver-rewards', this.receiverRewards],
            ['sender-rewards', this.senderRewards],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded PendingTransactionResponse: ${data}`);
        }
        return new PendingTransactionResponse({
            poolError: data.get('pool-error'),
            txn: SignedTransaction.fromEncodingData(data.get('txn') ?? new Map()),
            applicationIndex: data.get('application-index'),
            assetClosingAmount: data.get('asset-closing-amount'),
            assetIndex: data.get('asset-index'),
            closeRewards: data.get('close-rewards'),
            closingAmount: data.get('closing-amount'),
            confirmedRound: data.get('confirmed-round'),
            globalStateDelta: typeof data.get('global-state-delta') !== 'undefined'
                ? data
                    .get('global-state-delta')
                    .map((v) => EvalDeltaKeyValue$1.fromEncodingData(v))
                : undefined,
            innerTxns: typeof data.get('inner-txns') !== 'undefined'
                ? data
                    .get('inner-txns')
                    .map((v) => PendingTransactionResponse.fromEncodingData(v))
                : undefined,
            localStateDelta: typeof data.get('local-state-delta') !== 'undefined'
                ? data
                    .get('local-state-delta')
                    .map((v) => AccountStateDelta$1.fromEncodingData(v))
                : undefined,
            logs: data.get('logs'),
            receiverRewards: data.get('receiver-rewards'),
            senderRewards: data.get('sender-rewards'),
        });
    }
}
/**
 * A potentially truncated list of transactions currently in the node's transaction
 * pool. You can compute whether or not the list is truncated if the number of
 * elements in the **top-transactions** array is fewer than **total-transactions**.
 */
class PendingTransactionsResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'top-transactions',
                valueSchema: new ArraySchema(SignedTransaction.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'total-transactions',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `PendingTransactionsResponse` object.
     * @param topTransactions - An array of signed transaction objects.
     * @param totalTransactions - Total number of transactions in the pool.
     */
    constructor({ topTransactions, totalTransactions, }) {
        this.topTransactions = topTransactions;
        this.totalTransactions = ensureSafeInteger(totalTransactions);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return PendingTransactionsResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['top-transactions', this.topTransactions.map((v) => v.toEncodingData())],
            ['total-transactions', this.totalTransactions],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded PendingTransactionsResponse: ${data}`);
        }
        return new PendingTransactionsResponse({
            topTransactions: (data.get('top-transactions') ?? []).map((v) => SignedTransaction.fromEncodingData(v)),
            totalTransactions: data.get('total-transactions'),
        });
    }
}
/**
 * Transaction ID of the submission.
 */
class PostTransactionsResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'txId',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `PostTransactionsResponse` object.
     * @param txid - encoding of the transaction hash.
     */
    constructor({ txid }) {
        this.txid = txid;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return PostTransactionsResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([['txId', this.txid]]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded PostTransactionsResponse: ${data}`);
        }
        return new PostTransactionsResponse({
            txid: data.get('txId'),
        });
    }
}
/**
 * A write operation into a scratch slot.
 */
class ScratchChange {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'new-value',
                valueSchema: AvmValue.encodingSchema,
                omitEmpty: true,
            }, { key: 'slot', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ScratchChange` object.
     * @param newValue - Represents an AVM value.
     * @param slot - The scratch slot written.
     */
    constructor({ newValue, slot, }) {
        this.newValue = newValue;
        this.slot = ensureSafeInteger(slot);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ScratchChange.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['new-value', this.newValue.toEncodingData()],
            ['slot', this.slot],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ScratchChange: ${data}`);
        }
        return new ScratchChange({
            newValue: AvmValue.fromEncodingData(data.get('new-value') ?? new Map()),
            slot: data.get('slot'),
        });
    }
}
/**
 * Initial states of resources that were accessed during simulation.
 */
class SimulateInitialStates {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'app-initial-states',
                valueSchema: new OptionalSchema(new ArraySchema(ApplicationInitialStates.encodingSchema)),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SimulateInitialStates` object.
     * @param appInitialStates - The initial states of accessed application before simulation. The order of this
     * array is arbitrary.
     */
    constructor({ appInitialStates, }) {
        this.appInitialStates = appInitialStates;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SimulateInitialStates.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'app-initial-states',
                typeof this.appInitialStates !== 'undefined'
                    ? this.appInitialStates.map((v) => v.toEncodingData())
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SimulateInitialStates: ${data}`);
        }
        return new SimulateInitialStates({
            appInitialStates: typeof data.get('app-initial-states') !== 'undefined'
                ? data
                    .get('app-initial-states')
                    .map((v) => ApplicationInitialStates.fromEncodingData(v))
                : undefined,
        });
    }
}
/**
 * Request type for simulation endpoint.
 */
class SimulateRequest {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'txn-groups',
                valueSchema: new ArraySchema(SimulateRequestTransactionGroup.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'allow-empty-signatures',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'allow-more-logging',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'allow-unnamed-resources',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'exec-trace-config',
                valueSchema: new OptionalSchema(SimulateTraceConfig.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'extra-opcode-budget',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'fix-signers',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SimulateRequest` object.
     * @param txnGroups - The transaction groups to simulate.
     * @param allowEmptySignatures - Allows transactions without signatures to be simulated as if they had correct
     * signatures.
     * @param allowMoreLogging - Lifts limits on log opcode usage during simulation.
     * @param allowUnnamedResources - Allows access to unnamed resources during simulation.
     * @param execTraceConfig - An object that configures simulation execution trace.
     * @param extraOpcodeBudget - Applies extra opcode budget during simulation for each transaction group.
     * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed
     * during evaluation.
     * @param round - If provided, specifies the round preceding the simulation. State changes through
     * this round will be used to run this simulation. Usually only the 4 most recent
     * rounds will be available (controlled by the node config value MaxAcctLookback).
     * If not specified, defaults to the latest available round.
     */
    constructor({ txnGroups, allowEmptySignatures, allowMoreLogging, allowUnnamedResources, execTraceConfig, extraOpcodeBudget, fixSigners, round, }) {
        this.txnGroups = txnGroups;
        this.allowEmptySignatures = allowEmptySignatures;
        this.allowMoreLogging = allowMoreLogging;
        this.allowUnnamedResources = allowUnnamedResources;
        this.execTraceConfig = execTraceConfig;
        this.extraOpcodeBudget =
            typeof extraOpcodeBudget === 'undefined'
                ? undefined
                : ensureSafeInteger(extraOpcodeBudget);
        this.fixSigners = fixSigners;
        this.round = typeof round === 'undefined' ? undefined : ensureBigInt(round);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SimulateRequest.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['txn-groups', this.txnGroups.map((v) => v.toEncodingData())],
            ['allow-empty-signatures', this.allowEmptySignatures],
            ['allow-more-logging', this.allowMoreLogging],
            ['allow-unnamed-resources', this.allowUnnamedResources],
            [
                'exec-trace-config',
                typeof this.execTraceConfig !== 'undefined'
                    ? this.execTraceConfig.toEncodingData()
                    : undefined,
            ],
            ['extra-opcode-budget', this.extraOpcodeBudget],
            ['fix-signers', this.fixSigners],
            ['round', this.round],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SimulateRequest: ${data}`);
        }
        return new SimulateRequest({
            txnGroups: (data.get('txn-groups') ?? []).map((v) => SimulateRequestTransactionGroup.fromEncodingData(v)),
            allowEmptySignatures: data.get('allow-empty-signatures'),
            allowMoreLogging: data.get('allow-more-logging'),
            allowUnnamedResources: data.get('allow-unnamed-resources'),
            execTraceConfig: typeof data.get('exec-trace-config') !== 'undefined'
                ? SimulateTraceConfig.fromEncodingData(data.get('exec-trace-config'))
                : undefined,
            extraOpcodeBudget: data.get('extra-opcode-budget'),
            fixSigners: data.get('fix-signers'),
            round: data.get('round'),
        });
    }
}
/**
 * A transaction group to simulate.
 */
class SimulateRequestTransactionGroup {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'txns',
                valueSchema: new ArraySchema(SignedTransaction.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SimulateRequestTransactionGroup` object.
     * @param txns - An atomic transaction group.
     */
    constructor({ txns }) {
        this.txns = txns;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SimulateRequestTransactionGroup.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['txns', this.txns.map((v) => v.toEncodingData())],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SimulateRequestTransactionGroup: ${data}`);
        }
        return new SimulateRequestTransactionGroup({
            txns: (data.get('txns') ?? []).map((v) => SignedTransaction.fromEncodingData(v)),
        });
    }
}
/**
 * Result of a transaction group simulation.
 */
class SimulateResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'last-round', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'txn-groups',
                valueSchema: new ArraySchema(SimulateTransactionGroupResult.encodingSchema),
                omitEmpty: true,
            }, { key: 'version', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'eval-overrides',
                valueSchema: new OptionalSchema(SimulationEvalOverrides.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'exec-trace-config',
                valueSchema: new OptionalSchema(SimulateTraceConfig.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'initial-states',
                valueSchema: new OptionalSchema(SimulateInitialStates.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SimulateResponse` object.
     * @param lastRound - The round immediately preceding this simulation. State changes through this
     * round were used to run this simulation.
     * @param txnGroups - A result object for each transaction group that was simulated.
     * @param version - The version of this response object.
     * @param evalOverrides - The set of parameters and limits override during simulation. If this set of
     * parameters is present, then evaluation parameters may differ from standard
     * evaluation in certain ways.
     * @param execTraceConfig - An object that configures simulation execution trace.
     * @param initialStates - Initial states of resources that were accessed during simulation.
     */
    constructor({ lastRound, txnGroups, version, evalOverrides, execTraceConfig, initialStates, }) {
        this.lastRound = ensureBigInt(lastRound);
        this.txnGroups = txnGroups;
        this.version = ensureSafeInteger(version);
        this.evalOverrides = evalOverrides;
        this.execTraceConfig = execTraceConfig;
        this.initialStates = initialStates;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SimulateResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['last-round', this.lastRound],
            ['txn-groups', this.txnGroups.map((v) => v.toEncodingData())],
            ['version', this.version],
            [
                'eval-overrides',
                typeof this.evalOverrides !== 'undefined'
                    ? this.evalOverrides.toEncodingData()
                    : undefined,
            ],
            [
                'exec-trace-config',
                typeof this.execTraceConfig !== 'undefined'
                    ? this.execTraceConfig.toEncodingData()
                    : undefined,
            ],
            [
                'initial-states',
                typeof this.initialStates !== 'undefined'
                    ? this.initialStates.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SimulateResponse: ${data}`);
        }
        return new SimulateResponse({
            lastRound: data.get('last-round'),
            txnGroups: (data.get('txn-groups') ?? []).map((v) => SimulateTransactionGroupResult.fromEncodingData(v)),
            version: data.get('version'),
            evalOverrides: typeof data.get('eval-overrides') !== 'undefined'
                ? SimulationEvalOverrides.fromEncodingData(data.get('eval-overrides'))
                : undefined,
            execTraceConfig: typeof data.get('exec-trace-config') !== 'undefined'
                ? SimulateTraceConfig.fromEncodingData(data.get('exec-trace-config'))
                : undefined,
            initialStates: typeof data.get('initial-states') !== 'undefined'
                ? SimulateInitialStates.fromEncodingData(data.get('initial-states'))
                : undefined,
        });
    }
}
/**
 * An object that configures simulation execution trace.
 */
class SimulateTraceConfig {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'enable',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'scratch-change',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'stack-change',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'state-change',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SimulateTraceConfig` object.
     * @param enable - A boolean option for opting in execution trace features simulation endpoint.
     * @param scratchChange - A boolean option enabling returning scratch slot changes together with execution
     * trace during simulation.
     * @param stackChange - A boolean option enabling returning stack changes together with execution trace
     * during simulation.
     * @param stateChange - A boolean option enabling returning application state changes (global, local,
     * and box changes) with the execution trace during simulation.
     */
    constructor({ enable, scratchChange, stackChange, stateChange, }) {
        this.enable = enable;
        this.scratchChange = scratchChange;
        this.stackChange = stackChange;
        this.stateChange = stateChange;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SimulateTraceConfig.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['enable', this.enable],
            ['scratch-change', this.scratchChange],
            ['stack-change', this.stackChange],
            ['state-change', this.stateChange],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SimulateTraceConfig: ${data}`);
        }
        return new SimulateTraceConfig({
            enable: data.get('enable'),
            scratchChange: data.get('scratch-change'),
            stackChange: data.get('stack-change'),
            stateChange: data.get('state-change'),
        });
    }
}
/**
 * Simulation result for an atomic transaction group
 */
class SimulateTransactionGroupResult {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'txn-results',
                valueSchema: new ArraySchema(SimulateTransactionResult.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'app-budget-added',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'app-budget-consumed',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'failed-at',
                valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),
                omitEmpty: true,
            }, {
                key: 'failure-message',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'unnamed-resources-accessed',
                valueSchema: new OptionalSchema(SimulateUnnamedResourcesAccessed.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SimulateTransactionGroupResult` object.
     * @param txnResults - Simulation result for individual transactions
     * @param appBudgetAdded - Total budget added during execution of app calls in the transaction group.
     * @param appBudgetConsumed - Total budget consumed during execution of app calls in the transaction group.
     * @param failedAt - If present, indicates which transaction in this group caused the failure. This
     * array represents the path to the failing transaction. Indexes are zero based,
     * the first element indicates the top-level transaction, and successive elements
     * indicate deeper inner transactions.
     * @param failureMessage - If present, indicates that the transaction group failed and specifies why that
     * happened
     * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have
     * caused failure, but were allowed in simulation. Depending on where this object
     * is in the response, the unnamed resources it contains may or may not qualify for
     * group resource sharing. If this is a field in SimulateTransactionGroupResult,
     * the resources do qualify, but if this is a field in SimulateTransactionResult,
     * they do not qualify. In order to make this group valid for actual submission,
     * resources that qualify for group sharing can be made available by any
     * transaction of the group; otherwise, resources must be placed in the same
     * transaction which accessed them.
     */
    constructor({ txnResults, appBudgetAdded, appBudgetConsumed, failedAt, failureMessage, unnamedResourcesAccessed, }) {
        this.txnResults = txnResults;
        this.appBudgetAdded =
            typeof appBudgetAdded === 'undefined'
                ? undefined
                : ensureSafeInteger(appBudgetAdded);
        this.appBudgetConsumed =
            typeof appBudgetConsumed === 'undefined'
                ? undefined
                : ensureSafeInteger(appBudgetConsumed);
        this.failedAt =
            typeof failedAt === 'undefined'
                ? undefined
                : failedAt.map(ensureSafeInteger);
        this.failureMessage = failureMessage;
        this.unnamedResourcesAccessed = unnamedResourcesAccessed;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SimulateTransactionGroupResult.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['txn-results', this.txnResults.map((v) => v.toEncodingData())],
            ['app-budget-added', this.appBudgetAdded],
            ['app-budget-consumed', this.appBudgetConsumed],
            ['failed-at', this.failedAt],
            ['failure-message', this.failureMessage],
            [
                'unnamed-resources-accessed',
                typeof this.unnamedResourcesAccessed !== 'undefined'
                    ? this.unnamedResourcesAccessed.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SimulateTransactionGroupResult: ${data}`);
        }
        return new SimulateTransactionGroupResult({
            txnResults: (data.get('txn-results') ?? []).map((v) => SimulateTransactionResult.fromEncodingData(v)),
            appBudgetAdded: data.get('app-budget-added'),
            appBudgetConsumed: data.get('app-budget-consumed'),
            failedAt: data.get('failed-at'),
            failureMessage: data.get('failure-message'),
            unnamedResourcesAccessed: typeof data.get('unnamed-resources-accessed') !== 'undefined'
                ? SimulateUnnamedResourcesAccessed.fromEncodingData(data.get('unnamed-resources-accessed'))
                : undefined,
        });
    }
}
/**
 * Simulation result for an individual transaction
 */
class SimulateTransactionResult {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'txn-result',
                valueSchema: PendingTransactionResponse.encodingSchema,
                omitEmpty: true,
            }, {
                key: 'app-budget-consumed',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'exec-trace',
                valueSchema: new OptionalSchema(SimulationTransactionExecTrace.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'fixed-signer',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'logic-sig-budget-consumed',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'unnamed-resources-accessed',
                valueSchema: new OptionalSchema(SimulateUnnamedResourcesAccessed.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SimulateTransactionResult` object.
     * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,
     * includes confirmation details like the round and reward details.
     * @param appBudgetConsumed - Budget used during execution of an app call transaction. This value includes
     * budged used by inner app calls spawned by this transaction.
     * @param execTrace - The execution trace of calling an app or a logic sig, containing the inner app
     * call trace in a recursive way.
     * @param fixedSigner - The account that needed to sign this transaction when no signature was provided
     * and the provided signer was incorrect.
     * @param logicSigBudgetConsumed - Budget used during execution of a logic sig transaction.
     * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have
     * caused failure, but were allowed in simulation. Depending on where this object
     * is in the response, the unnamed resources it contains may or may not qualify for
     * group resource sharing. If this is a field in SimulateTransactionGroupResult,
     * the resources do qualify, but if this is a field in SimulateTransactionResult,
     * they do not qualify. In order to make this group valid for actual submission,
     * resources that qualify for group sharing can be made available by any
     * transaction of the group; otherwise, resources must be placed in the same
     * transaction which accessed them.
     */
    constructor({ txnResult, appBudgetConsumed, execTrace, fixedSigner, logicSigBudgetConsumed, unnamedResourcesAccessed, }) {
        this.txnResult = txnResult;
        this.appBudgetConsumed =
            typeof appBudgetConsumed === 'undefined'
                ? undefined
                : ensureSafeInteger(appBudgetConsumed);
        this.execTrace = execTrace;
        this.fixedSigner =
            typeof fixedSigner === 'string'
                ? Address.fromString(fixedSigner)
                : fixedSigner;
        this.logicSigBudgetConsumed =
            typeof logicSigBudgetConsumed === 'undefined'
                ? undefined
                : ensureSafeInteger(logicSigBudgetConsumed);
        this.unnamedResourcesAccessed = unnamedResourcesAccessed;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SimulateTransactionResult.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['txn-result', this.txnResult.toEncodingData()],
            ['app-budget-consumed', this.appBudgetConsumed],
            [
                'exec-trace',
                typeof this.execTrace !== 'undefined'
                    ? this.execTrace.toEncodingData()
                    : undefined,
            ],
            [
                'fixed-signer',
                typeof this.fixedSigner !== 'undefined'
                    ? this.fixedSigner.toString()
                    : undefined,
            ],
            ['logic-sig-budget-consumed', this.logicSigBudgetConsumed],
            [
                'unnamed-resources-accessed',
                typeof this.unnamedResourcesAccessed !== 'undefined'
                    ? this.unnamedResourcesAccessed.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SimulateTransactionResult: ${data}`);
        }
        return new SimulateTransactionResult({
            txnResult: PendingTransactionResponse.fromEncodingData(data.get('txn-result') ?? new Map()),
            appBudgetConsumed: data.get('app-budget-consumed'),
            execTrace: typeof data.get('exec-trace') !== 'undefined'
                ? SimulationTransactionExecTrace.fromEncodingData(data.get('exec-trace'))
                : undefined,
            fixedSigner: data.get('fixed-signer'),
            logicSigBudgetConsumed: data.get('logic-sig-budget-consumed'),
            unnamedResourcesAccessed: typeof data.get('unnamed-resources-accessed') !== 'undefined'
                ? SimulateUnnamedResourcesAccessed.fromEncodingData(data.get('unnamed-resources-accessed'))
                : undefined,
        });
    }
}
/**
 * These are resources that were accessed by this group that would normally have
 * caused failure, but were allowed in simulation. Depending on where this object
 * is in the response, the unnamed resources it contains may or may not qualify for
 * group resource sharing. If this is a field in SimulateTransactionGroupResult,
 * the resources do qualify, but if this is a field in SimulateTransactionResult,
 * they do not qualify. In order to make this group valid for actual submission,
 * resources that qualify for group sharing can be made available by any
 * transaction of the group; otherwise, resources must be placed in the same
 * transaction which accessed them.
 */
class SimulateUnnamedResourcesAccessed {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'accounts',
                valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),
                omitEmpty: true,
            }, {
                key: 'app-locals',
                valueSchema: new OptionalSchema(new ArraySchema(ApplicationLocalReference.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'apps',
                valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),
                omitEmpty: true,
            }, {
                key: 'asset-holdings',
                valueSchema: new OptionalSchema(new ArraySchema(AssetHoldingReference.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'assets',
                valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),
                omitEmpty: true,
            }, {
                key: 'boxes',
                valueSchema: new OptionalSchema(new ArraySchema(BoxReference.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'extra-box-refs',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SimulateUnnamedResourcesAccessed` object.
     * @param accounts - The unnamed accounts that were referenced. The order of this array is arbitrary.
     * @param appLocals - The unnamed application local states that were referenced. The order of this
     * array is arbitrary.
     * @param apps - The unnamed applications that were referenced. The order of this array is
     * arbitrary.
     * @param assetHoldings - The unnamed asset holdings that were referenced. The order of this array is
     * arbitrary.
     * @param assets - The unnamed assets that were referenced. The order of this array is arbitrary.
     * @param boxes - The unnamed boxes that were referenced. The order of this array is arbitrary.
     * @param extraBoxRefs - The number of extra box references used to increase the IO budget. This is in
     * addition to the references defined in the input transaction group and any
     * referenced to unnamed boxes.
     */
    constructor({ accounts, appLocals, apps, assetHoldings, assets, boxes, extraBoxRefs, }) {
        this.accounts =
            typeof accounts !== 'undefined'
                ? accounts.map((addr) => typeof addr === 'string' ? Address.fromString(addr) : addr)
                : undefined;
        this.appLocals = appLocals;
        this.apps =
            typeof apps === 'undefined' ? undefined : apps.map(ensureBigInt);
        this.assetHoldings = assetHoldings;
        this.assets =
            typeof assets === 'undefined' ? undefined : assets.map(ensureBigInt);
        this.boxes = boxes;
        this.extraBoxRefs =
            typeof extraBoxRefs === 'undefined'
                ? undefined
                : ensureSafeInteger(extraBoxRefs);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SimulateUnnamedResourcesAccessed.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'accounts',
                typeof this.accounts !== 'undefined'
                    ? this.accounts.map((v) => v.toString())
                    : undefined,
            ],
            [
                'app-locals',
                typeof this.appLocals !== 'undefined'
                    ? this.appLocals.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['apps', this.apps],
            [
                'asset-holdings',
                typeof this.assetHoldings !== 'undefined'
                    ? this.assetHoldings.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['assets', this.assets],
            [
                'boxes',
                typeof this.boxes !== 'undefined'
                    ? this.boxes.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['extra-box-refs', this.extraBoxRefs],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SimulateUnnamedResourcesAccessed: ${data}`);
        }
        return new SimulateUnnamedResourcesAccessed({
            accounts: data.get('accounts'),
            appLocals: typeof data.get('app-locals') !== 'undefined'
                ? data
                    .get('app-locals')
                    .map((v) => ApplicationLocalReference.fromEncodingData(v))
                : undefined,
            apps: data.get('apps'),
            assetHoldings: typeof data.get('asset-holdings') !== 'undefined'
                ? data
                    .get('asset-holdings')
                    .map((v) => AssetHoldingReference.fromEncodingData(v))
                : undefined,
            assets: data.get('assets'),
            boxes: typeof data.get('boxes') !== 'undefined'
                ? data
                    .get('boxes')
                    .map((v) => BoxReference.fromEncodingData(v))
                : undefined,
            extraBoxRefs: data.get('extra-box-refs'),
        });
    }
}
/**
 * The set of parameters and limits override during simulation. If this set of
 * parameters is present, then evaluation parameters may differ from standard
 * evaluation in certain ways.
 */
class SimulationEvalOverrides {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'allow-empty-signatures',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'allow-unnamed-resources',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'extra-opcode-budget',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'fix-signers',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'max-log-calls',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'max-log-size',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SimulationEvalOverrides` object.
     * @param allowEmptySignatures - If true, transactions without signatures are allowed and simulated as if they
     * were properly signed.
     * @param allowUnnamedResources - If true, allows access to unnamed resources during simulation.
     * @param extraOpcodeBudget - The extra opcode budget added to each transaction group during simulation
     * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed
     * during evaluation.
     * @param maxLogCalls - The maximum log calls one can make during simulation
     * @param maxLogSize - The maximum byte number to log during simulation
     */
    constructor({ allowEmptySignatures, allowUnnamedResources, extraOpcodeBudget, fixSigners, maxLogCalls, maxLogSize, }) {
        this.allowEmptySignatures = allowEmptySignatures;
        this.allowUnnamedResources = allowUnnamedResources;
        this.extraOpcodeBudget =
            typeof extraOpcodeBudget === 'undefined'
                ? undefined
                : ensureSafeInteger(extraOpcodeBudget);
        this.fixSigners = fixSigners;
        this.maxLogCalls =
            typeof maxLogCalls === 'undefined'
                ? undefined
                : ensureSafeInteger(maxLogCalls);
        this.maxLogSize =
            typeof maxLogSize === 'undefined'
                ? undefined
                : ensureSafeInteger(maxLogSize);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SimulationEvalOverrides.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['allow-empty-signatures', this.allowEmptySignatures],
            ['allow-unnamed-resources', this.allowUnnamedResources],
            ['extra-opcode-budget', this.extraOpcodeBudget],
            ['fix-signers', this.fixSigners],
            ['max-log-calls', this.maxLogCalls],
            ['max-log-size', this.maxLogSize],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SimulationEvalOverrides: ${data}`);
        }
        return new SimulationEvalOverrides({
            allowEmptySignatures: data.get('allow-empty-signatures'),
            allowUnnamedResources: data.get('allow-unnamed-resources'),
            extraOpcodeBudget: data.get('extra-opcode-budget'),
            fixSigners: data.get('fix-signers'),
            maxLogCalls: data.get('max-log-calls'),
            maxLogSize: data.get('max-log-size'),
        });
    }
}
/**
 * The set of trace information and effect from evaluating a single opcode.
 */
class SimulationOpcodeTraceUnit {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'pc', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'scratch-changes',
                valueSchema: new OptionalSchema(new ArraySchema(ScratchChange.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'spawned-inners',
                valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),
                omitEmpty: true,
            }, {
                key: 'stack-additions',
                valueSchema: new OptionalSchema(new ArraySchema(AvmValue.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'stack-pop-count',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'state-changes',
                valueSchema: new OptionalSchema(new ArraySchema(ApplicationStateOperation.encodingSchema)),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SimulationOpcodeTraceUnit` object.
     * @param pc - The program counter of the current opcode being evaluated.
     * @param scratchChanges - The writes into scratch slots.
     * @param spawnedInners - The indexes of the traces for inner transactions spawned by this opcode, if any.
     * @param stackAdditions - The values added by this opcode to the stack.
     * @param stackPopCount - The number of deleted stack values by this opcode.
     * @param stateChanges - The operations against the current application's states.
     */
    constructor({ pc, scratchChanges, spawnedInners, stackAdditions, stackPopCount, stateChanges, }) {
        this.pc = ensureSafeInteger(pc);
        this.scratchChanges = scratchChanges;
        this.spawnedInners =
            typeof spawnedInners === 'undefined'
                ? undefined
                : spawnedInners.map(ensureSafeInteger);
        this.stackAdditions = stackAdditions;
        this.stackPopCount =
            typeof stackPopCount === 'undefined'
                ? undefined
                : ensureSafeInteger(stackPopCount);
        this.stateChanges = stateChanges;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SimulationOpcodeTraceUnit.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['pc', this.pc],
            [
                'scratch-changes',
                typeof this.scratchChanges !== 'undefined'
                    ? this.scratchChanges.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['spawned-inners', this.spawnedInners],
            [
                'stack-additions',
                typeof this.stackAdditions !== 'undefined'
                    ? this.stackAdditions.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['stack-pop-count', this.stackPopCount],
            [
                'state-changes',
                typeof this.stateChanges !== 'undefined'
                    ? this.stateChanges.map((v) => v.toEncodingData())
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SimulationOpcodeTraceUnit: ${data}`);
        }
        return new SimulationOpcodeTraceUnit({
            pc: data.get('pc'),
            scratchChanges: typeof data.get('scratch-changes') !== 'undefined'
                ? data
                    .get('scratch-changes')
                    .map((v) => ScratchChange.fromEncodingData(v))
                : undefined,
            spawnedInners: data.get('spawned-inners'),
            stackAdditions: typeof data.get('stack-additions') !== 'undefined'
                ? data
                    .get('stack-additions')
                    .map((v) => AvmValue.fromEncodingData(v))
                : undefined,
            stackPopCount: data.get('stack-pop-count'),
            stateChanges: typeof data.get('state-changes') !== 'undefined'
                ? data
                    .get('state-changes')
                    .map((v) => ApplicationStateOperation.fromEncodingData(v))
                : undefined,
        });
    }
}
/**
 * The execution trace of calling an app or a logic sig, containing the inner app
 * call trace in a recursive way.
 */
class SimulationTransactionExecTrace {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'approval-program-hash',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'approval-program-trace',
                valueSchema: new OptionalSchema(new ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'clear-state-program-hash',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'clear-state-program-trace',
                valueSchema: new OptionalSchema(new ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'clear-state-rollback',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'clear-state-rollback-error',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'inner-trace',
                valueSchema: new OptionalSchema(new ArraySchema(SimulationTransactionExecTrace.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'logic-sig-hash',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'logic-sig-trace',
                valueSchema: new OptionalSchema(new ArraySchema(SimulationOpcodeTraceUnit.encodingSchema)),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SimulationTransactionExecTrace` object.
     * @param approvalProgramHash - SHA512_256 hash digest of the approval program executed in transaction.
     * @param approvalProgramTrace - Program trace that contains a trace of opcode effects in an approval program.
     * @param clearStateProgramHash - SHA512_256 hash digest of the clear state program executed in transaction.
     * @param clearStateProgramTrace - Program trace that contains a trace of opcode effects in a clear state program.
     * @param clearStateRollback - If true, indicates that the clear state program failed and any persistent state
     * changes it produced should be reverted once the program exits.
     * @param clearStateRollbackError - The error message explaining why the clear state program failed. This field will
     * only be populated if clear-state-rollback is true and the failure was due to an
     * execution error.
     * @param innerTrace - An array of SimulationTransactionExecTrace representing the execution trace of
     * any inner transactions executed.
     * @param logicSigHash - SHA512_256 hash digest of the logic sig executed in transaction.
     * @param logicSigTrace - Program trace that contains a trace of opcode effects in a logic sig.
     */
    constructor({ approvalProgramHash, approvalProgramTrace, clearStateProgramHash, clearStateProgramTrace, clearStateRollback, clearStateRollbackError, innerTrace, logicSigHash, logicSigTrace, }) {
        this.approvalProgramHash =
            typeof approvalProgramHash === 'string'
                ? base64ToBytes(approvalProgramHash)
                : approvalProgramHash;
        this.approvalProgramTrace = approvalProgramTrace;
        this.clearStateProgramHash =
            typeof clearStateProgramHash === 'string'
                ? base64ToBytes(clearStateProgramHash)
                : clearStateProgramHash;
        this.clearStateProgramTrace = clearStateProgramTrace;
        this.clearStateRollback = clearStateRollback;
        this.clearStateRollbackError = clearStateRollbackError;
        this.innerTrace = innerTrace;
        this.logicSigHash =
            typeof logicSigHash === 'string'
                ? base64ToBytes(logicSigHash)
                : logicSigHash;
        this.logicSigTrace = logicSigTrace;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SimulationTransactionExecTrace.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['approval-program-hash', this.approvalProgramHash],
            [
                'approval-program-trace',
                typeof this.approvalProgramTrace !== 'undefined'
                    ? this.approvalProgramTrace.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['clear-state-program-hash', this.clearStateProgramHash],
            [
                'clear-state-program-trace',
                typeof this.clearStateProgramTrace !== 'undefined'
                    ? this.clearStateProgramTrace.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['clear-state-rollback', this.clearStateRollback],
            ['clear-state-rollback-error', this.clearStateRollbackError],
            [
                'inner-trace',
                typeof this.innerTrace !== 'undefined'
                    ? this.innerTrace.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['logic-sig-hash', this.logicSigHash],
            [
                'logic-sig-trace',
                typeof this.logicSigTrace !== 'undefined'
                    ? this.logicSigTrace.map((v) => v.toEncodingData())
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SimulationTransactionExecTrace: ${data}`);
        }
        return new SimulationTransactionExecTrace({
            approvalProgramHash: data.get('approval-program-hash'),
            approvalProgramTrace: typeof data.get('approval-program-trace') !== 'undefined'
                ? data
                    .get('approval-program-trace')
                    .map((v) => SimulationOpcodeTraceUnit.fromEncodingData(v))
                : undefined,
            clearStateProgramHash: data.get('clear-state-program-hash'),
            clearStateProgramTrace: typeof data.get('clear-state-program-trace') !== 'undefined'
                ? data
                    .get('clear-state-program-trace')
                    .map((v) => SimulationOpcodeTraceUnit.fromEncodingData(v))
                : undefined,
            clearStateRollback: data.get('clear-state-rollback'),
            clearStateRollbackError: data.get('clear-state-rollback-error'),
            innerTrace: typeof data.get('inner-trace') !== 'undefined'
                ? data
                    .get('inner-trace')
                    .map((v) => SimulationTransactionExecTrace.fromEncodingData(v))
                : undefined,
            logicSigHash: data.get('logic-sig-hash'),
            logicSigTrace: typeof data.get('logic-sig-trace') !== 'undefined'
                ? data
                    .get('logic-sig-trace')
                    .map((v) => SimulationOpcodeTraceUnit.fromEncodingData(v))
                : undefined,
        });
    }
}
/**
 * Represents a state proof and its corresponding message
 */
let StateProof$1 = class StateProof {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'Message',
                valueSchema: StateProofMessage.encodingSchema,
                omitEmpty: true,
            }, {
                key: 'StateProof',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `StateProof` object.
     * @param message - Represents the message that the state proofs are attesting to.
     * @param stateproof - The encoded StateProof for the message.
     */
    constructor({ message, stateproof, }) {
        this.message = message;
        this.stateproof =
            typeof stateproof === 'string' ? base64ToBytes(stateproof) : stateproof;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProof.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Message', this.message.toEncodingData()],
            ['StateProof', this.stateproof],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProof: ${data}`);
        }
        return new StateProof({
            message: StateProofMessage.fromEncodingData(data.get('Message') ?? new Map()),
            stateproof: data.get('StateProof'),
        });
    }
};
/**
 * Represents the message that the state proofs are attesting to.
 */
class StateProofMessage {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'BlockHeadersCommitment',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, {
                key: 'FirstAttestedRound',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'LastAttestedRound',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'LnProvenWeight',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'VotersCommitment',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `StateProofMessage` object.
     * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof
     * interval.
     * @param firstattestedround - The first round the message attests to.
     * @param lastattestedround - The last round the message attests to.
     * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits
     * of precision. This value would be used to verify the next state proof.
     * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.
     */
    constructor({ blockheaderscommitment, firstattestedround, lastattestedround, lnprovenweight, voterscommitment, }) {
        this.blockheaderscommitment =
            typeof blockheaderscommitment === 'string'
                ? base64ToBytes(blockheaderscommitment)
                : blockheaderscommitment;
        this.firstattestedround = ensureBigInt(firstattestedround);
        this.lastattestedround = ensureBigInt(lastattestedround);
        this.lnprovenweight = ensureBigInt(lnprovenweight);
        this.voterscommitment =
            typeof voterscommitment === 'string'
                ? base64ToBytes(voterscommitment)
                : voterscommitment;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProofMessage.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['BlockHeadersCommitment', this.blockheaderscommitment],
            ['FirstAttestedRound', this.firstattestedround],
            ['LastAttestedRound', this.lastattestedround],
            ['LnProvenWeight', this.lnprovenweight],
            ['VotersCommitment', this.voterscommitment],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProofMessage: ${data}`);
        }
        return new StateProofMessage({
            blockheaderscommitment: data.get('BlockHeadersCommitment'),
            firstattestedround: data.get('FirstAttestedRound'),
            lastattestedround: data.get('LastAttestedRound'),
            lnprovenweight: data.get('LnProvenWeight'),
            voterscommitment: data.get('VotersCommitment'),
        });
    }
}
/**
 * Supply represents the current supply of MicroAlgos in the system.
 */
class SupplyResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'current_round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'online-money',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, { key: 'total-money', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `SupplyResponse` object.
     * @param currentRound - Round
     * @param onlineMoney - OnlineMoney
     * @param totalMoney - TotalMoney
     */
    constructor({ currentRound, onlineMoney, totalMoney, }) {
        this.currentRound = ensureBigInt(currentRound);
        this.onlineMoney = ensureBigInt(onlineMoney);
        this.totalMoney = ensureBigInt(totalMoney);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return SupplyResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['current_round', this.currentRound],
            ['online-money', this.onlineMoney],
            ['total-money', this.totalMoney],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded SupplyResponse: ${data}`);
        }
        return new SupplyResponse({
            currentRound: data.get('current_round'),
            onlineMoney: data.get('online-money'),
            totalMoney: data.get('total-money'),
        });
    }
}
/**
 * Represents a key-value pair in an application store.
 */
let TealKeyValue$1 = class TealKeyValue {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'key', valueSchema: new ByteArraySchema(), omitEmpty: true }, { key: 'value', valueSchema: TealValue$1.encodingSchema, omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TealKeyValue` object.
     * @param key -
     * @param value - Represents a TEAL value.
     */
    constructor({ key, value }) {
        this.key = typeof key === 'string' ? base64ToBytes(key) : key;
        this.value = value;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TealKeyValue.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['key', this.key],
            ['value', this.value.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TealKeyValue: ${data}`);
        }
        return new TealKeyValue({
            key: data.get('key'),
            value: TealValue$1.fromEncodingData(data.get('value') ?? new Map()),
        });
    }
};
/**
 * Represents a TEAL value.
 */
let TealValue$1 = class TealValue {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'bytes', valueSchema: new ByteArraySchema(), omitEmpty: true }, { key: 'type', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'uint', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TealValue` object.
     * @param bytes - (tb) bytes value.
     * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**
     * @param uint - (ui) uint value.
     */
    constructor({ bytes, type, uint, }) {
        this.bytes = typeof bytes === 'string' ? base64ToBytes(bytes) : bytes;
        this.type = ensureSafeInteger(type);
        this.uint = ensureBigInt(uint);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TealValue.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['bytes', this.bytes],
            ['type', this.type],
            ['uint', this.uint],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TealValue: ${data}`);
        }
        return new TealValue({
            bytes: data.get('bytes'),
            type: data.get('type'),
            uint: data.get('uint'),
        });
    }
};
/**
 * Response containing all ledger state deltas for transaction groups, with their
 * associated Ids, in a single round.
 */
class TransactionGroupLedgerStateDeltasForRoundResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'Deltas',
                valueSchema: new ArraySchema(LedgerStateDeltaForTransactionGroup.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionGroupLedgerStateDeltasForRoundResponse` object.
     * @param deltas -
     */
    constructor({ deltas }) {
        this.deltas = deltas;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionGroupLedgerStateDeltasForRoundResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['Deltas', this.deltas.map((v) => v.toEncodingData())],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionGroupLedgerStateDeltasForRoundResponse: ${data}`);
        }
        return new TransactionGroupLedgerStateDeltasForRoundResponse({
            deltas: (data.get('Deltas') ?? []).map((v) => LedgerStateDeltaForTransactionGroup.fromEncodingData(v)),
        });
    }
}
/**
 * TransactionParams contains the parameters that help a client construct a new
 * transaction.
 */
class TransactionParametersResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'consensus-version',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            }, { key: 'fee', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'genesis-hash',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, { key: 'genesis-id', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'last-round', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'min-fee', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionParametersResponse` object.
     * @param consensusVersion - ConsensusVersion indicates the consensus protocol version
     * as of LastRound.
     * @param fee - Fee is the suggested transaction fee
     * Fee is in units of micro-Algos per byte.
     * Fee may fall to zero but transactions must still have a fee of
     * at least MinTxnFee for the current network protocol.
     * @param genesisHash - GenesisHash is the hash of the genesis block.
     * @param genesisId - GenesisID is an ID listed in the genesis block.
     * @param lastRound - LastRound indicates the last round seen
     * @param minFee - The minimum transaction fee (not per byte) required for the
     * txn to validate for the current network protocol.
     */
    constructor({ consensusVersion, fee, genesisHash, genesisId, lastRound, minFee, }) {
        this.consensusVersion = consensusVersion;
        this.fee = ensureBigInt(fee);
        this.genesisHash =
            typeof genesisHash === 'string'
                ? base64ToBytes(genesisHash)
                : genesisHash;
        this.genesisId = genesisId;
        this.lastRound = ensureBigInt(lastRound);
        this.minFee = ensureBigInt(minFee);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionParametersResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['consensus-version', this.consensusVersion],
            ['fee', this.fee],
            ['genesis-hash', this.genesisHash],
            ['genesis-id', this.genesisId],
            ['last-round', this.lastRound],
            ['min-fee', this.minFee],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionParametersResponse: ${data}`);
        }
        return new TransactionParametersResponse({
            consensusVersion: data.get('consensus-version'),
            fee: data.get('fee'),
            genesisHash: data.get('genesis-hash'),
            genesisId: data.get('genesis-id'),
            lastRound: data.get('last-round'),
            minFee: data.get('min-fee'),
        });
    }
}
/**
 * Proof of transaction in a block.
 */
class TransactionProofResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'idx', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'proof', valueSchema: new ByteArraySchema(), omitEmpty: true }, {
                key: 'stibhash',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, { key: 'treedepth', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'hashtype',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionProofResponse` object.
     * @param idx - Index of the transaction in the block's payset.
     * @param proof - Proof of transaction membership.
     * @param stibhash - Hash of SignedTxnInBlock for verifying proof.
     * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges
     * from a leaf to the root.
     * @param hashtype - The type of hash function used to create the proof, must be one of:
     * * sha512_256
     * * sha256
     */
    constructor({ idx, proof, stibhash, treedepth, hashtype, }) {
        this.idx = ensureSafeInteger(idx);
        this.proof = typeof proof === 'string' ? base64ToBytes(proof) : proof;
        this.stibhash =
            typeof stibhash === 'string' ? base64ToBytes(stibhash) : stibhash;
        this.treedepth = ensureSafeInteger(treedepth);
        this.hashtype = hashtype;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionProofResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['idx', this.idx],
            ['proof', this.proof],
            ['stibhash', this.stibhash],
            ['treedepth', this.treedepth],
            ['hashtype', this.hashtype],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionProofResponse: ${data}`);
        }
        return new TransactionProofResponse({
            idx: data.get('idx'),
            proof: data.get('proof'),
            stibhash: data.get('stibhash'),
            treedepth: data.get('treedepth'),
            hashtype: data.get('hashtype'),
        });
    }
}
/**
 * algod version information.
 */
class Version {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'build',
                valueSchema: BuildVersion.encodingSchema,
                omitEmpty: true,
            }, {
                key: 'genesis_hash_b64',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, { key: 'genesis_id', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'versions',
                valueSchema: new ArraySchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `Version` object.
     * @param build -
     * @param genesisHashB64 -
     * @param genesisId -
     * @param versions -
     */
    constructor({ build, genesisHashB64, genesisId, versions, }) {
        this.build = build;
        this.genesisHashB64 =
            typeof genesisHashB64 === 'string'
                ? base64ToBytes(genesisHashB64)
                : genesisHashB64;
        this.genesisId = genesisId;
        this.versions = versions;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Version.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['build', this.build.toEncodingData()],
            ['genesis_hash_b64', this.genesisHashB64],
            ['genesis_id', this.genesisId],
            ['versions', this.versions],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Version: ${data}`);
        }
        return new Version({
            build: BuildVersion.fromEncodingData(data.get('build') ?? new Map()),
            genesisHashB64: data.get('genesis_hash_b64'),
            genesisId: data.get('genesis_id'),
            versions: data.get('versions'),
        });
    }
}

var types$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	Account: Account$1,
	AccountApplicationResponse: AccountApplicationResponse,
	AccountAssetHolding: AccountAssetHolding,
	AccountAssetResponse: AccountAssetResponse,
	AccountAssetsInformationResponse: AccountAssetsInformationResponse,
	AccountParticipation: AccountParticipation$1,
	AccountStateDelta: AccountStateDelta$1,
	AppCallLogs: AppCallLogs,
	Application: Application$1,
	ApplicationInitialStates: ApplicationInitialStates,
	ApplicationKVStorage: ApplicationKVStorage,
	ApplicationLocalReference: ApplicationLocalReference,
	ApplicationLocalState: ApplicationLocalState$1,
	ApplicationParams: ApplicationParams$1,
	ApplicationStateOperation: ApplicationStateOperation,
	ApplicationStateSchema: ApplicationStateSchema$1,
	Asset: Asset$1,
	AssetHolding: AssetHolding$1,
	AssetHoldingReference: AssetHoldingReference,
	AssetParams: AssetParams$1,
	AvmKeyValue: AvmKeyValue,
	AvmValue: AvmValue,
	BlockHashResponse: BlockHashResponse,
	BlockLogsResponse: BlockLogsResponse,
	BlockResponse: BlockResponse,
	BlockTxidsResponse: BlockTxidsResponse,
	Box: Box$1,
	BoxDescriptor: BoxDescriptor$1,
	BoxReference: BoxReference,
	BoxesResponse: BoxesResponse$1,
	BuildVersion: BuildVersion,
	CompileResponse: CompileResponse,
	DisassembleResponse: DisassembleResponse,
	DryrunRequest: DryrunRequest,
	DryrunResponse: DryrunResponse,
	DryrunSource: DryrunSource,
	DryrunState: DryrunState,
	DryrunTxnResult: DryrunTxnResult,
	ErrorResponse: ErrorResponse$1,
	EvalDelta: EvalDelta$1,
	EvalDeltaKeyValue: EvalDeltaKeyValue$1,
	GetBlockTimeStampOffsetResponse: GetBlockTimeStampOffsetResponse,
	GetSyncRoundResponse: GetSyncRoundResponse,
	KvDelta: KvDelta,
	LedgerStateDeltaForTransactionGroup: LedgerStateDeltaForTransactionGroup,
	LightBlockHeaderProof: LightBlockHeaderProof$1,
	NodeStatusResponse: NodeStatusResponse,
	PendingTransactionResponse: PendingTransactionResponse,
	PendingTransactionsResponse: PendingTransactionsResponse,
	PostTransactionsResponse: PostTransactionsResponse,
	ScratchChange: ScratchChange,
	SimulateInitialStates: SimulateInitialStates,
	SimulateRequest: SimulateRequest,
	SimulateRequestTransactionGroup: SimulateRequestTransactionGroup,
	SimulateResponse: SimulateResponse,
	SimulateTraceConfig: SimulateTraceConfig,
	SimulateTransactionGroupResult: SimulateTransactionGroupResult,
	SimulateTransactionResult: SimulateTransactionResult,
	SimulateUnnamedResourcesAccessed: SimulateUnnamedResourcesAccessed,
	SimulationEvalOverrides: SimulationEvalOverrides,
	SimulationOpcodeTraceUnit: SimulationOpcodeTraceUnit,
	SimulationTransactionExecTrace: SimulationTransactionExecTrace,
	StateProof: StateProof$1,
	StateProofMessage: StateProofMessage,
	SupplyResponse: SupplyResponse,
	TealKeyValue: TealKeyValue$1,
	TealValue: TealValue$1,
	TransactionGroupLedgerStateDeltasForRoundResponse: TransactionGroupLedgerStateDeltasForRoundResponse,
	TransactionParametersResponse: TransactionParametersResponse,
	TransactionProofResponse: TransactionProofResponse,
	Version: Version
});

/**
 * Base abstract class for JSON requests.
 *
 * Data: The type returned from the `do()` method
 *
 * Body: The structure of the response's body
 */
class JSONRequest {
    /**
     * @param client - HTTPClient object.
     */
    constructor(client) {
        this.c = client;
        this.query = {};
    }
    /**
     * Execute the request
     */
    executeRequest(headers, customOptions) {
        return this.c.get({
            relativePath: this.path(),
            query: this.query,
            requestHeaders: headers,
            customOptions,
        });
    }
    /**
     * Execute the request and decode the response.
     * @param headers - Additional headers to send in the request. Optional.
     * @param customOptions - Additional options to pass to the underlying BaseHTTPClient. For
     *   {@link URLTokenBaseHTTPClient}, which is the default client, this will be treated as
     *   additional options to pass to the network `fetch` method.
     * @returns A promise which resolves to the parsed response object.
     * @category JSONRequest
     */
    async do(headers, customOptions) {
        const res = await this.executeRequest(headers, customOptions);
        return this.prepare(res);
    }
    /**
     * Execute the request, but do not process the response data in any way.
     * @param headers - Additional headers to send in the request. Optional.
     * @param customOptions - Additional options to pass to the underlying BaseHTTPClient. For
     *   {@link URLTokenBaseHTTPClient}, which is the default client, this will be treated as
     *   additional options to pass to the network `fetch` method.
     * @returns A promise which resolves to the raw response data, exactly as returned by the server.
     * @category JSONRequest
     */
    async doRaw(headers, customOptions) {
        const res = await this.executeRequest(headers, customOptions);
        return res.body;
    }
}

class AccountInformation extends JSONRequest {
    constructor(c, account) {
        super(c);
        this.account = account.toString();
    }
    path() {
        return `/v2/accounts/${this.account}`;
    }
    /**
     * Exclude assets and application data from results
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountInfo = await algodClient.accountInformation(address)
     *        .exclude('all')
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    exclude(exclude) {
        this.query.exclude = exclude;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), Account$1);
    }
}

class AccountAssetInformation extends JSONRequest {
    constructor(c, account, assetID) {
        super(c);
        this.account = account.toString();
        this.assetID = BigInt(assetID);
    }
    path() {
        return `/v2/accounts/${this.account}/assets/${this.assetID}`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), AccountAssetResponse);
    }
}

class AccountApplicationInformation extends JSONRequest {
    constructor(c, account, applicationID) {
        super(c);
        this.account = account.toString();
        this.applicationID = BigInt(applicationID);
    }
    path() {
        return `/v2/accounts/${this.account}/applications/${this.applicationID}`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), AccountApplicationResponse);
    }
}

/**
 * block gets the block info for the given round. this call may block
 */
let Block$1 = class Block extends JSONRequest {
    constructor(c, roundNumber) {
        super(c);
        this.round = BigInt(roundNumber);
        this.query = { format: 'msgpack' };
    }
    path() {
        return `/v2/blocks/${this.round}`;
    }
    /**
     * If true, only the block header (exclusive of payset or certificate) may be included in response.
     *
     * #### Example
     * ```typescript
     *
     * const roundNumber = 41000000;
     *
     * const blockResponse = await algodClient
     *        .block(roundNumber)
     *        .headerOnly(true)
     *        .do();
     * ```
     *
     * @param headerOnly - the flag indicating whether exclusively return header in response
     * @category query
     */
    headerOnly(headerOnly) {
        this.query['header-only'] = headerOnly;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeMsgpack(response.body, BlockResponse);
    }
};

/**
 * Sets the default header (if not previously set)
 * @param headers - A headers object
 */
function setHeaders$1(headers = {}) {
    let hdrs = headers;
    if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {
        hdrs = { ...headers };
        hdrs['Content-Type'] = 'text/plain';
    }
    return hdrs;
}
/**
 * Executes compile
 */
class Compile extends JSONRequest {
    constructor(c, source) {
        super(c);
        this.source = source;
    }
    // eslint-disable-next-line class-methods-use-this
    path() {
        return `/v2/teal/compile`;
    }
    sourcemap(map = true) {
        this.query.sourcemap = map;
        return this;
    }
    executeRequest(headers, customOptions) {
        const txHeaders = setHeaders$1(headers);
        return this.c.post({
            relativePath: this.path(),
            data: coerceToBytes(this.source),
            query: this.query,
            requestHeaders: txHeaders,
            customOptions,
        });
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), CompileResponse);
    }
}

class Dryrun extends JSONRequest {
    constructor(c, dr) {
        super(c);
        this.blob = encodeMsgpack(dr);
    }
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/v2/teal/dryrun';
    }
    executeRequest(headers, customOptions) {
        const txHeaders = setHeaders$1(headers);
        return this.c.post({
            relativePath: this.path(),
            data: this.blob,
            requestHeaders: txHeaders,
            customOptions,
        });
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), DryrunResponse);
    }
}

class Genesis extends JSONRequest {
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/genesis';
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return response.getJSONText();
    }
}

class GetAssetByID extends JSONRequest {
    constructor(c, index) {
        super(c);
        this.index = BigInt(index);
    }
    path() {
        return `/v2/assets/${this.index}`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), Asset$1);
    }
}

class GetApplicationByID extends JSONRequest {
    constructor(c, index) {
        super(c);
        this.index = BigInt(index);
    }
    path() {
        return `/v2/applications/${this.index}`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), Application$1);
    }
}

class GetBlockHash extends JSONRequest {
    constructor(c, roundNumber) {
        super(c);
        this.round = BigInt(roundNumber);
    }
    path() {
        return `/v2/blocks/${this.round}/hash`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), BlockHashResponse);
    }
}

class GetBlockTxids extends JSONRequest {
    constructor(c, roundNumber) {
        super(c);
        this.round = BigInt(roundNumber);
    }
    path() {
        return `/v2/blocks/${this.round}/txids`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), BlockTxidsResponse);
    }
}

/**
 * Given an application ID and the box name (key), return the value stored in the box.
 *
 * #### Example
 * ```typescript
 * const index = 60553466;
 * const boxName = Buffer.from("foo");
 * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();
 * const boxValue = boxResponse.value;
 * ```
 *
 * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)
 * @param index - The application ID to look up.
 * @category GET
 */
class GetApplicationBoxByName extends JSONRequest {
    constructor(c, index, name) {
        super(c);
        this.index = BigInt(index);
        // Encode name in base64 format and append the encoding prefix.
        const encodedName = bytesToBase64(name);
        this.query.name = encodeURI(`b64:${encodedName}`);
    }
    /**
     * @returns `/v2/applications/${index}/box`
     */
    path() {
        return `/v2/applications/${this.index}/box`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), Box$1);
    }
}

/**
 * Given an application ID, return all the box names associated with the app.
 *
 * #### Example
 * ```typescript
 * const index = 60553466;
 * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();
 * const boxNames = boxesResponse.boxes.map(box => box.name);
 * ```
 *
 * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idboxes)
 * @param index - The application ID to look up.
 * @category GET
 */
class GetApplicationBoxes extends JSONRequest {
    constructor(c, index) {
        super(c);
        this.index = BigInt(index);
        this.query.max = 0;
    }
    /**
     * @returns `/v2/applications/${index}/boxes`
     */
    path() {
        return `/v2/applications/${this.index}/boxes`;
    }
    /**
     * Limit results for pagination.
     *
     * #### Example
     * ```typescript
     * const maxResults = 20;
     * const boxesResult = await algodClient
     *        .GetApplicationBoxes(1234)
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit - maximum number of results to return.
     * @category query
     */
    max(max) {
        this.query.max = max;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), BoxesResponse$1);
    }
}

/**
 * healthCheck returns an empty object iff the node is running
 */
let HealthCheck$1 = class HealthCheck extends JSONRequest {
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/health';
    }
    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars
    prepare(_response) { }
};

/**
 * returns the transaction information for a specific txid of a pending transaction
 */
class PendingTransactionInformation extends JSONRequest {
    constructor(c, txid) {
        super(c);
        this.txid = txid;
        this.query.format = 'msgpack';
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeMsgpack(response.body, PendingTransactionResponse);
    }
    path() {
        return `/v2/transactions/pending/${this.txid}`;
    }
    // max sets the maximum number of txs to return
    max(max) {
        this.query.max = max;
        return this;
    }
}

/**
 * pendingTransactionsInformation returns transactions that are pending in the pool
 */
class PendingTransactions extends JSONRequest {
    constructor(c) {
        super(c);
        this.query.format = 'msgpack';
    }
    /* eslint-disable class-methods-use-this */
    path() {
        return '/v2/transactions/pending';
    }
    prepare(response) {
        return decodeMsgpack(response.body, PendingTransactionsResponse);
    }
    /* eslint-enable class-methods-use-this */
    // max sets the maximum number of txs to return
    max(max) {
        this.query.max = max;
        return this;
    }
}

/**
 * returns all transactions for a PK [addr] in the [first, last] rounds range.
 */
class PendingTransactionsByAddress extends JSONRequest {
    constructor(c, address) {
        super(c);
        this.address = address.toString();
        this.query.format = 'msgpack';
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeMsgpack(response.body, PendingTransactionsResponse);
    }
    path() {
        return `/v2/accounts/${this.address}/transactions/pending`;
    }
    // max sets the maximum number of txs to return
    max(max) {
        this.query.max = max;
        return this;
    }
}

class GetTransactionProof extends JSONRequest {
    constructor(c, round, txID) {
        super(c);
        this.txID = txID;
        this.round = BigInt(round);
    }
    path() {
        return `/v2/blocks/${this.round}/transactions/${this.txID}/proof`;
    }
    /**
     * Exclude assets and application data from results
     * The type of hash function used to create the proof, must be one of: "sha512_256", "sha256"
     *
     * #### Example
     * ```typescript
     * const hashType = "sha256";
     * const round = 123456;
     * const txId = "abc123;
     * const txProof = await algodClient.getTransactionProof(round, txId)
     *        .hashType(hashType)
     *        .do();
     * ```
     *
     * @param hashType
     * @category query
     */
    hashType(hashType) {
        this.query.hashtype = hashType;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), TransactionProofResponse);
    }
}

/**
 * Sets the default header (if not previously set) for sending a raw
 * transaction.
 * @param headers - A headers object
 */
function setSendTransactionHeaders(headers = {}) {
    let hdrs = headers;
    if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {
        hdrs = { ...headers };
        hdrs['Content-Type'] = 'application/x-binary';
    }
    return hdrs;
}
function isByteArray(array) {
    return array && array.byteLength !== undefined;
}
/**
 * broadcasts the passed signed txns to the network
 */
class SendRawTransaction extends JSONRequest {
    constructor(c, stxOrStxs) {
        super(c);
        let forPosting = stxOrStxs;
        if (Array.isArray(stxOrStxs)) {
            if (!stxOrStxs.every(isByteArray)) {
                throw new TypeError('Array elements must be byte arrays');
            }
            // Flatten into a single Uint8Array
            forPosting = concatArrays(...stxOrStxs);
        }
        else if (!isByteArray(forPosting)) {
            throw new TypeError('Argument must be byte array');
        }
        this.txnBytesToPost = forPosting;
    }
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/v2/transactions';
    }
    executeRequest(headers, customOptions) {
        const txHeaders = setSendTransactionHeaders(headers);
        return this.c.post({
            relativePath: this.path(),
            data: this.txnBytesToPost,
            requestHeaders: txHeaders,
            customOptions,
        });
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), PostTransactionsResponse);
    }
}

class Status extends JSONRequest {
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/v2/status';
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), NodeStatusResponse);
    }
}

class StatusAfterBlock extends JSONRequest {
    constructor(c, round) {
        super(c);
        this.round = BigInt(round);
    }
    path() {
        return `/v2/status/wait-for-block-after/${this.round}`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), NodeStatusResponse);
    }
}

/**
 * Returns the common needed parameters for a new transaction, in a format the transaction builder expects
 */
class SuggestedParamsRequest extends JSONRequest {
    /* eslint-disable class-methods-use-this */
    path() {
        return '/v2/transactions/params';
    }
    prepare(response) {
        const params = decodeJSON(response.getJSONText(), TransactionParametersResponse);
        return {
            flatFee: false,
            fee: params.fee,
            firstValid: params.lastRound,
            lastValid: params.lastRound + BigInt(1000),
            genesisID: params.genesisId,
            genesisHash: params.genesisHash,
            minFee: params.minFee,
            consensusVersion: params.consensusVersion,
        };
    }
}

class Supply extends JSONRequest {
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/v2/ledger/supply';
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), SupplyResponse);
    }
}

/**
 * retrieves the VersionResponse from the running node
 */
class Versions extends JSONRequest {
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/versions';
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), Version);
    }
}

class LightBlockHeaderProof extends JSONRequest {
    constructor(c, round) {
        super(c);
        this.round = BigInt(round);
    }
    path() {
        return `/v2/blocks/${this.round}/lightheader/proof`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), LightBlockHeaderProof$1);
    }
}

class StateProof extends JSONRequest {
    constructor(c, round) {
        super(c);
        this.round = BigInt(round);
    }
    path() {
        return `/v2/stateproofs/${this.round}`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), StateProof$1);
    }
}

class SetSyncRound extends JSONRequest {
    constructor(c, round) {
        super(c);
        this.round = BigInt(round);
    }
    path() {
        return `/v2/ledger/sync/${this.round}`;
    }
    executeRequest(headers, customOptions) {
        return this.c.post({
            relativePath: this.path(),
            data: null,
            requestHeaders: headers,
            customOptions,
        });
    }
    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars
    prepare(_response) { }
}

class GetSyncRound extends JSONRequest {
    // eslint-disable-next-line class-methods-use-this
    path() {
        return `/v2/ledger/sync`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), GetSyncRoundResponse);
    }
}

class SetBlockOffsetTimestamp extends JSONRequest {
    constructor(c, offset) {
        super(c);
        this.offset = BigInt(offset);
    }
    path() {
        return `/v2/devmode/blocks/offset/${this.offset}`;
    }
    executeRequest(headers, customOptions) {
        return this.c.post({
            relativePath: this.path(),
            data: null,
            requestHeaders: headers,
            customOptions,
        });
    }
    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars
    prepare(_response) { }
}

class GetBlockOffsetTimestamp extends JSONRequest {
    // eslint-disable-next-line class-methods-use-this
    path() {
        return `/v2/devmode/blocks/offset`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), GetBlockTimeStampOffsetResponse);
    }
}

/**
 * Sets the default header (if not previously set)
 * @param headers - A headers object
 */
function setHeaders(headers = {}) {
    let hdrs = headers;
    if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {
        hdrs = { ...headers };
        hdrs['Content-Type'] = 'text/plain';
    }
    return hdrs;
}
/**
 * Executes disassemble
 */
class Disassemble extends JSONRequest {
    constructor(c, source) {
        super(c);
        this.source = source;
    }
    // eslint-disable-next-line class-methods-use-this
    path() {
        return `/v2/teal/disassemble`;
    }
    executeRequest(headers, customOptions) {
        const txHeaders = setHeaders(headers);
        return this.c.post({
            relativePath: this.path(),
            data: coerceToBytes(this.source),
            query: this.query,
            requestHeaders: txHeaders,
            customOptions,
        });
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), DisassembleResponse);
    }
}

/**
 * Sets the default header (if not previously set) for simulating a raw
 * transaction.
 * @param headers - A headers object
 */
function setSimulateTransactionsHeaders(headers = {}) {
    let hdrs = headers;
    if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {
        hdrs = { ...headers };
        hdrs['Content-Type'] = 'application/msgpack';
    }
    return hdrs;
}
/**
 * Simulates signed txns.
 */
class SimulateRawTransactions extends JSONRequest {
    constructor(c, request) {
        super(c);
        this.query.format = 'msgpack';
        this.requestBytes = encodeMsgpack(request);
    }
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/v2/transactions/simulate';
    }
    executeRequest(headers, customOptions) {
        const txHeaders = setSimulateTransactionsHeaders(headers);
        return this.c.post({
            relativePath: this.path(),
            data: this.requestBytes,
            query: this.query,
            requestHeaders: txHeaders,
            customOptions,
        });
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeMsgpack(response.body, SimulateResponse);
    }
}

class Ready extends JSONRequest {
    // eslint-disable-next-line class-methods-use-this
    path() {
        return `/ready`;
    }
    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars
    prepare(_response) { }
}

class UnsetSyncRound extends JSONRequest {
    // eslint-disable-next-line class-methods-use-this
    path() {
        return `/v2/ledger/sync`;
    }
    executeRequest(headers, customOptions) {
        return this.c.delete({
            relativePath: this.path(),
            data: undefined,
            requestHeaders: headers,
            customOptions,
        });
    }
    // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars
    prepare(_response) { }
}

class GetLedgerStateDeltaForTransactionGroup extends JSONRequest {
    constructor(c, id) {
        super(c);
        this.id = id;
        this.query = { format: 'msgpack' };
    }
    // eslint-disable-next-line class-methods-use-this
    path() {
        return `/v2/deltas/txn/group/${this.id}`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeMsgpack(response.body, LedgerStateDelta);
    }
}

class GetLedgerStateDelta extends JSONRequest {
    constructor(c, round) {
        super(c);
        this.round = BigInt(round);
        this.query = { format: 'msgpack' };
    }
    // eslint-disable-next-line class-methods-use-this
    path() {
        return `/v2/deltas/${this.round}`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeMsgpack(response.body, LedgerStateDelta);
    }
}

class GetTransactionGroupLedgerStateDeltasForRound extends JSONRequest {
    constructor(c, round) {
        super(c);
        this.round = BigInt(round);
        this.query = { format: 'msgpack' };
    }
    // eslint-disable-next-line class-methods-use-this
    path() {
        return `/v2/deltas/${this.round}/txn/group`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeMsgpack(response.body, TransactionGroupLedgerStateDeltasForRoundResponse);
    }
}

/**
 * Algod client connects an application to the Algorand blockchain. The algod client requires a valid algod REST endpoint IP address and algod token from an Algorand node that is connected to the network you plan to interact with.
 *
 * Algod is the main Algorand process for handling the blockchain. Messages between nodes are processed, the protocol steps are executed, and the blocks are written to disk. The algod process also exposes a REST API server that developers can use to communicate with the node and the network. Algod uses the data directory for storage and configuration information.
 *
 * #### Relevant Information
 * [How do I obtain an algod address and token?](https://developer.algorand.org/docs/archive/build-apps/setup/?from_query=algod#how-do-i-obtain-an-algod-address-and-token)
 *
 * [Run Algod in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/?from_query=algod#algod-indexer-and-kmd-rest-endpoints)
 */
class AlgodClient extends ServiceClient {
    /**
     * Create an AlgodClient from
     * * either a token, baseServer, port, and optional headers
     * * or a base client server for interoperability with external dApp wallets
     *
     * #### Example
     * ```typescript
     * const token  = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
     * const server = "http://localhost";
     * const port   = 4001;
     * const algodClient = new algosdk.Algodv2(token, server, port);
     * ```
     * @remarks
     * The above configuration is for a sandbox private network.
     * For applications on production, you are encouraged to run your own node, or use an Algorand REST API provider with a dedicated API key.
     *
     * @param tokenOrBaseClient - The algod token from the Algorand node you are interacting with
     * @param baseServer - REST endpoint
     * @param port - Port number if specifically configured by the server
     * @param headers - Optional headers
     */
    constructor(tokenOrBaseClient, baseServer, port, headers = {}) {
        super('X-Algo-API-Token', tokenOrBaseClient, baseServer, port, headers);
    }
    /**
     * Returns OK if healthy.
     *
     * #### Example
     * ```typescript
     * await algodClient.healthCheck().do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-health)
     * @category GET
     */
    healthCheck() {
        return new HealthCheck$1(this.c);
    }
    /**
     * Retrieves the supported API versions, binary build versions, and genesis information.
     *
     * #### Example
     * ```typescript
     * const versionsDetails = await algodClient.versionsCheck().do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-versions)
     * @category GET
     */
    versionsCheck() {
        return new Versions(this.c);
    }
    /**
     * Broadcasts a raw transaction to the network.
     *
     * #### Example
     * ```typescript
     * const { txid } = await algodClient.sendRawTransaction(signedTxns).do();
     * const result = await waitForConfirmation(algodClient, txid, 3);
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactions)
     *
     * @remarks
     * Often used with {@linkcode waitForConfirmation}
     * @param stxOrStxs - Signed transactions
     * @category POST
     */
    sendRawTransaction(stxOrStxs) {
        return new SendRawTransaction(this.c, stxOrStxs);
    }
    /**
     * Returns the given account's status, balance and spendable amounts.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountInfo = await algodClient.accountInformation(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)
     * @param account - The address of the account to look up.
     * @category GET
     */
    accountInformation(account) {
        return new AccountInformation(this.c, account);
    }
    /**
     * Returns the given account's asset information for a specific asset.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const index = 60553466;
     * const accountAssetInfo = await algodClient.accountAssetInformation(address, index).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)
     * @param account - The address of the account to look up.
     * @param index - The asset ID to look up.
     * @category GET
     */
    accountAssetInformation(account, index) {
        return new AccountAssetInformation(this.c, account, index);
    }
    /**
     * Returns the given account's application information for a specific application.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const index = 60553466;
     * const accountInfo = await algodClient.accountApplicationInformation(address, index).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)
     * @param account - The address of the account to look up.
     * @param index - The application ID to look up.
     * @category GET
     */
    accountApplicationInformation(account, index) {
        return new AccountApplicationInformation(this.c, account, index);
    }
    /**
     * Gets the block info for the given round.
     *
     * #### Example
     * ```typescript
     * const roundNumber = 18038133;
     * const block = await algodClient.block(roundNumber).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksround)
     * @param roundNumber - The round number of the block to get.
     * @category GET
     */
    block(roundNumber) {
        return new Block$1(this.c, roundNumber);
    }
    /**
     * Get the block hash for the block on the given round.
     *
     * #### Example
     * ```typescript
     * const roundNumber = 18038133;
     * const block = await algodClient.getBlockHash(roundNumber).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundhash)
     * @param roundNumber - The round number of the block to get.
     * @category GET
     */
    getBlockHash(roundNumber) {
        return new GetBlockHash(this.c, roundNumber);
    }
    /**
     * Get the top level transaction IDs for the block on the given round.
     *
     * #### Example
     * ```typescript
     * const roundNumber = 18038133;
     * const block = await algodClient.getBlockTxids(roundNumber).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundtxids)
     * @param roundNumber - The round number of the block to get.
     * @category GET
     */
    getBlockTxids(roundNumber) {
        return new GetBlockTxids(this.c, roundNumber);
    }
    /**
     * Returns the transaction information for a specific pending transaction.
     *
     * #### Example
     * ```typescript
     * const txId = "DRJS6R745A7GFVMXEXWP4TGVDGKW7VILFTA7HC2BR2GRLHNY5CTA";
     * const pending = await algodClient.pendingTransactionInformation(txId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionspendingtxid)
     *
     * @remarks
     * <br><br>
     * There are several cases when this might succeed:
     * - transaction committed (committed round > 0)
     * - transaction still in the pool (committed round = 0, pool error = "")
     * - transaction removed from pool due to error (committed round = 0, pool error != "")
     *
     * Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.
     *
     * @param txid - The TxID string of the pending transaction to look up.
     * @category GET
     */
    pendingTransactionInformation(txid) {
        return new PendingTransactionInformation(this.c, txid);
    }
    /**
     * Returns the list of pending transactions in the pool, sorted by priority, in decreasing order, truncated at the end at MAX.
     * If MAX = 0, returns all pending transactions.
     *
     * #### Example 1
     * ```typescript
     * const pendingTxns = await algodClient.pendingTransactionsInformation().do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const maxTxns = 5;
     * const pendingTxns = await algodClient
     *     .pendingTransactionsInformation()
     *     .max(maxTxns)
     *     .do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionspending)
     * @category GET
     */
    pendingTransactionsInformation() {
        return new PendingTransactions(this.c);
    }
    /**
     * Returns the list of pending transactions sent by the address, sorted by priority, in decreasing order, truncated at the end at MAX.
     * If MAX = 0, returns all pending transactions.
     *
     * #### Example 1
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const pendingTxnsByAddr = await algodClient.pendingTransactionByAddress(address).do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const maxTxns = 5;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const pendingTxns = await algodClient
     *     .pendingTransactionByAddress(address)
     *     .max(maxTxns)
     *     .do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddresstransactionspending)
     * @param address - The address of the sender.
     * @category GET
     */
    pendingTransactionByAddress(address) {
        return new PendingTransactionsByAddress(this.c, address);
    }
    /**
     * Retrieves the StatusResponse from the running node.
     *
     * #### Example
     * ```typescript
     * const status = await algodClient.status().do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2status)
     * @category GET
     */
    status() {
        return new Status(this.c);
    }
    /**
     * Waits for a specific round to occur then returns the `StatusResponse` for that round.
     *
     * #### Example
     * ```typescript
     * const round = 18038133;
     * const statusAfterBlock = await algodClient.statusAfterBlock(round).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2statuswait-for-block-afterround)
     * @param round - The number of the round to wait for.
     * @category GET
     */
    statusAfterBlock(round) {
        return new StatusAfterBlock(this.c, round);
    }
    /**
     * Returns the common needed parameters for a new transaction.
     *
     * #### Example
     * ```typescript
     * const suggestedParams = await algodClient.getTransactionParams().do();
     * const amountInMicroAlgos = algosdk.algosToMicroalgos(2); // 2 Algos
     * const unsignedTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({
     *   sender: senderAddress,
     *   receiver: receiverAddress,
     *   amount: amountInMicroAlgos,
     *   suggestedParams: suggestedParams,
     * });
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionsparams)
     *
     * @remarks
     * Often used with
     * {@linkcode makePaymentTxnWithSuggestedParamsFromObject}, {@linkcode algosToMicroalgos}
     * @category GET
     */
    getTransactionParams() {
        return new SuggestedParamsRequest(this.c);
    }
    /**
     * Returns the supply details for the specified node's ledger.
     *
     * #### Example
     * ```typescript
     * const supplyDetails = await algodClient.supply().do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2ledgersupply)
     * @category GET
     */
    supply() {
        return new Supply(this.c);
    }
    /**
     * Compiles TEAL source code to binary, returns base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).
     *
     * #### Example
     * ```typescript
     * const source = "TEAL SOURCE CODE";
     * const compiledSmartContract = await algodClient.compile(source).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2tealcompile)
     * @remarks
     * This endpoint is only enabled when a node's configuration file sets `EnableDeveloperAPI` to true.
     * @param source
     * @category POST
     */
    compile(source) {
        return new Compile(this.c, source);
    }
    /**
     * Given the program bytes, return the TEAL source code in plain text.
     *
     * #### Example
     * ```typescript
     * const bytecode = "TEAL bytecode";
     * const disassembledSource = await algodClient.disassemble(bytecode).do();
     * ```
     *
     * @remarks This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.
     * @param source
     */
    disassemble(source) {
        return new Disassemble(this.c, source);
    }
    /**
     * Provides debugging information for a transaction (or group).
     *
     * Executes TEAL program(s) in context and returns debugging information about the execution. This endpoint is only enabled when a node's configureation file sets `EnableDeveloperAPI` to true.
     *
     * #### Example
     * ```typescript
     * const dryRunResult = await algodClient.dryrun(dr).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2tealdryrun)
     * @param dr
     * @category POST
     */
    dryrun(dr) {
        return new Dryrun(this.c, dr);
    }
    /**
     * Given an asset ID, return asset information including creator, name, total supply and
     * special addresses.
     *
     * #### Example
     * ```typescript
     * const asset_id = 163650;
     * const asset = await algodClient.getAssetByID(asset_id).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2assetsasset-id)
     * @param index - The asset ID to look up.
     * @category GET
     */
    getAssetByID(index) {
        return new GetAssetByID(this.c, index);
    }
    /**
     * Given an application ID, return the application information including creator, approval
     * and clear programs, global and local schemas, and global state.
     *
     * #### Example
     * ```typescript
     * const index = 60553466;
     * const app = await algodClient.getApplicationByID(index).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-id)
     * @param index - The application ID to look up.
     * @category GET
     */
    getApplicationByID(index) {
        return new GetApplicationByID(this.c, index);
    }
    /**
     * Given an application ID and the box name (key), return the value stored in the box.
     *
     * #### Example
     * ```typescript
     * const index = 60553466;
     * const boxName = Buffer.from("foo");
     * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();
     * const boxValue = boxResponse.value;
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)
     * @param index - The application ID to look up.
     * @category GET
     */
    getApplicationBoxByName(index, boxName) {
        return new GetApplicationBoxByName(this.c, index, boxName);
    }
    /**
     * Given an application ID, return all the box names associated with the app.
     *
     * #### Example
     * ```typescript
     * const index = 60553466;
     * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();
     * const boxNames = boxesResponse.boxes.map(box => box.name);
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idboxes)
     * @param index - The application ID to look up.
     * @category GET
     */
    getApplicationBoxes(index) {
        return new GetApplicationBoxes(this.c, index);
    }
    /**
     * Returns the entire genesis file.
     *
     * #### Example
     * ```typescript
     * const genesis = await algodClient.genesis().do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-genesis)
     * @category GET
     */
    genesis() {
        return new Genesis(this.c);
    }
    /**
     * Returns a Merkle proof for a given transaction in a block.
     *
     * #### Example
     * ```typescript
     * const round = 18038133;
     * const txId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
     * const proof = await algodClient.getTransactionProof(round, txId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundtransactionstxidproof)
     * @param round - The round in which the transaction appears.
     * @param txID - The transaction ID for which to generate a proof.
     * @category GET
     */
    getTransactionProof(round, txID) {
        return new GetTransactionProof(this.c, round, txID);
    }
    /**
     * Gets a proof for a given light block header inside a state proof commitment.
     *
     * #### Example
     * ```typescript
     * const round = 11111111;
     * const lightBlockHeaderProof = await algodClient.getLightBlockHeaderProof(round).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2#get-v2blocksroundlightheaderproof)
     * @param round
     */
    getLightBlockHeaderProof(round) {
        return new LightBlockHeaderProof(this.c, round);
    }
    /**
     * Gets a state proof that covers a given round.
     *
     * #### Example
     * ```typescript
     * const round = 11111111;
     * const stateProof = await algodClient.getStateProof(round).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2#get-v2stateproofsround)
     * @param round
     */
    getStateProof(round) {
        return new StateProof(this.c, round);
    }
    /**
     * Simulate a list of a signed transaction objects being sent to the network.
     *
     * #### Example
     * ```typescript
     * const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn1Params);
     * const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn2Params);
     * const txgroup = algosdk.assignGroupID([txn1, txn2]);
     *
     * // Actually sign the first transaction
     * const signedTxn1 = txgroup[0].signTxn(senderSk).blob;
     * // Simulate does not require signed transactions -- use this method to encode an unsigned transaction
     * const signedTxn2 = algosdk.encodeUnsignedSimulateTransaction(txgroup[1]);
     *
     * const resp = await client.simulateRawTransactions([signedTxn1, signedTxn2]).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactionssimulate)
     * @param stxOrStxs
     * @category POST
     */
    simulateRawTransactions(stxOrStxs) {
        const txnObjects = [];
        if (Array.isArray(stxOrStxs)) {
            for (const stxn of stxOrStxs) {
                txnObjects.push(decodeMsgpack(stxn, SignedTransaction));
            }
        }
        else {
            txnObjects.push(decodeMsgpack(stxOrStxs, SignedTransaction));
        }
        const request = new SimulateRequest({
            txnGroups: [
                new SimulateRequestTransactionGroup({
                    txns: txnObjects,
                }),
            ],
        });
        return this.simulateTransactions(request);
    }
    /**
     * Simulate transactions being sent to the network.
     *
     * #### Example
     * ```typescript
     * const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn1Params);
     * const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn2Params);
     * const txgroup = algosdk.assignGroupID([txn1, txn2]);
     *
     * // Actually sign the first transaction
     * const signedTxn1 = txgroup[0].signTxn(senderSk).blob;
     * // Simulate does not require signed transactions -- use this method to encode an unsigned transaction
     * const signedTxn2 = algosdk.encodeUnsignedSimulateTransaction(txgroup[1]);
     *
     * const request = new modelsv2.SimulateRequest({
     *  txnGroups: [
     *    new modelsv2.SimulateRequestTransactionGroup({
     *       // Must decode the signed txn bytes into an object
     *       txns: [algosdk.decodeObj(signedTxn1), algosdk.decodeObj(signedTxn2)]
     *     }),
     *   ],
     * });
     * const resp = await client.simulateRawTransactions(request).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactionssimulate)
     * @param request
     * @category POST
     */
    simulateTransactions(request) {
        return new SimulateRawTransactions(this.c, request);
    }
    /**
     * Set the offset (in seconds) applied to the block timestamp when creating new blocks in devmode.
     *
     *  #### Example
     *  ```typesecript
     *  const offset = 60
     *  await client.setBlockOffsetTimestamp(offset).do();
     *  ```
     *
     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2devmodeblocksoffsetoffset)
     * @param offset
     * @category POST
     */
    setBlockOffsetTimestamp(offset) {
        return new SetBlockOffsetTimestamp(this.c, offset);
    }
    /**
     * Get the offset (in seconds) applied to the block timestamp when creating new blocks in devmode.
     *
     *  #### Example
     *  ```typesecript
     *  const currentOffset = await client.getBlockOffsetTimestamp().do();
     *  ```
     *
     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2devmodeblocksoffset)
     * @category GET
     */
    getBlockOffsetTimestamp() {
        return new GetBlockOffsetTimestamp(this.c);
    }
    /**
     * Set the sync round on the ledger (algod must have EnableFollowMode: true), restricting catchup.
     *
     *  #### Example
     *  ```typesecript
     *  const round = 10000
     *  await client.setSyncRound(round).do();
     *  ```
     *
     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2ledgersyncround)
     * @param round
     * @category POST
     */
    setSyncRound(round) {
        return new SetSyncRound(this.c, round);
    }
    /**
     * Un-Set the sync round on the ledger (algod must have EnableFollowMode: true), removing the restriction on catchup.
     *
     *  #### Example
     *  ```typesecript
     *  await client.unsetSyncRound().do();
     *  ```
     *
     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#delete-v2ledgersync)
     * @category DELETE
     */
    unsetSyncRound() {
        return new UnsetSyncRound(this.c);
    }
    /**
     * Get the current sync round on the ledger (algod must have EnableFollowMode: true).
     *
     *  #### Example
     *  ```typesecript
     *  const currentSyncRound = await client.getSyncRound().do();
     *  ```
     *
     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2ledgersync)
     * @category GET
     */
    getSyncRound() {
        return new GetSyncRound(this.c);
    }
    /**
     * Ready check which returns 200 OK if algod is healthy and caught up
     *
     *  #### Example
     *  ```typesecript
     *  await client.ready().do();
     *  ```
     *
     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-ready)
     * @category GET
     */
    ready() {
        return new Ready(this.c);
    }
    /**
     * GetLedgerStateDeltaForTransactionGroup returns the ledger delta for the txn group identified by id
     *
     * #### Example
     * ```typescript
     * const id = "ABC123";
     * await client.getLedgerStateDeltaForTransactionGroup(id).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltastxngroupid)
     * @param id txn ID or group ID to be searched for
     * @category GET
     */
    getLedgerStateDeltaForTransactionGroup(id) {
        return new GetLedgerStateDeltaForTransactionGroup(this.c, id);
    }
    /**
     * GetLedgerStateDelta returns the ledger delta for the entire round
     *
     * #### Example
     * ```typescript
     * const round = 12345;
     * await client.getLedgerStateDelta(round).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltasround)
     * @param round the round number to be searched for
     * @category GET
     */
    getLedgerStateDelta(round) {
        return new GetLedgerStateDelta(this.c, round);
    }
    /**
     * GetTransactionGroupLedgerStateDeltasForRound returns all ledger deltas for txn groups in the provided round
     *
     * #### Example
     * ```typescript
     * const round = 12345;
     * await client.getTransactionGroupLedgerStateDeltasForRound(round).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltasroundtxngroup)
     * @param round the round number to be searched for
     * @category GET
     */
    getTransactionGroupLedgerStateDeltasForRound(round) {
        return new GetTransactionGroupLedgerStateDeltasForRound(this.c, round);
    }
}

class KmdClient extends ServiceClient {
    constructor(token, baseServer = 'http://127.0.0.1', port = 7833, headers = {}) {
        super('X-KMD-API-Token', token, baseServer, port, headers);
    }
    async get(relativePath) {
        const res = await this.c.get({
            relativePath,
        });
        return res.parseBodyAsJSON({
            // Using SAFE for all KMD endpoints because no integers in responses should ever be too big
            intDecoding: IntDecoding$1.SAFE,
        });
    }
    async delete(relativePath, data) {
        const res = await this.c.delete({
            relativePath,
            data,
        });
        return res.parseBodyAsJSON({
            // Using SAFE for all KMD endpoints because no integers in responses should ever be too big
            intDecoding: IntDecoding$1.SAFE,
        });
    }
    async post(relativePath, data) {
        const res = await this.c.post({
            relativePath,
            data,
        });
        return res.parseBodyAsJSON({
            // Using SAFE for all KMD endpoints because no integers in responses should ever be too big
            intDecoding: IntDecoding$1.SAFE,
        });
    }
    /**
     * version returns a VersionResponse containing a list of kmd API versions supported by this running kmd instance.
     */
    async versions() {
        return this.get('/versions');
    }
    /**
     * listWallets returns a ListWalletsResponse containing the list of wallets known to kmd. Using a wallet ID
     * returned from this endpoint, you can initialize a wallet handle with client.InitWalletHandle
     */
    async listWallets() {
        return this.get('/v1/wallets');
    }
    /**
     * createWallet creates a wallet with the specified name, password, driver,
     * and master derivation key. If the master derivation key is blank, one is
     * generated internally to kmd. CreateWallet returns a CreateWalletResponse
     * containing information about the new wallet.
     * @param walletName
     * @param walletPassword
     * @param walletDriverName
     * @param walletMDK
     */
    async createWallet(walletName, walletPassword, walletMDK = new Uint8Array(), walletDriverName = 'sqlite') {
        const req = {
            wallet_name: walletName,
            wallet_driver_name: walletDriverName,
            wallet_password: walletPassword,
            master_derivation_key: bytesToBase64(walletMDK),
        };
        return this.post('/v1/wallet', req);
    }
    /**
     * initWalletHandle accepts a wallet ID and a wallet password, and returns an
     * initWalletHandleResponse containing a wallet handle token. This wallet
     * handle token can be used for subsequent operations on this wallet, like key
     * generation, transaction signing, etc.. WalletHandleTokens expire after a
     * configurable number of seconds, and must be renewed periodically with
     * RenewWalletHandle. It is good practice to call ReleaseWalletHandle when
     * you're done interacting with this wallet.
     * @param walletID
     * @param walletPassword
     */
    async initWalletHandle(walletID, walletPassword) {
        const req = {
            wallet_id: walletID,
            wallet_password: walletPassword,
        };
        return this.post('/v1/wallet/init', req);
    }
    /**
     * releaseWalletHandle invalidates the passed wallet handle token, making
     * it unusuable for subsequent wallet operations.
     * @param walletHandle
     */
    async releaseWalletHandle(walletHandle) {
        const req = {
            wallet_handle_token: walletHandle,
        };
        return this.post('/v1/wallet/release', req);
    }
    /**
     * renewWalletHandle accepts a wallet handle and attempts to renew it, moving
     * the expiration time to some number of seconds in the future. It returns a
     * RenewWalletHandleResponse containing the walletHandle and the number of
     * seconds until expiration
     * @param walletHandle
     */
    async renewWalletHandle(walletHandle) {
        const req = {
            wallet_handle_token: walletHandle,
        };
        return this.post('/v1/wallet/renew', req);
    }
    /**
     * renameWallet accepts a wallet ID, wallet password, and a new wallet name,
     * and renames the underlying wallet.
     * @param walletID
     * @param walletPassword
     * @param newWalletName
     */
    async renameWallet(walletID, walletPassword, newWalletName) {
        const req = {
            wallet_id: walletID,
            wallet_password: walletPassword,
            wallet_name: newWalletName,
        };
        return this.post('/v1/wallet/rename', req);
    }
    /**
     * getWallet accepts a wallet handle and returns high level information about
     * this wallet in a GetWalletResponse.
     * @param walletHandle
     */
    async getWallet(walletHandle) {
        const req = {
            wallet_handle_token: walletHandle,
        };
        return this.post('/v1/wallet/info', req);
    }
    /**
     * exportMasterDerivationKey accepts a wallet handle and a wallet password, and
     * returns an ExportMasterDerivationKeyResponse containing the master
     * derivation key. This key can be used as an argument to CreateWallet in
     * order to recover the keys generated by this wallet. The master derivation
     * key can be encoded as a sequence of words using the mnemonic library, and
     * @param walletHandle
     * @param walletPassword
     */
    async exportMasterDerivationKey(walletHandle, walletPassword) {
        const req = {
            wallet_handle_token: walletHandle,
            wallet_password: walletPassword,
        };
        const res = await this.post('/v1/master-key/export', req);
        return {
            master_derivation_key: base64ToBytes(res.master_derivation_key),
        };
    }
    /**
     * importKey accepts a wallet handle and an ed25519 private key, and imports
     * the key into the wallet. It returns an ImportKeyResponse containing the
     * address corresponding to this private key.
     * @param walletHandle
     * @param secretKey
     */
    async importKey(walletHandle, secretKey) {
        const req = {
            wallet_handle_token: walletHandle,
            private_key: bytesToBase64(secretKey),
        };
        return this.post('/v1/key/import', req);
    }
    /**
     * exportKey accepts a wallet handle, wallet password, and address, and returns
     * an ExportKeyResponse containing the ed25519 private key corresponding to the
     * address stored in the wallet.
     * @param walletHandle
     * @param walletPassword
     * @param addr
     */
    async exportKey(walletHandle, walletPassword, addr) {
        const req = {
            wallet_handle_token: walletHandle,
            address: addr,
            wallet_password: walletPassword,
        };
        const res = await this.post('/v1/key/export', req);
        return { private_key: base64ToBytes(res.private_key) };
    }
    /**
     * generateKey accepts a wallet handle, and then generates the next key in the
     * wallet using its internal master derivation key. Two wallets with the same
     * master derivation key will generate the same sequence of keys.
     * @param walletHandle
     */
    async generateKey(walletHandle) {
        const req = {
            wallet_handle_token: walletHandle,
            display_mnemonic: false,
        };
        return this.post('/v1/key', req);
    }
    /**
     * deleteKey accepts a wallet handle, wallet password, and address, and deletes
     * the information about this address from the wallet (including address and
     * secret key). If DeleteKey is called on a key generated using GenerateKey,
     * the same key will not be generated again. However, if a wallet is recovered
     * using the master derivation key, a key generated in this way can be
     * recovered.
     * @param walletHandle
     * @param walletPassword
     * @param addr
     */
    async deleteKey(walletHandle, walletPassword, addr) {
        const req = {
            wallet_handle_token: walletHandle,
            address: addr,
            wallet_password: walletPassword,
        };
        return this.delete('/v1/key', req);
    }
    /**
     * ListKeys accepts a wallet handle and returns a ListKeysResponse containing
     * all of the addresses for which this wallet contains secret keys.
     * @param walletHandle
     */
    async listKeys(walletHandle) {
        const req = {
            wallet_handle_token: walletHandle,
        };
        return this.post('/v1/key/list', req);
    }
    /**
     * signTransaction accepts a wallet handle, wallet password, and a transaction,
     * and returns and SignTransactionResponse containing an encoded, signed
     * transaction. The transaction is signed using the key corresponding to the
     * Sender field.
     * @param walletHandle
     * @param walletPassword
     * @param transaction
     */
    async signTransaction(walletHandle, walletPassword, transaction) {
        const req = {
            wallet_handle_token: walletHandle,
            wallet_password: walletPassword,
            transaction: bytesToBase64(transaction.toByte()),
        };
        const res = await this.post('/v1/transaction/sign', req);
        return base64ToBytes(res.signed_transaction);
    }
    /**
     * signTransactionWithSpecificPublicKey accepts a wallet handle, wallet password, a transaction, and a public key,
     * and returns and SignTransactionResponse containing an encoded, signed
     * transaction. The transaction is signed using the key corresponding to the
     * publicKey arg.
     * @param walletHandle
     * @param walletPassword
     * @param transaction
     * @param publicKey - sign the txn with the key corresponding to publicKey (used for working with a rekeyed addr)
     */
    async signTransactionWithSpecificPublicKey(walletHandle, walletPassword, transaction, publicKey) {
        const pk = coerceToBytes(publicKey);
        const req = {
            wallet_handle_token: walletHandle,
            wallet_password: walletPassword,
            transaction: bytesToBase64(transaction.toByte()),
            public_key: bytesToBase64(pk),
        };
        const res = await this.post('/v1/transaction/sign', req);
        return base64ToBytes(res.signed_transaction);
    }
    /**
     * listMultisig accepts a wallet handle and returns a ListMultisigResponse
     * containing the multisig addresses whose preimages are stored in this wallet.
     * A preimage is the information needed to reconstruct this multisig address,
     * including multisig version information, threshold information, and a list
     * of public keys.
     * @param walletHandle
     */
    async listMultisig(walletHandle) {
        const req = {
            wallet_handle_token: walletHandle,
        };
        return this.post('/v1/multisig/list', req);
    }
    /**
     * importMultisig accepts a wallet handle and the information required to
     * generate a multisig address. It derives this address, and stores all of the
     * information within the wallet. It returns a ImportMultisigResponse with the
     * derived address.
     * @param walletHandle
     * @param version
     * @param threshold
     * @param pks
     */
    async importMultisig(walletHandle, version, threshold, pks) {
        const req = {
            wallet_handle_token: walletHandle,
            multisig_version: version,
            threshold,
            pks,
        };
        return this.post('/v1/multisig/import', req);
    }
    /**
     * exportMultisig accepts a wallet handle, wallet password, and multisig
     * address, and returns an ExportMultisigResponse containing the stored
     * multisig preimage. The preimage contains all of the information necessary
     * to derive the multisig address, including version, threshold, and a list of
     * public keys.
     * @param walletHandle
     * @param walletPassword
     * @param addr
     */
    async exportMultisig(walletHandle, addr) {
        const req = {
            wallet_handle_token: walletHandle,
            address: addr,
        };
        return this.post('/v1/multisig/export', req);
    }
    /**
     * signMultisigTransaction accepts a wallet handle, wallet password,
     * transaction, public key (*not* an address), and an optional partial
     * MultisigSig. It looks up the secret key corresponding to the public key, and
     * returns a SignMultisigTransactionResponse containing a MultisigSig with a
     * signature by the secret key included.
     * @param walletHandle
     * @param pw
     * @param tx
     * @param pk
     * @param partial
     */
    async signMultisigTransaction(walletHandle, pw, transaction, pk, partial) {
        const pubkey = coerceToBytes(pk);
        const req = {
            wallet_handle_token: walletHandle,
            transaction: bytesToBase64(transaction.toByte()),
            public_key: bytesToBase64(pubkey),
            partial_multisig: partial,
            wallet_password: pw,
        };
        return this.post('/v1/multisig/sign', req);
    }
    /**
     * deleteMultisig accepts a wallet handle, wallet password, and multisig
     * address, and deletes the information about this multisig address from the
     * wallet (including address and secret key).
     * @param walletHandle
     * @param walletPassword
     * @param addr
     */
    async deleteMultisig(walletHandle, walletPassword, addr) {
        const req = {
            wallet_handle_token: walletHandle,
            address: addr,
            wallet_password: walletPassword,
        };
        return this.delete('/v1/multisig', req);
    }
}

/**
 * NOTICE: This file was generated. Editing this file manually is not recommended.
 */
/* eslint-disable no-use-before-define */
/**
 * Account information at a given round.
 * Definition:
 * data/basics/userBalance.go : AccountData
 */
class Account {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'address', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'amount-without-pending-rewards',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'min-balance',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'pending-rewards',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, { key: 'rewards', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'status', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'total-apps-opted-in',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'total-assets-opted-in',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'total-box-bytes',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'total-boxes',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'total-created-apps',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'total-created-assets',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'apps-local-state',
                valueSchema: new OptionalSchema(new ArraySchema(ApplicationLocalState.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'apps-total-extra-pages',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'apps-total-schema',
                valueSchema: new OptionalSchema(ApplicationStateSchema.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'assets',
                valueSchema: new OptionalSchema(new ArraySchema(AssetHolding.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'auth-addr',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'closed-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'created-apps',
                valueSchema: new OptionalSchema(new ArraySchema(Application.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'created-assets',
                valueSchema: new OptionalSchema(new ArraySchema(Asset.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'created-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'deleted',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'incentive-eligible',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'last-heartbeat',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'last-proposed',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'participation',
                valueSchema: new OptionalSchema(AccountParticipation.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'reward-base',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'sig-type',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `Account` object.
     * @param address - the account public key
     * @param amount - total number of MicroAlgos in the account
     * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.
     * @param minBalance - MicroAlgo balance required by the account.
     * The requirement grows based on asset and application usage.
     * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.
     * @param rewards - total rewards of MicroAlgos the account has received, including pending rewards.
     * @param round - The round for which this information is relevant.
     * @param status - voting status of the account's MicroAlgos
     * * Offline - indicates that the associated account is delegated.
     * * Online - indicates that the associated account used as part of the delegation
     * pool.
     * * NotParticipating - indicates that the associated account is neither a
     * delegator nor a delegate.
     * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count
     * of application local data (AppLocalState objects) stored in this account.
     * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of
     * AssetHolding objects held by this account.
     * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and
     * values of boxes which belong to the associated application.
     * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated
     * application.
     * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.
     * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.
     * @param appsLocalState - application local data stored in this account.
     * Note the raw object uses `map[int] -> AppLocalState` for this type.
     * @param appsTotalExtraPages - the sum of all extra application program pages for this account.
     * @param appsTotalSchema - the sum of all of the local schemas and global schemas in this account.
     * Note: the raw account uses `StateSchema` for this type.
     * @param assets - assets held by this account.
     * Note the raw object uses `map[int] -> AssetHolding` for this type.
     * @param authAddr - The address against which signing should be checked. If empty, the address of
     * the current account is used. This field can be updated in any transaction by
     * setting the RekeyTo field.
     * @param closedAtRound - Round during which this account was most recently closed.
     * @param createdApps - parameters of applications created by this account including app global data.
     * Note: the raw account uses `map[int] -> AppParams` for this type.
     * @param createdAssets - parameters of assets created by this account.
     * Note: the raw account uses `map[int] -> Asset` for this type.
     * @param createdAtRound - Round during which this account first appeared in a transaction.
     * @param deleted - Whether or not this account is currently closed.
     * @param incentiveEligible - can the account receive block incentives if its balance is in range at proposal
     * time.
     * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their
     * online status.
     * @param lastProposed - The round in which this account last proposed the block.
     * @param participation - AccountParticipation describes the parameters used by this account in consensus
     * protocol.
     * @param rewardBase - used as part of the rewards computation. Only applicable to accounts which are
     * participating.
     * @param sigType - the type of signature used by this account, must be one of:
     * * sig
     * * msig
     * * lsig
     * * or null if unknown
     */
    constructor({ address, amount, amountWithoutPendingRewards, minBalance, pendingRewards, rewards, round, status, totalAppsOptedIn, totalAssetsOptedIn, totalBoxBytes, totalBoxes, totalCreatedApps, totalCreatedAssets, appsLocalState, appsTotalExtraPages, appsTotalSchema, assets, authAddr, closedAtRound, createdApps, createdAssets, createdAtRound, deleted, incentiveEligible, lastHeartbeat, lastProposed, participation, rewardBase, sigType, }) {
        this.address = address;
        this.amount = ensureBigInt(amount);
        this.amountWithoutPendingRewards = ensureBigInt(amountWithoutPendingRewards);
        this.minBalance = ensureSafeInteger(minBalance);
        this.pendingRewards = ensureBigInt(pendingRewards);
        this.rewards = ensureBigInt(rewards);
        this.round = ensureBigInt(round);
        this.status = status;
        this.totalAppsOptedIn = ensureSafeInteger(totalAppsOptedIn);
        this.totalAssetsOptedIn = ensureSafeInteger(totalAssetsOptedIn);
        this.totalBoxBytes = ensureSafeInteger(totalBoxBytes);
        this.totalBoxes = ensureSafeInteger(totalBoxes);
        this.totalCreatedApps = ensureSafeInteger(totalCreatedApps);
        this.totalCreatedAssets = ensureSafeInteger(totalCreatedAssets);
        this.appsLocalState = appsLocalState;
        this.appsTotalExtraPages =
            typeof appsTotalExtraPages === 'undefined'
                ? undefined
                : ensureSafeInteger(appsTotalExtraPages);
        this.appsTotalSchema = appsTotalSchema;
        this.assets = assets;
        this.authAddr =
            typeof authAddr === 'string' ? Address.fromString(authAddr) : authAddr;
        this.closedAtRound =
            typeof closedAtRound === 'undefined'
                ? undefined
                : ensureBigInt(closedAtRound);
        this.createdApps = createdApps;
        this.createdAssets = createdAssets;
        this.createdAtRound =
            typeof createdAtRound === 'undefined'
                ? undefined
                : ensureBigInt(createdAtRound);
        this.deleted = deleted;
        this.incentiveEligible = incentiveEligible;
        this.lastHeartbeat =
            typeof lastHeartbeat === 'undefined'
                ? undefined
                : ensureSafeInteger(lastHeartbeat);
        this.lastProposed =
            typeof lastProposed === 'undefined'
                ? undefined
                : ensureSafeInteger(lastProposed);
        this.participation = participation;
        this.rewardBase =
            typeof rewardBase === 'undefined' ? undefined : ensureBigInt(rewardBase);
        this.sigType = sigType;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Account.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['address', this.address],
            ['amount', this.amount],
            ['amount-without-pending-rewards', this.amountWithoutPendingRewards],
            ['min-balance', this.minBalance],
            ['pending-rewards', this.pendingRewards],
            ['rewards', this.rewards],
            ['round', this.round],
            ['status', this.status],
            ['total-apps-opted-in', this.totalAppsOptedIn],
            ['total-assets-opted-in', this.totalAssetsOptedIn],
            ['total-box-bytes', this.totalBoxBytes],
            ['total-boxes', this.totalBoxes],
            ['total-created-apps', this.totalCreatedApps],
            ['total-created-assets', this.totalCreatedAssets],
            [
                'apps-local-state',
                typeof this.appsLocalState !== 'undefined'
                    ? this.appsLocalState.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['apps-total-extra-pages', this.appsTotalExtraPages],
            [
                'apps-total-schema',
                typeof this.appsTotalSchema !== 'undefined'
                    ? this.appsTotalSchema.toEncodingData()
                    : undefined,
            ],
            [
                'assets',
                typeof this.assets !== 'undefined'
                    ? this.assets.map((v) => v.toEncodingData())
                    : undefined,
            ],
            [
                'auth-addr',
                typeof this.authAddr !== 'undefined'
                    ? this.authAddr.toString()
                    : undefined,
            ],
            ['closed-at-round', this.closedAtRound],
            [
                'created-apps',
                typeof this.createdApps !== 'undefined'
                    ? this.createdApps.map((v) => v.toEncodingData())
                    : undefined,
            ],
            [
                'created-assets',
                typeof this.createdAssets !== 'undefined'
                    ? this.createdAssets.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['created-at-round', this.createdAtRound],
            ['deleted', this.deleted],
            ['incentive-eligible', this.incentiveEligible],
            ['last-heartbeat', this.lastHeartbeat],
            ['last-proposed', this.lastProposed],
            [
                'participation',
                typeof this.participation !== 'undefined'
                    ? this.participation.toEncodingData()
                    : undefined,
            ],
            ['reward-base', this.rewardBase],
            ['sig-type', this.sigType],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Account: ${data}`);
        }
        return new Account({
            address: data.get('address'),
            amount: data.get('amount'),
            amountWithoutPendingRewards: data.get('amount-without-pending-rewards'),
            minBalance: data.get('min-balance'),
            pendingRewards: data.get('pending-rewards'),
            rewards: data.get('rewards'),
            round: data.get('round'),
            status: data.get('status'),
            totalAppsOptedIn: data.get('total-apps-opted-in'),
            totalAssetsOptedIn: data.get('total-assets-opted-in'),
            totalBoxBytes: data.get('total-box-bytes'),
            totalBoxes: data.get('total-boxes'),
            totalCreatedApps: data.get('total-created-apps'),
            totalCreatedAssets: data.get('total-created-assets'),
            appsLocalState: typeof data.get('apps-local-state') !== 'undefined'
                ? data
                    .get('apps-local-state')
                    .map((v) => ApplicationLocalState.fromEncodingData(v))
                : undefined,
            appsTotalExtraPages: data.get('apps-total-extra-pages'),
            appsTotalSchema: typeof data.get('apps-total-schema') !== 'undefined'
                ? ApplicationStateSchema.fromEncodingData(data.get('apps-total-schema'))
                : undefined,
            assets: typeof data.get('assets') !== 'undefined'
                ? data
                    .get('assets')
                    .map((v) => AssetHolding.fromEncodingData(v))
                : undefined,
            authAddr: data.get('auth-addr'),
            closedAtRound: data.get('closed-at-round'),
            createdApps: typeof data.get('created-apps') !== 'undefined'
                ? data
                    .get('created-apps')
                    .map((v) => Application.fromEncodingData(v))
                : undefined,
            createdAssets: typeof data.get('created-assets') !== 'undefined'
                ? data
                    .get('created-assets')
                    .map((v) => Asset.fromEncodingData(v))
                : undefined,
            createdAtRound: data.get('created-at-round'),
            deleted: data.get('deleted'),
            incentiveEligible: data.get('incentive-eligible'),
            lastHeartbeat: data.get('last-heartbeat'),
            lastProposed: data.get('last-proposed'),
            participation: typeof data.get('participation') !== 'undefined'
                ? AccountParticipation.fromEncodingData(data.get('participation'))
                : undefined,
            rewardBase: data.get('reward-base'),
            sigType: data.get('sig-type'),
        });
    }
}
/**
 * AccountParticipation describes the parameters used by this account in consensus
 * protocol.
 */
class AccountParticipation {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'selection-participation-key',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, {
                key: 'vote-first-valid',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'vote-key-dilution',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'vote-last-valid',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'vote-participation-key',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, {
                key: 'state-proof-key',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AccountParticipation` object.
     * @param selectionParticipationKey - Selection public key (if any) currently registered for this round.
     * @param voteFirstValid - First round for which this participation is valid.
     * @param voteKeyDilution - Number of subkeys in each batch of participation keys.
     * @param voteLastValid - Last round for which this participation is valid.
     * @param voteParticipationKey - root participation public key (if any) currently registered for this round.
     * @param stateProofKey - Root of the state proof key (if any)
     */
    constructor({ selectionParticipationKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, stateProofKey, }) {
        this.selectionParticipationKey =
            typeof selectionParticipationKey === 'string'
                ? base64ToBytes(selectionParticipationKey)
                : selectionParticipationKey;
        this.voteFirstValid = ensureBigInt(voteFirstValid);
        this.voteKeyDilution = ensureBigInt(voteKeyDilution);
        this.voteLastValid = ensureBigInt(voteLastValid);
        this.voteParticipationKey =
            typeof voteParticipationKey === 'string'
                ? base64ToBytes(voteParticipationKey)
                : voteParticipationKey;
        this.stateProofKey =
            typeof stateProofKey === 'string'
                ? base64ToBytes(stateProofKey)
                : stateProofKey;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountParticipation.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['selection-participation-key', this.selectionParticipationKey],
            ['vote-first-valid', this.voteFirstValid],
            ['vote-key-dilution', this.voteKeyDilution],
            ['vote-last-valid', this.voteLastValid],
            ['vote-participation-key', this.voteParticipationKey],
            ['state-proof-key', this.stateProofKey],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountParticipation: ${data}`);
        }
        return new AccountParticipation({
            selectionParticipationKey: data.get('selection-participation-key'),
            voteFirstValid: data.get('vote-first-valid'),
            voteKeyDilution: data.get('vote-key-dilution'),
            voteLastValid: data.get('vote-last-valid'),
            voteParticipationKey: data.get('vote-participation-key'),
            stateProofKey: data.get('state-proof-key'),
        });
    }
}
/**
 *
 */
class AccountResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'account',
                valueSchema: Account.encodingSchema,
                omitEmpty: true,
            }, {
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AccountResponse` object.
     * @param account - Account information at a given round.
     * Definition:
     * data/basics/userBalance.go : AccountData
     * @param currentRound - Round at which the results were computed.
     */
    constructor({ account, currentRound, }) {
        this.account = account;
        this.currentRound = ensureBigInt(currentRound);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['account', this.account.toEncodingData()],
            ['current-round', this.currentRound],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountResponse: ${data}`);
        }
        return new AccountResponse({
            account: Account.fromEncodingData(data.get('account') ?? new Map()),
            currentRound: data.get('current-round'),
        });
    }
}
/**
 * Application state delta.
 */
class AccountStateDelta {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'address', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'delta',
                valueSchema: new ArraySchema(EvalDeltaKeyValue.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AccountStateDelta` object.
     * @param address -
     * @param delta - Application state delta.
     */
    constructor({ address, delta, }) {
        this.address = address;
        this.delta = delta;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountStateDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['address', this.address],
            ['delta', this.delta.map((v) => v.toEncodingData())],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountStateDelta: ${data}`);
        }
        return new AccountStateDelta({
            address: data.get('address'),
            delta: (data.get('delta') ?? []).map((v) => EvalDeltaKeyValue.fromEncodingData(v)),
        });
    }
}
/**
 *
 */
class AccountsResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'accounts',
                valueSchema: new ArraySchema(Account.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'next-token',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AccountsResponse` object.
     * @param accounts -
     * @param currentRound - Round at which the results were computed.
     * @param nextToken - Used for pagination, when making another request provide this token with the
     * next parameter.
     */
    constructor({ accounts, currentRound, nextToken, }) {
        this.accounts = accounts;
        this.currentRound = ensureBigInt(currentRound);
        this.nextToken = nextToken;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AccountsResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['accounts', this.accounts.map((v) => v.toEncodingData())],
            ['current-round', this.currentRound],
            ['next-token', this.nextToken],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AccountsResponse: ${data}`);
        }
        return new AccountsResponse({
            accounts: (data.get('accounts') ?? []).map((v) => Account.fromEncodingData(v)),
            currentRound: data.get('current-round'),
            nextToken: data.get('next-token'),
        });
    }
}
/**
 * Application index and its parameters
 */
class Application {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'id', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'params',
                valueSchema: ApplicationParams.encodingSchema,
                omitEmpty: true,
            }, {
                key: 'created-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'deleted',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'deleted-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `Application` object.
     * @param id - application index.
     * @param params - application parameters.
     * @param createdAtRound - Round when this application was created.
     * @param deleted - Whether or not this application is currently deleted.
     * @param deletedAtRound - Round when this application was deleted.
     */
    constructor({ id, params, createdAtRound, deleted, deletedAtRound, }) {
        this.id = ensureBigInt(id);
        this.params = params;
        this.createdAtRound =
            typeof createdAtRound === 'undefined'
                ? undefined
                : ensureBigInt(createdAtRound);
        this.deleted = deleted;
        this.deletedAtRound =
            typeof deletedAtRound === 'undefined'
                ? undefined
                : ensureBigInt(deletedAtRound);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Application.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['id', this.id],
            ['params', this.params.toEncodingData()],
            ['created-at-round', this.createdAtRound],
            ['deleted', this.deleted],
            ['deleted-at-round', this.deletedAtRound],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Application: ${data}`);
        }
        return new Application({
            id: data.get('id'),
            params: ApplicationParams.fromEncodingData(data.get('params') ?? new Map()),
            createdAtRound: data.get('created-at-round'),
            deleted: data.get('deleted'),
            deletedAtRound: data.get('deleted-at-round'),
        });
    }
}
/**
 * Stores local state associated with an application.
 */
class ApplicationLocalState {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'id', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'schema',
                valueSchema: ApplicationStateSchema.encodingSchema,
                omitEmpty: true,
            }, {
                key: 'closed-out-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'deleted',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'key-value',
                valueSchema: new OptionalSchema(new ArraySchema(TealKeyValue.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'opted-in-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationLocalState` object.
     * @param id - The application which this local state is for.
     * @param schema - schema.
     * @param closedOutAtRound - Round when account closed out of the application.
     * @param deleted - Whether or not the application local state is currently deleted from its
     * account.
     * @param keyValue - storage.
     * @param optedInAtRound - Round when the account opted into the application.
     */
    constructor({ id, schema, closedOutAtRound, deleted, keyValue, optedInAtRound, }) {
        this.id = ensureBigInt(id);
        this.schema = schema;
        this.closedOutAtRound =
            typeof closedOutAtRound === 'undefined'
                ? undefined
                : ensureBigInt(closedOutAtRound);
        this.deleted = deleted;
        this.keyValue = keyValue;
        this.optedInAtRound =
            typeof optedInAtRound === 'undefined'
                ? undefined
                : ensureBigInt(optedInAtRound);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationLocalState.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['id', this.id],
            ['schema', this.schema.toEncodingData()],
            ['closed-out-at-round', this.closedOutAtRound],
            ['deleted', this.deleted],
            [
                'key-value',
                typeof this.keyValue !== 'undefined'
                    ? this.keyValue.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['opted-in-at-round', this.optedInAtRound],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationLocalState: ${data}`);
        }
        return new ApplicationLocalState({
            id: data.get('id'),
            schema: ApplicationStateSchema.fromEncodingData(data.get('schema') ?? new Map()),
            closedOutAtRound: data.get('closed-out-at-round'),
            deleted: data.get('deleted'),
            keyValue: typeof data.get('key-value') !== 'undefined'
                ? data
                    .get('key-value')
                    .map((v) => TealKeyValue.fromEncodingData(v))
                : undefined,
            optedInAtRound: data.get('opted-in-at-round'),
        });
    }
}
/**
 *
 */
class ApplicationLocalStatesResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'apps-local-states',
                valueSchema: new ArraySchema(ApplicationLocalState.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'next-token',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationLocalStatesResponse` object.
     * @param appsLocalStates -
     * @param currentRound - Round at which the results were computed.
     * @param nextToken - Used for pagination, when making another request provide this token with the
     * next parameter.
     */
    constructor({ appsLocalStates, currentRound, nextToken, }) {
        this.appsLocalStates = appsLocalStates;
        this.currentRound = ensureBigInt(currentRound);
        this.nextToken = nextToken;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationLocalStatesResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'apps-local-states',
                this.appsLocalStates.map((v) => v.toEncodingData()),
            ],
            ['current-round', this.currentRound],
            ['next-token', this.nextToken],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationLocalStatesResponse: ${data}`);
        }
        return new ApplicationLocalStatesResponse({
            appsLocalStates: (data.get('apps-local-states') ?? []).map((v) => ApplicationLocalState.fromEncodingData(v)),
            currentRound: data.get('current-round'),
            nextToken: data.get('next-token'),
        });
    }
}
/**
 * Stores the global information associated with an application.
 */
class ApplicationLogData {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'logs',
                valueSchema: new ArraySchema(new ByteArraySchema()),
                omitEmpty: true,
            }, { key: 'txid', valueSchema: new StringSchema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationLogData` object.
     * @param logs - Logs for the application being executed by the transaction.
     * @param txid - Transaction ID
     */
    constructor({ logs, txid }) {
        this.logs = logs;
        this.txid = txid;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationLogData.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['logs', this.logs],
            ['txid', this.txid],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationLogData: ${data}`);
        }
        return new ApplicationLogData({
            logs: data.get('logs'),
            txid: data.get('txid'),
        });
    }
}
/**
 *
 */
class ApplicationLogsResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'application-id',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'log-data',
                valueSchema: new OptionalSchema(new ArraySchema(ApplicationLogData.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'next-token',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationLogsResponse` object.
     * @param applicationId - (appidx) application index.
     * @param currentRound - Round at which the results were computed.
     * @param logData -
     * @param nextToken - Used for pagination, when making another request provide this token with the
     * next parameter.
     */
    constructor({ applicationId, currentRound, logData, nextToken, }) {
        this.applicationId = ensureBigInt(applicationId);
        this.currentRound = ensureBigInt(currentRound);
        this.logData = logData;
        this.nextToken = nextToken;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationLogsResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['application-id', this.applicationId],
            ['current-round', this.currentRound],
            [
                'log-data',
                typeof this.logData !== 'undefined'
                    ? this.logData.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['next-token', this.nextToken],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationLogsResponse: ${data}`);
        }
        return new ApplicationLogsResponse({
            applicationId: data.get('application-id'),
            currentRound: data.get('current-round'),
            logData: typeof data.get('log-data') !== 'undefined'
                ? data
                    .get('log-data')
                    .map((v) => ApplicationLogData.fromEncodingData(v))
                : undefined,
            nextToken: data.get('next-token'),
        });
    }
}
/**
 * Stores the global information associated with an application.
 */
class ApplicationParams {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'approval-program',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, {
                key: 'clear-state-program',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, {
                key: 'creator',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'extra-program-pages',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'global-state',
                valueSchema: new OptionalSchema(new ArraySchema(TealKeyValue.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'global-state-schema',
                valueSchema: new OptionalSchema(ApplicationStateSchema.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'local-state-schema',
                valueSchema: new OptionalSchema(ApplicationStateSchema.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationParams` object.
     * @param approvalProgram - approval program.
     * @param clearStateProgram - clear state program.
     * @param creator - The address that created this application. This is the address where the
     * parameters and global state for this application can be found.
     * @param extraProgramPages - the number of extra program pages available to this app.
     * @param globalState - global state
     * @param globalStateSchema - global schema
     * @param localStateSchema - local schema
     */
    constructor({ approvalProgram, clearStateProgram, creator, extraProgramPages, globalState, globalStateSchema, localStateSchema, }) {
        this.approvalProgram =
            typeof approvalProgram === 'string'
                ? base64ToBytes(approvalProgram)
                : approvalProgram;
        this.clearStateProgram =
            typeof clearStateProgram === 'string'
                ? base64ToBytes(clearStateProgram)
                : clearStateProgram;
        this.creator =
            typeof creator === 'string' ? Address.fromString(creator) : creator;
        this.extraProgramPages =
            typeof extraProgramPages === 'undefined'
                ? undefined
                : ensureSafeInteger(extraProgramPages);
        this.globalState = globalState;
        this.globalStateSchema = globalStateSchema;
        this.localStateSchema = localStateSchema;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationParams.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['approval-program', this.approvalProgram],
            ['clear-state-program', this.clearStateProgram],
            [
                'creator',
                typeof this.creator !== 'undefined'
                    ? this.creator.toString()
                    : undefined,
            ],
            ['extra-program-pages', this.extraProgramPages],
            [
                'global-state',
                typeof this.globalState !== 'undefined'
                    ? this.globalState.map((v) => v.toEncodingData())
                    : undefined,
            ],
            [
                'global-state-schema',
                typeof this.globalStateSchema !== 'undefined'
                    ? this.globalStateSchema.toEncodingData()
                    : undefined,
            ],
            [
                'local-state-schema',
                typeof this.localStateSchema !== 'undefined'
                    ? this.localStateSchema.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationParams: ${data}`);
        }
        return new ApplicationParams({
            approvalProgram: data.get('approval-program'),
            clearStateProgram: data.get('clear-state-program'),
            creator: data.get('creator'),
            extraProgramPages: data.get('extra-program-pages'),
            globalState: typeof data.get('global-state') !== 'undefined'
                ? data
                    .get('global-state')
                    .map((v) => TealKeyValue.fromEncodingData(v))
                : undefined,
            globalStateSchema: typeof data.get('global-state-schema') !== 'undefined'
                ? ApplicationStateSchema.fromEncodingData(data.get('global-state-schema'))
                : undefined,
            localStateSchema: typeof data.get('local-state-schema') !== 'undefined'
                ? ApplicationStateSchema.fromEncodingData(data.get('local-state-schema'))
                : undefined,
        });
    }
}
/**
 *
 */
class ApplicationResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'application',
                valueSchema: new OptionalSchema(Application.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationResponse` object.
     * @param currentRound - Round at which the results were computed.
     * @param application - Application index and its parameters
     */
    constructor({ currentRound, application, }) {
        this.currentRound = ensureBigInt(currentRound);
        this.application = application;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['current-round', this.currentRound],
            [
                'application',
                typeof this.application !== 'undefined'
                    ? this.application.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationResponse: ${data}`);
        }
        return new ApplicationResponse({
            currentRound: data.get('current-round'),
            application: typeof data.get('application') !== 'undefined'
                ? Application.fromEncodingData(data.get('application'))
                : undefined,
        });
    }
}
/**
 * Specifies maximums on the number of each type that may be stored.
 */
class ApplicationStateSchema {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'num-byte-slice',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, { key: 'num-uint', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationStateSchema` object.
     * @param numByteSlice - number of byte slices.
     * @param numUint - number of uints.
     */
    constructor({ numByteSlice, numUint, }) {
        this.numByteSlice = ensureSafeInteger(numByteSlice);
        this.numUint = ensureSafeInteger(numUint);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationStateSchema.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['num-byte-slice', this.numByteSlice],
            ['num-uint', this.numUint],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationStateSchema: ${data}`);
        }
        return new ApplicationStateSchema({
            numByteSlice: data.get('num-byte-slice'),
            numUint: data.get('num-uint'),
        });
    }
}
/**
 *
 */
class ApplicationsResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'applications',
                valueSchema: new ArraySchema(Application.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'next-token',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ApplicationsResponse` object.
     * @param applications -
     * @param currentRound - Round at which the results were computed.
     * @param nextToken - Used for pagination, when making another request provide this token with the
     * next parameter.
     */
    constructor({ applications, currentRound, nextToken, }) {
        this.applications = applications;
        this.currentRound = ensureBigInt(currentRound);
        this.nextToken = nextToken;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ApplicationsResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['applications', this.applications.map((v) => v.toEncodingData())],
            ['current-round', this.currentRound],
            ['next-token', this.nextToken],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ApplicationsResponse: ${data}`);
        }
        return new ApplicationsResponse({
            applications: (data.get('applications') ?? []).map((v) => Application.fromEncodingData(v)),
            currentRound: data.get('current-round'),
            nextToken: data.get('next-token'),
        });
    }
}
/**
 * Specifies both the unique identifier and the parameters for an asset
 */
class Asset {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'index', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'params',
                valueSchema: AssetParams.encodingSchema,
                omitEmpty: true,
            }, {
                key: 'created-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'deleted',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'destroyed-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `Asset` object.
     * @param index - unique asset identifier
     * @param params - AssetParams specifies the parameters for an asset.
     * (apar) when part of an AssetConfig transaction.
     * Definition:
     * data/transactions/asset.go : AssetParams
     * @param createdAtRound - Round during which this asset was created.
     * @param deleted - Whether or not this asset is currently deleted.
     * @param destroyedAtRound - Round during which this asset was destroyed.
     */
    constructor({ index, params, createdAtRound, deleted, destroyedAtRound, }) {
        this.index = ensureBigInt(index);
        this.params = params;
        this.createdAtRound =
            typeof createdAtRound === 'undefined'
                ? undefined
                : ensureBigInt(createdAtRound);
        this.deleted = deleted;
        this.destroyedAtRound =
            typeof destroyedAtRound === 'undefined'
                ? undefined
                : ensureBigInt(destroyedAtRound);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Asset.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['index', this.index],
            ['params', this.params.toEncodingData()],
            ['created-at-round', this.createdAtRound],
            ['deleted', this.deleted],
            ['destroyed-at-round', this.destroyedAtRound],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Asset: ${data}`);
        }
        return new Asset({
            index: data.get('index'),
            params: AssetParams.fromEncodingData(data.get('params') ?? new Map()),
            createdAtRound: data.get('created-at-round'),
            deleted: data.get('deleted'),
            destroyedAtRound: data.get('destroyed-at-round'),
        });
    }
}
/**
 *
 */
class AssetBalancesResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'balances',
                valueSchema: new ArraySchema(MiniAssetHolding.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'next-token',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AssetBalancesResponse` object.
     * @param balances -
     * @param currentRound - Round at which the results were computed.
     * @param nextToken - Used for pagination, when making another request provide this token with the
     * next parameter.
     */
    constructor({ balances, currentRound, nextToken, }) {
        this.balances = balances;
        this.currentRound = ensureBigInt(currentRound);
        this.nextToken = nextToken;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetBalancesResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['balances', this.balances.map((v) => v.toEncodingData())],
            ['current-round', this.currentRound],
            ['next-token', this.nextToken],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetBalancesResponse: ${data}`);
        }
        return new AssetBalancesResponse({
            balances: (data.get('balances') ?? []).map((v) => MiniAssetHolding.fromEncodingData(v)),
            currentRound: data.get('current-round'),
            nextToken: data.get('next-token'),
        });
    }
}
/**
 * Describes an asset held by an account.
 * Definition:
 * data/basics/userBalance.go : AssetHolding
 */
class AssetHolding {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'asset-id', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'is-frozen', valueSchema: new BooleanSchema(), omitEmpty: true }, {
                key: 'deleted',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'opted-in-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'opted-out-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AssetHolding` object.
     * @param amount - number of units held.
     * @param assetId - Asset ID of the holding.
     * @param isFrozen - whether or not the holding is frozen.
     * @param deleted - Whether or not the asset holding is currently deleted from its account.
     * @param optedInAtRound - Round during which the account opted into this asset holding.
     * @param optedOutAtRound - Round during which the account opted out of this asset holding.
     */
    constructor({ amount, assetId, isFrozen, deleted, optedInAtRound, optedOutAtRound, }) {
        this.amount = ensureBigInt(amount);
        this.assetId = ensureBigInt(assetId);
        this.isFrozen = isFrozen;
        this.deleted = deleted;
        this.optedInAtRound =
            typeof optedInAtRound === 'undefined'
                ? undefined
                : ensureBigInt(optedInAtRound);
        this.optedOutAtRound =
            typeof optedOutAtRound === 'undefined'
                ? undefined
                : ensureBigInt(optedOutAtRound);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetHolding.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['amount', this.amount],
            ['asset-id', this.assetId],
            ['is-frozen', this.isFrozen],
            ['deleted', this.deleted],
            ['opted-in-at-round', this.optedInAtRound],
            ['opted-out-at-round', this.optedOutAtRound],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetHolding: ${data}`);
        }
        return new AssetHolding({
            amount: data.get('amount'),
            assetId: data.get('asset-id'),
            isFrozen: data.get('is-frozen'),
            deleted: data.get('deleted'),
            optedInAtRound: data.get('opted-in-at-round'),
            optedOutAtRound: data.get('opted-out-at-round'),
        });
    }
}
/**
 *
 */
class AssetHoldingsResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'assets',
                valueSchema: new ArraySchema(AssetHolding.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'next-token',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AssetHoldingsResponse` object.
     * @param assets -
     * @param currentRound - Round at which the results were computed.
     * @param nextToken - Used for pagination, when making another request provide this token with the
     * next parameter.
     */
    constructor({ assets, currentRound, nextToken, }) {
        this.assets = assets;
        this.currentRound = ensureBigInt(currentRound);
        this.nextToken = nextToken;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetHoldingsResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['assets', this.assets.map((v) => v.toEncodingData())],
            ['current-round', this.currentRound],
            ['next-token', this.nextToken],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetHoldingsResponse: ${data}`);
        }
        return new AssetHoldingsResponse({
            assets: (data.get('assets') ?? []).map((v) => AssetHolding.fromEncodingData(v)),
            currentRound: data.get('current-round'),
            nextToken: data.get('next-token'),
        });
    }
}
/**
 * AssetParams specifies the parameters for an asset.
 * (apar) when part of an AssetConfig transaction.
 * Definition:
 * data/transactions/asset.go : AssetParams
 */
class AssetParams {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'creator', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'decimals', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'total', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'clawback',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'default-frozen',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'freeze',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'manager',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'metadata-hash',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'name',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'name-b64',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'reserve',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'unit-name',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'unit-name-b64',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'url',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'url-b64',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AssetParams` object.
     * @param creator - The address that created this asset. This is the address where the parameters
     * for this asset can be found, and also the address where unwanted asset units can
     * be sent in the worst case.
     * @param decimals - The number of digits to use after the decimal point when displaying this asset.
     * If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths.
     * If 2, the base unit of the asset is in hundredths, and so on. This value must be
     * between 0 and 19 (inclusive).
     * @param total - The total number of units of this asset.
     * @param clawback - Address of account used to clawback holdings of this asset. If empty, clawback
     * is not permitted.
     * @param defaultFrozen - Whether holdings of this asset are frozen by default.
     * @param freeze - Address of account used to freeze holdings of this asset. If empty, freezing is
     * not permitted.
     * @param manager - Address of account used to manage the keys of this asset and to destroy it.
     * @param metadataHash - A commitment to some unspecified asset metadata. The format of this metadata is
     * up to the application.
     * @param name - Name of this asset, as supplied by the creator. Included only when the asset
     * name is composed of printable utf-8 characters.
     * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.
     * @param reserve - Address of account holding reserve (non-minted) units of this asset.
     * @param unitName - Name of a unit of this asset, as supplied by the creator. Included only when the
     * name of a unit of this asset is composed of printable utf-8 characters.
     * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.
     * @param url - URL where more information about the asset can be retrieved. Included only when
     * the URL is composed of printable utf-8 characters.
     * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.
     */
    constructor({ creator, decimals, total, clawback, defaultFrozen, freeze, manager, metadataHash, name, nameB64, reserve, unitName, unitNameB64, url, urlB64, }) {
        this.creator = creator;
        this.decimals = ensureSafeInteger(decimals);
        this.total = ensureBigInt(total);
        this.clawback = clawback;
        this.defaultFrozen = defaultFrozen;
        this.freeze = freeze;
        this.manager = manager;
        this.metadataHash =
            typeof metadataHash === 'string'
                ? base64ToBytes(metadataHash)
                : metadataHash;
        this.name = name;
        this.nameB64 =
            typeof nameB64 === 'string' ? base64ToBytes(nameB64) : nameB64;
        this.reserve = reserve;
        this.unitName = unitName;
        this.unitNameB64 =
            typeof unitNameB64 === 'string'
                ? base64ToBytes(unitNameB64)
                : unitNameB64;
        this.url = url;
        this.urlB64 = typeof urlB64 === 'string' ? base64ToBytes(urlB64) : urlB64;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetParams.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['creator', this.creator],
            ['decimals', this.decimals],
            ['total', this.total],
            ['clawback', this.clawback],
            ['default-frozen', this.defaultFrozen],
            ['freeze', this.freeze],
            ['manager', this.manager],
            ['metadata-hash', this.metadataHash],
            ['name', this.name],
            ['name-b64', this.nameB64],
            ['reserve', this.reserve],
            ['unit-name', this.unitName],
            ['unit-name-b64', this.unitNameB64],
            ['url', this.url],
            ['url-b64', this.urlB64],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetParams: ${data}`);
        }
        return new AssetParams({
            creator: data.get('creator'),
            decimals: data.get('decimals'),
            total: data.get('total'),
            clawback: data.get('clawback'),
            defaultFrozen: data.get('default-frozen'),
            freeze: data.get('freeze'),
            manager: data.get('manager'),
            metadataHash: data.get('metadata-hash'),
            name: data.get('name'),
            nameB64: data.get('name-b64'),
            reserve: data.get('reserve'),
            unitName: data.get('unit-name'),
            unitNameB64: data.get('unit-name-b64'),
            url: data.get('url'),
            urlB64: data.get('url-b64'),
        });
    }
}
/**
 *
 */
class AssetResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'asset', valueSchema: Asset.encodingSchema, omitEmpty: true }, {
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AssetResponse` object.
     * @param asset - Specifies both the unique identifier and the parameters for an asset
     * @param currentRound - Round at which the results were computed.
     */
    constructor({ asset, currentRound, }) {
        this.asset = asset;
        this.currentRound = ensureBigInt(currentRound);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['asset', this.asset.toEncodingData()],
            ['current-round', this.currentRound],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetResponse: ${data}`);
        }
        return new AssetResponse({
            asset: Asset.fromEncodingData(data.get('asset') ?? new Map()),
            currentRound: data.get('current-round'),
        });
    }
}
/**
 *
 */
class AssetsResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'assets',
                valueSchema: new ArraySchema(Asset.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'next-token',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `AssetsResponse` object.
     * @param assets -
     * @param currentRound - Round at which the results were computed.
     * @param nextToken - Used for pagination, when making another request provide this token with the
     * next parameter.
     */
    constructor({ assets, currentRound, nextToken, }) {
        this.assets = assets;
        this.currentRound = ensureBigInt(currentRound);
        this.nextToken = nextToken;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return AssetsResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['assets', this.assets.map((v) => v.toEncodingData())],
            ['current-round', this.currentRound],
            ['next-token', this.nextToken],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded AssetsResponse: ${data}`);
        }
        return new AssetsResponse({
            assets: (data.get('assets') ?? []).map((v) => Asset.fromEncodingData(v)),
            currentRound: data.get('current-round'),
            nextToken: data.get('next-token'),
        });
    }
}
/**
 * Block information.
 * Definition:
 * data/bookkeeping/block.go : Block
 */
class Block {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'genesis-hash',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, { key: 'genesis-id', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'previous-block-hash',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'seed', valueSchema: new ByteArraySchema(), omitEmpty: true }, { key: 'timestamp', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'transactions-root',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, {
                key: 'transactions-root-sha256',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            }, {
                key: 'bonus',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'fees-collected',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'participation-updates',
                valueSchema: new OptionalSchema(ParticipationUpdates.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'proposer',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'proposer-payout',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'rewards',
                valueSchema: new OptionalSchema(BlockRewards.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'state-proof-tracking',
                valueSchema: new OptionalSchema(new ArraySchema(StateProofTracking.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'transactions',
                valueSchema: new OptionalSchema(new ArraySchema(Transaction.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'txn-counter',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'upgrade-state',
                valueSchema: new OptionalSchema(BlockUpgradeState.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'upgrade-vote',
                valueSchema: new OptionalSchema(BlockUpgradeVote.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `Block` object.
     * @param genesisHash - (gh) hash to which this block belongs.
     * @param genesisId - (gen) ID to which this block belongs.
     * @param previousBlockHash - (prev) Previous block hash.
     * @param round - (rnd) Current round on which this block was appended to the chain.
     * @param seed - (seed) Sortition seed.
     * @param timestamp - (ts) Block creation timestamp in seconds since eposh
     * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the
     * block. More specifically, it's the root of a merkle tree whose leaves are the
     * block's Txids, in lexicographic order. For the empty block, it's 0. Note that
     * the TxnRoot does not authenticate the signatures on the transactions, only the
     * transactions themselves. Two blocks with the same transactions but in a
     * different order and with different signatures will have the same TxnRoot.
     * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a
     * vector commitment instead of a merkle tree, and SHA256 hash function instead of
     * the default SHA512_256. This commitment can be used on environments where only
     * the SHA256 function exists.
     * @param bonus - the potential bonus payout for this block.
     * @param feesCollected - the sum of all fees paid by transactions in this block.
     * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.
     * @param proposer - the proposer of this block.
     * @param proposerPayout - the actual amount transferred to the proposer from the fee sink.
     * @param rewards - Fields relating to rewards,
     * @param stateProofTracking - Tracks the status of state proofs.
     * @param transactions - (txns) list of transactions corresponding to a given round.
     * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from
     * the time at which support for this feature was introduced.
     * Specifically, TxnCounter is the number of the next transaction that will be
     * committed after this block. It is 0 when no transactions have ever been
     * committed (since TxnCounter started being supported).
     * @param upgradeState - Fields relating to a protocol upgrade.
     * @param upgradeVote - Fields relating to voting for a protocol upgrade.
     */
    constructor({ genesisHash, genesisId, previousBlockHash, round, seed, timestamp, transactionsRoot, transactionsRootSha256, bonus, feesCollected, participationUpdates, proposer, proposerPayout, rewards, stateProofTracking, transactions, txnCounter, upgradeState, upgradeVote, }) {
        this.genesisHash =
            typeof genesisHash === 'string'
                ? base64ToBytes(genesisHash)
                : genesisHash;
        this.genesisId = genesisId;
        this.previousBlockHash =
            typeof previousBlockHash === 'string'
                ? base64ToBytes(previousBlockHash)
                : previousBlockHash;
        this.round = ensureBigInt(round);
        this.seed = typeof seed === 'string' ? base64ToBytes(seed) : seed;
        this.timestamp = ensureSafeInteger(timestamp);
        this.transactionsRoot =
            typeof transactionsRoot === 'string'
                ? base64ToBytes(transactionsRoot)
                : transactionsRoot;
        this.transactionsRootSha256 =
            typeof transactionsRootSha256 === 'string'
                ? base64ToBytes(transactionsRootSha256)
                : transactionsRootSha256;
        this.bonus =
            typeof bonus === 'undefined' ? undefined : ensureSafeInteger(bonus);
        this.feesCollected =
            typeof feesCollected === 'undefined'
                ? undefined
                : ensureSafeInteger(feesCollected);
        this.participationUpdates = participationUpdates;
        this.proposer =
            typeof proposer === 'string' ? Address.fromString(proposer) : proposer;
        this.proposerPayout =
            typeof proposerPayout === 'undefined'
                ? undefined
                : ensureSafeInteger(proposerPayout);
        this.rewards = rewards;
        this.stateProofTracking = stateProofTracking;
        this.transactions = transactions;
        this.txnCounter =
            typeof txnCounter === 'undefined'
                ? undefined
                : ensureSafeInteger(txnCounter);
        this.upgradeState = upgradeState;
        this.upgradeVote = upgradeVote;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Block.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['genesis-hash', this.genesisHash],
            ['genesis-id', this.genesisId],
            ['previous-block-hash', this.previousBlockHash],
            ['round', this.round],
            ['seed', this.seed],
            ['timestamp', this.timestamp],
            ['transactions-root', this.transactionsRoot],
            ['transactions-root-sha256', this.transactionsRootSha256],
            ['bonus', this.bonus],
            ['fees-collected', this.feesCollected],
            [
                'participation-updates',
                typeof this.participationUpdates !== 'undefined'
                    ? this.participationUpdates.toEncodingData()
                    : undefined,
            ],
            [
                'proposer',
                typeof this.proposer !== 'undefined'
                    ? this.proposer.toString()
                    : undefined,
            ],
            ['proposer-payout', this.proposerPayout],
            [
                'rewards',
                typeof this.rewards !== 'undefined'
                    ? this.rewards.toEncodingData()
                    : undefined,
            ],
            [
                'state-proof-tracking',
                typeof this.stateProofTracking !== 'undefined'
                    ? this.stateProofTracking.map((v) => v.toEncodingData())
                    : undefined,
            ],
            [
                'transactions',
                typeof this.transactions !== 'undefined'
                    ? this.transactions.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['txn-counter', this.txnCounter],
            [
                'upgrade-state',
                typeof this.upgradeState !== 'undefined'
                    ? this.upgradeState.toEncodingData()
                    : undefined,
            ],
            [
                'upgrade-vote',
                typeof this.upgradeVote !== 'undefined'
                    ? this.upgradeVote.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Block: ${data}`);
        }
        return new Block({
            genesisHash: data.get('genesis-hash'),
            genesisId: data.get('genesis-id'),
            previousBlockHash: data.get('previous-block-hash'),
            round: data.get('round'),
            seed: data.get('seed'),
            timestamp: data.get('timestamp'),
            transactionsRoot: data.get('transactions-root'),
            transactionsRootSha256: data.get('transactions-root-sha256'),
            bonus: data.get('bonus'),
            feesCollected: data.get('fees-collected'),
            participationUpdates: typeof data.get('participation-updates') !== 'undefined'
                ? ParticipationUpdates.fromEncodingData(data.get('participation-updates'))
                : undefined,
            proposer: data.get('proposer'),
            proposerPayout: data.get('proposer-payout'),
            rewards: typeof data.get('rewards') !== 'undefined'
                ? BlockRewards.fromEncodingData(data.get('rewards'))
                : undefined,
            stateProofTracking: typeof data.get('state-proof-tracking') !== 'undefined'
                ? data
                    .get('state-proof-tracking')
                    .map((v) => StateProofTracking.fromEncodingData(v))
                : undefined,
            transactions: typeof data.get('transactions') !== 'undefined'
                ? data
                    .get('transactions')
                    .map((v) => Transaction.fromEncodingData(v))
                : undefined,
            txnCounter: data.get('txn-counter'),
            upgradeState: typeof data.get('upgrade-state') !== 'undefined'
                ? BlockUpgradeState.fromEncodingData(data.get('upgrade-state'))
                : undefined,
            upgradeVote: typeof data.get('upgrade-vote') !== 'undefined'
                ? BlockUpgradeVote.fromEncodingData(data.get('upgrade-vote'))
                : undefined,
        });
    }
}
/**
 *
 */
class BlockHeadersResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'blocks',
                valueSchema: new ArraySchema(Block.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'next-token',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BlockHeadersResponse` object.
     * @param blocks -
     * @param currentRound - Round at which the results were computed.
     * @param nextToken - Used for pagination, when making another request provide this token with the
     * next parameter.
     */
    constructor({ blocks, currentRound, nextToken, }) {
        this.blocks = blocks;
        this.currentRound = ensureBigInt(currentRound);
        this.nextToken = nextToken;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BlockHeadersResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['blocks', this.blocks.map((v) => v.toEncodingData())],
            ['current-round', this.currentRound],
            ['next-token', this.nextToken],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BlockHeadersResponse: ${data}`);
        }
        return new BlockHeadersResponse({
            blocks: (data.get('blocks') ?? []).map((v) => Block.fromEncodingData(v)),
            currentRound: data.get('current-round'),
            nextToken: data.get('next-token'),
        });
    }
}
/**
 * Fields relating to rewards,
 */
class BlockRewards {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'fee-sink', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'rewards-calculation-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'rewards-level',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'rewards-pool',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            }, {
                key: 'rewards-rate',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'rewards-residue',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BlockRewards` object.
     * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.
     * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate
     * MicroAlgos for every reward unit in the next round.
     * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit
     * of MicroAlgos since genesis.
     * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually
     * redistributes them as rewards.
     * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at
     * the next round.
     * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of
     * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.
     */
    constructor({ feeSink, rewardsCalculationRound, rewardsLevel, rewardsPool, rewardsRate, rewardsResidue, }) {
        this.feeSink = feeSink;
        this.rewardsCalculationRound = ensureBigInt(rewardsCalculationRound);
        this.rewardsLevel = ensureBigInt(rewardsLevel);
        this.rewardsPool = rewardsPool;
        this.rewardsRate = ensureBigInt(rewardsRate);
        this.rewardsResidue = ensureBigInt(rewardsResidue);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BlockRewards.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['fee-sink', this.feeSink],
            ['rewards-calculation-round', this.rewardsCalculationRound],
            ['rewards-level', this.rewardsLevel],
            ['rewards-pool', this.rewardsPool],
            ['rewards-rate', this.rewardsRate],
            ['rewards-residue', this.rewardsResidue],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BlockRewards: ${data}`);
        }
        return new BlockRewards({
            feeSink: data.get('fee-sink'),
            rewardsCalculationRound: data.get('rewards-calculation-round'),
            rewardsLevel: data.get('rewards-level'),
            rewardsPool: data.get('rewards-pool'),
            rewardsRate: data.get('rewards-rate'),
            rewardsResidue: data.get('rewards-residue'),
        });
    }
}
/**
 * Fields relating to a protocol upgrade.
 */
class BlockUpgradeState {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'current-protocol',
                valueSchema: new StringSchema(),
                omitEmpty: true,
            }, {
                key: 'next-protocol',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'next-protocol-approvals',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'next-protocol-switch-on',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'next-protocol-vote-before',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BlockUpgradeState` object.
     * @param currentProtocol - (proto) The current protocol version.
     * @param nextProtocol - (nextproto) The next proposed protocol version.
     * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.
     * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.
     * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider
     * after this round).
     */
    constructor({ currentProtocol, nextProtocol, nextProtocolApprovals, nextProtocolSwitchOn, nextProtocolVoteBefore, }) {
        this.currentProtocol = currentProtocol;
        this.nextProtocol = nextProtocol;
        this.nextProtocolApprovals =
            typeof nextProtocolApprovals === 'undefined'
                ? undefined
                : ensureSafeInteger(nextProtocolApprovals);
        this.nextProtocolSwitchOn =
            typeof nextProtocolSwitchOn === 'undefined'
                ? undefined
                : ensureBigInt(nextProtocolSwitchOn);
        this.nextProtocolVoteBefore =
            typeof nextProtocolVoteBefore === 'undefined'
                ? undefined
                : ensureBigInt(nextProtocolVoteBefore);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BlockUpgradeState.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['current-protocol', this.currentProtocol],
            ['next-protocol', this.nextProtocol],
            ['next-protocol-approvals', this.nextProtocolApprovals],
            ['next-protocol-switch-on', this.nextProtocolSwitchOn],
            ['next-protocol-vote-before', this.nextProtocolVoteBefore],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BlockUpgradeState: ${data}`);
        }
        return new BlockUpgradeState({
            currentProtocol: data.get('current-protocol'),
            nextProtocol: data.get('next-protocol'),
            nextProtocolApprovals: data.get('next-protocol-approvals'),
            nextProtocolSwitchOn: data.get('next-protocol-switch-on'),
            nextProtocolVoteBefore: data.get('next-protocol-vote-before'),
        });
    }
}
/**
 * Fields relating to voting for a protocol upgrade.
 */
class BlockUpgradeVote {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'upgrade-approve',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'upgrade-delay',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'upgrade-propose',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BlockUpgradeVote` object.
     * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.
     * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.
     * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.
     */
    constructor({ upgradeApprove, upgradeDelay, upgradePropose, }) {
        this.upgradeApprove = upgradeApprove;
        this.upgradeDelay =
            typeof upgradeDelay === 'undefined'
                ? undefined
                : ensureBigInt(upgradeDelay);
        this.upgradePropose = upgradePropose;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BlockUpgradeVote.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['upgrade-approve', this.upgradeApprove],
            ['upgrade-delay', this.upgradeDelay],
            ['upgrade-propose', this.upgradePropose],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BlockUpgradeVote: ${data}`);
        }
        return new BlockUpgradeVote({
            upgradeApprove: data.get('upgrade-approve'),
            upgradeDelay: data.get('upgrade-delay'),
            upgradePropose: data.get('upgrade-propose'),
        });
    }
}
/**
 * Box name and its content.
 */
class Box {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'name', valueSchema: new ByteArraySchema(), omitEmpty: true }, { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'value', valueSchema: new ByteArraySchema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `Box` object.
     * @param name - (name) box name, base64 encoded
     * @param round - The round for which this information is relevant
     * @param value - (value) box value, base64 encoded.
     */
    constructor({ name, round, value, }) {
        this.name = typeof name === 'string' ? base64ToBytes(name) : name;
        this.round = ensureBigInt(round);
        this.value = typeof value === 'string' ? base64ToBytes(value) : value;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Box.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['name', this.name],
            ['round', this.round],
            ['value', this.value],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Box: ${data}`);
        }
        return new Box({
            name: data.get('name'),
            round: data.get('round'),
            value: data.get('value'),
        });
    }
}
/**
 * Box descriptor describes an app box without a value.
 */
class BoxDescriptor {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'name',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BoxDescriptor` object.
     * @param name - Base64 encoded box name
     */
    constructor({ name }) {
        this.name = typeof name === 'string' ? base64ToBytes(name) : name;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BoxDescriptor.encodingSchema;
    }
    toEncodingData() {
        return new Map([['name', this.name]]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BoxDescriptor: ${data}`);
        }
        return new BoxDescriptor({
            name: data.get('name'),
        });
    }
}
/**
 * Box names of an application
 */
class BoxesResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'application-id',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'boxes',
                valueSchema: new ArraySchema(BoxDescriptor.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'next-token',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `BoxesResponse` object.
     * @param applicationId - (appidx) application index.
     * @param boxes -
     * @param nextToken - Used for pagination, when making another request provide this token with the
     * next parameter.
     */
    constructor({ applicationId, boxes, nextToken, }) {
        this.applicationId = ensureBigInt(applicationId);
        this.boxes = boxes;
        this.nextToken = nextToken;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return BoxesResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['application-id', this.applicationId],
            ['boxes', this.boxes.map((v) => v.toEncodingData())],
            ['next-token', this.nextToken],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded BoxesResponse: ${data}`);
        }
        return new BoxesResponse({
            applicationId: data.get('application-id'),
            boxes: (data.get('boxes') ?? []).map((v) => BoxDescriptor.fromEncodingData(v)),
            nextToken: data.get('next-token'),
        });
    }
}
/**
 * Response for errors
 */
class ErrorResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'message', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'data',
                valueSchema: new OptionalSchema(UntypedValue.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ErrorResponse` object.
     * @param message -
     * @param data -
     */
    constructor({ message, data }) {
        this.message = message;
        this.data = data;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ErrorResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['message', this.message],
            [
                'data',
                typeof this.data !== 'undefined'
                    ? this.data.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ErrorResponse: ${data}`);
        }
        return new ErrorResponse({
            message: data.get('message'),
            data: typeof data.get('data') !== 'undefined'
                ? UntypedValue.fromEncodingData(data.get('data'))
                : undefined,
        });
    }
}
/**
 * Represents a TEAL value delta.
 */
class EvalDelta {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'action', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'bytes',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'uint',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `EvalDelta` object.
     * @param action - (at) delta action.
     * @param bytes - (bs) bytes value.
     * @param uint - (ui) uint value.
     */
    constructor({ action, bytes, uint, }) {
        this.action = ensureSafeInteger(action);
        this.bytes = bytes;
        this.uint = typeof uint === 'undefined' ? undefined : ensureBigInt(uint);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return EvalDelta.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['action', this.action],
            ['bytes', this.bytes],
            ['uint', this.uint],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded EvalDelta: ${data}`);
        }
        return new EvalDelta({
            action: data.get('action'),
            bytes: data.get('bytes'),
            uint: data.get('uint'),
        });
    }
}
/**
 * Key-value pairs for StateDelta.
 */
class EvalDeltaKeyValue {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'key', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'value', valueSchema: EvalDelta.encodingSchema, omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `EvalDeltaKeyValue` object.
     * @param key -
     * @param value - Represents a TEAL value delta.
     */
    constructor({ key, value }) {
        this.key = key;
        this.value = value;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return EvalDeltaKeyValue.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['key', this.key],
            ['value', this.value.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded EvalDeltaKeyValue: ${data}`);
        }
        return new EvalDeltaKeyValue({
            key: data.get('key'),
            value: EvalDelta.fromEncodingData(data.get('value') ?? new Map()),
        });
    }
}
class HashFactory {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'hash-type',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `HashFactory` object.
     * @param hashType - (t)
     */
    constructor({ hashType }) {
        this.hashType =
            typeof hashType === 'undefined' ? undefined : ensureSafeInteger(hashType);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return HashFactory.encodingSchema;
    }
    toEncodingData() {
        return new Map([['hash-type', this.hashType]]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded HashFactory: ${data}`);
        }
        return new HashFactory({
            hashType: data.get('hash-type'),
        });
    }
}
/**
 * (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing
 * it is online.
 */
class HbProofFields {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'hb-pk',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'hb-pk1sig',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'hb-pk2',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'hb-pk2sig',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'hb-sig',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `HbProofFields` object.
     * @param hbPk - (p) Public key of the heartbeat message.
     * @param hbPk1sig - (p1s) Signature of OneTimeSignatureSubkeyOffsetID(PK, Batch, Offset) under the
     * key PK2.
     * @param hbPk2 - (p2) Key for new-style two-level ephemeral signature.
     * @param hbPk2sig - (p2s) Signature of OneTimeSignatureSubkeyBatchID(PK2, Batch) under the master
     * key (OneTimeSignatureVerifier).
     * @param hbSig - (s) Signature of the heartbeat message.
     */
    constructor({ hbPk, hbPk1sig, hbPk2, hbPk2sig, hbSig, }) {
        this.hbPk = typeof hbPk === 'string' ? base64ToBytes(hbPk) : hbPk;
        this.hbPk1sig =
            typeof hbPk1sig === 'string' ? base64ToBytes(hbPk1sig) : hbPk1sig;
        this.hbPk2 = typeof hbPk2 === 'string' ? base64ToBytes(hbPk2) : hbPk2;
        this.hbPk2sig =
            typeof hbPk2sig === 'string' ? base64ToBytes(hbPk2sig) : hbPk2sig;
        this.hbSig = typeof hbSig === 'string' ? base64ToBytes(hbSig) : hbSig;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return HbProofFields.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['hb-pk', this.hbPk],
            ['hb-pk1sig', this.hbPk1sig],
            ['hb-pk2', this.hbPk2],
            ['hb-pk2sig', this.hbPk2sig],
            ['hb-sig', this.hbSig],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded HbProofFields: ${data}`);
        }
        return new HbProofFields({
            hbPk: data.get('hb-pk'),
            hbPk1sig: data.get('hb-pk1sig'),
            hbPk2: data.get('hb-pk2'),
            hbPk2sig: data.get('hb-pk2sig'),
            hbSig: data.get('hb-sig'),
        });
    }
}
/**
 * A health check response.
 */
class HealthCheck {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'db-available',
                valueSchema: new BooleanSchema(),
                omitEmpty: true,
            }, {
                key: 'is-migrating',
                valueSchema: new BooleanSchema(),
                omitEmpty: true,
            }, { key: 'message', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'round', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'version', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'data',
                valueSchema: new OptionalSchema(UntypedValue.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'errors',
                valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `HealthCheck` object.
     * @param dbAvailable -
     * @param isMigrating -
     * @param message -
     * @param round -
     * @param version - Current version.
     * @param data -
     * @param errors -
     */
    constructor({ dbAvailable, isMigrating, message, round, version, data, errors, }) {
        this.dbAvailable = dbAvailable;
        this.isMigrating = isMigrating;
        this.message = message;
        this.round = ensureBigInt(round);
        this.version = version;
        this.data = data;
        this.errors = errors;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return HealthCheck.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['db-available', this.dbAvailable],
            ['is-migrating', this.isMigrating],
            ['message', this.message],
            ['round', this.round],
            ['version', this.version],
            [
                'data',
                typeof this.data !== 'undefined'
                    ? this.data.toEncodingData()
                    : undefined,
            ],
            ['errors', this.errors],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded HealthCheck: ${data}`);
        }
        return new HealthCheck({
            dbAvailable: data.get('db-available'),
            isMigrating: data.get('is-migrating'),
            message: data.get('message'),
            round: data.get('round'),
            version: data.get('version'),
            data: typeof data.get('data') !== 'undefined'
                ? UntypedValue.fromEncodingData(data.get('data'))
                : undefined,
            errors: data.get('errors'),
        });
    }
}
class IndexerStateProofMessage {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'block-headers-commitment',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'first-attested-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'latest-attested-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'ln-proven-weight',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'voters-commitment',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `IndexerStateProofMessage` object.
     * @param blockHeadersCommitment - (b)
     * @param firstAttestedRound - (f)
     * @param latestAttestedRound - (l)
     * @param lnProvenWeight - (P)
     * @param votersCommitment - (v)
     */
    constructor({ blockHeadersCommitment, firstAttestedRound, latestAttestedRound, lnProvenWeight, votersCommitment, }) {
        this.blockHeadersCommitment =
            typeof blockHeadersCommitment === 'string'
                ? base64ToBytes(blockHeadersCommitment)
                : blockHeadersCommitment;
        this.firstAttestedRound =
            typeof firstAttestedRound === 'undefined'
                ? undefined
                : ensureBigInt(firstAttestedRound);
        this.latestAttestedRound =
            typeof latestAttestedRound === 'undefined'
                ? undefined
                : ensureBigInt(latestAttestedRound);
        this.lnProvenWeight =
            typeof lnProvenWeight === 'undefined'
                ? undefined
                : ensureBigInt(lnProvenWeight);
        this.votersCommitment =
            typeof votersCommitment === 'string'
                ? base64ToBytes(votersCommitment)
                : votersCommitment;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return IndexerStateProofMessage.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['block-headers-commitment', this.blockHeadersCommitment],
            ['first-attested-round', this.firstAttestedRound],
            ['latest-attested-round', this.latestAttestedRound],
            ['ln-proven-weight', this.lnProvenWeight],
            ['voters-commitment', this.votersCommitment],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded IndexerStateProofMessage: ${data}`);
        }
        return new IndexerStateProofMessage({
            blockHeadersCommitment: data.get('block-headers-commitment'),
            firstAttestedRound: data.get('first-attested-round'),
            latestAttestedRound: data.get('latest-attested-round'),
            lnProvenWeight: data.get('ln-proven-weight'),
            votersCommitment: data.get('voters-commitment'),
        });
    }
}
class MerkleArrayProof {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'hash-factory',
                valueSchema: new OptionalSchema(HashFactory.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'path',
                valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),
                omitEmpty: true,
            }, {
                key: 'tree-depth',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `MerkleArrayProof` object.
     * @param hashFactory -
     * @param path - (pth)
     * @param treeDepth - (td)
     */
    constructor({ hashFactory, path, treeDepth, }) {
        this.hashFactory = hashFactory;
        this.path = path;
        this.treeDepth =
            typeof treeDepth === 'undefined'
                ? undefined
                : ensureSafeInteger(treeDepth);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return MerkleArrayProof.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'hash-factory',
                typeof this.hashFactory !== 'undefined'
                    ? this.hashFactory.toEncodingData()
                    : undefined,
            ],
            ['path', this.path],
            ['tree-depth', this.treeDepth],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded MerkleArrayProof: ${data}`);
        }
        return new MerkleArrayProof({
            hashFactory: typeof data.get('hash-factory') !== 'undefined'
                ? HashFactory.fromEncodingData(data.get('hash-factory'))
                : undefined,
            path: data.get('path'),
            treeDepth: data.get('tree-depth'),
        });
    }
}
/**
 * A simplified version of AssetHolding
 */
class MiniAssetHolding {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'address', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'is-frozen', valueSchema: new BooleanSchema(), omitEmpty: true }, {
                key: 'deleted',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'opted-in-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'opted-out-at-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `MiniAssetHolding` object.
     * @param address -
     * @param amount -
     * @param isFrozen -
     * @param deleted - Whether or not this asset holding is currently deleted from its account.
     * @param optedInAtRound - Round during which the account opted into the asset.
     * @param optedOutAtRound - Round during which the account opted out of the asset.
     */
    constructor({ address, amount, isFrozen, deleted, optedInAtRound, optedOutAtRound, }) {
        this.address = address;
        this.amount = ensureBigInt(amount);
        this.isFrozen = isFrozen;
        this.deleted = deleted;
        this.optedInAtRound =
            typeof optedInAtRound === 'undefined'
                ? undefined
                : ensureBigInt(optedInAtRound);
        this.optedOutAtRound =
            typeof optedOutAtRound === 'undefined'
                ? undefined
                : ensureBigInt(optedOutAtRound);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return MiniAssetHolding.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['address', this.address],
            ['amount', this.amount],
            ['is-frozen', this.isFrozen],
            ['deleted', this.deleted],
            ['opted-in-at-round', this.optedInAtRound],
            ['opted-out-at-round', this.optedOutAtRound],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded MiniAssetHolding: ${data}`);
        }
        return new MiniAssetHolding({
            address: data.get('address'),
            amount: data.get('amount'),
            isFrozen: data.get('is-frozen'),
            deleted: data.get('deleted'),
            optedInAtRound: data.get('opted-in-at-round'),
            optedOutAtRound: data.get('opted-out-at-round'),
        });
    }
}
/**
 * Participation account data that needs to be checked/acted on by the network.
 */
class ParticipationUpdates {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'absent-participation-accounts',
                valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),
                omitEmpty: true,
            }, {
                key: 'expired-participation-accounts',
                valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `ParticipationUpdates` object.
     * @param absentParticipationAccounts - (partupabs) a list of online accounts that need to be suspended.
     * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline
     * since their participation key expired.
     */
    constructor({ absentParticipationAccounts, expiredParticipationAccounts, }) {
        this.absentParticipationAccounts = absentParticipationAccounts;
        this.expiredParticipationAccounts = expiredParticipationAccounts;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return ParticipationUpdates.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['absent-participation-accounts', this.absentParticipationAccounts],
            ['expired-participation-accounts', this.expiredParticipationAccounts],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded ParticipationUpdates: ${data}`);
        }
        return new ParticipationUpdates({
            absentParticipationAccounts: data.get('absent-participation-accounts'),
            expiredParticipationAccounts: data.get('expired-participation-accounts'),
        });
    }
}
/**
 * (sp) represents a state proof.
 * Definition:
 * crypto/stateproof/structs.go : StateProof
 */
class StateProofFields {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'part-proofs',
                valueSchema: new OptionalSchema(MerkleArrayProof.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'positions-to-reveal',
                valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),
                omitEmpty: true,
            }, {
                key: 'reveals',
                valueSchema: new OptionalSchema(new ArraySchema(StateProofReveal.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'salt-version',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'sig-commit',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'sig-proofs',
                valueSchema: new OptionalSchema(MerkleArrayProof.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'signed-weight',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `StateProofFields` object.
     * @param partProofs - (P)
     * @param positionsToReveal - (pr) Sequence of reveal positions.
     * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual
     * msgp
     * @param saltVersion - (v) Salt version of the merkle signature.
     * @param sigCommit - (c)
     * @param sigProofs - (S)
     * @param signedWeight - (w)
     */
    constructor({ partProofs, positionsToReveal, reveals, saltVersion, sigCommit, sigProofs, signedWeight, }) {
        this.partProofs = partProofs;
        this.positionsToReveal =
            typeof positionsToReveal === 'undefined'
                ? undefined
                : positionsToReveal.map(ensureBigInt);
        this.reveals = reveals;
        this.saltVersion =
            typeof saltVersion === 'undefined'
                ? undefined
                : ensureSafeInteger(saltVersion);
        this.sigCommit =
            typeof sigCommit === 'string' ? base64ToBytes(sigCommit) : sigCommit;
        this.sigProofs = sigProofs;
        this.signedWeight =
            typeof signedWeight === 'undefined'
                ? undefined
                : ensureBigInt(signedWeight);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProofFields.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'part-proofs',
                typeof this.partProofs !== 'undefined'
                    ? this.partProofs.toEncodingData()
                    : undefined,
            ],
            ['positions-to-reveal', this.positionsToReveal],
            [
                'reveals',
                typeof this.reveals !== 'undefined'
                    ? this.reveals.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['salt-version', this.saltVersion],
            ['sig-commit', this.sigCommit],
            [
                'sig-proofs',
                typeof this.sigProofs !== 'undefined'
                    ? this.sigProofs.toEncodingData()
                    : undefined,
            ],
            ['signed-weight', this.signedWeight],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProofFields: ${data}`);
        }
        return new StateProofFields({
            partProofs: typeof data.get('part-proofs') !== 'undefined'
                ? MerkleArrayProof.fromEncodingData(data.get('part-proofs'))
                : undefined,
            positionsToReveal: data.get('positions-to-reveal'),
            reveals: typeof data.get('reveals') !== 'undefined'
                ? data
                    .get('reveals')
                    .map((v) => StateProofReveal.fromEncodingData(v))
                : undefined,
            saltVersion: data.get('salt-version'),
            sigCommit: data.get('sig-commit'),
            sigProofs: typeof data.get('sig-proofs') !== 'undefined'
                ? MerkleArrayProof.fromEncodingData(data.get('sig-proofs'))
                : undefined,
            signedWeight: data.get('signed-weight'),
        });
    }
}
class StateProofParticipant {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'verifier',
                valueSchema: new OptionalSchema(StateProofVerifier.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'weight',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `StateProofParticipant` object.
     * @param verifier - (p)
     * @param weight - (w)
     */
    constructor({ verifier, weight, }) {
        this.verifier = verifier;
        this.weight =
            typeof weight === 'undefined' ? undefined : ensureBigInt(weight);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProofParticipant.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'verifier',
                typeof this.verifier !== 'undefined'
                    ? this.verifier.toEncodingData()
                    : undefined,
            ],
            ['weight', this.weight],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProofParticipant: ${data}`);
        }
        return new StateProofParticipant({
            verifier: typeof data.get('verifier') !== 'undefined'
                ? StateProofVerifier.fromEncodingData(data.get('verifier'))
                : undefined,
            weight: data.get('weight'),
        });
    }
}
class StateProofReveal {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'participant',
                valueSchema: new OptionalSchema(StateProofParticipant.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'position',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'sig-slot',
                valueSchema: new OptionalSchema(StateProofSigSlot.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `StateProofReveal` object.
     * @param participant - (p)
     * @param position - The position in the signature and participants arrays corresponding to this
     * entry.
     * @param sigSlot - (s)
     */
    constructor({ participant, position, sigSlot, }) {
        this.participant = participant;
        this.position =
            typeof position === 'undefined' ? undefined : ensureBigInt(position);
        this.sigSlot = sigSlot;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProofReveal.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'participant',
                typeof this.participant !== 'undefined'
                    ? this.participant.toEncodingData()
                    : undefined,
            ],
            ['position', this.position],
            [
                'sig-slot',
                typeof this.sigSlot !== 'undefined'
                    ? this.sigSlot.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProofReveal: ${data}`);
        }
        return new StateProofReveal({
            participant: typeof data.get('participant') !== 'undefined'
                ? StateProofParticipant.fromEncodingData(data.get('participant'))
                : undefined,
            position: data.get('position'),
            sigSlot: typeof data.get('sig-slot') !== 'undefined'
                ? StateProofSigSlot.fromEncodingData(data.get('sig-slot'))
                : undefined,
        });
    }
}
class StateProofSigSlot {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'lower-sig-weight',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'signature',
                valueSchema: new OptionalSchema(StateProofSignature.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `StateProofSigSlot` object.
     * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.
     * @param signature -
     */
    constructor({ lowerSigWeight, signature, }) {
        this.lowerSigWeight =
            typeof lowerSigWeight === 'undefined'
                ? undefined
                : ensureBigInt(lowerSigWeight);
        this.signature = signature;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProofSigSlot.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['lower-sig-weight', this.lowerSigWeight],
            [
                'signature',
                typeof this.signature !== 'undefined'
                    ? this.signature.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProofSigSlot: ${data}`);
        }
        return new StateProofSigSlot({
            lowerSigWeight: data.get('lower-sig-weight'),
            signature: typeof data.get('signature') !== 'undefined'
                ? StateProofSignature.fromEncodingData(data.get('signature'))
                : undefined,
        });
    }
}
class StateProofSignature {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'falcon-signature',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'merkle-array-index',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'proof',
                valueSchema: new OptionalSchema(MerkleArrayProof.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'verifying-key',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `StateProofSignature` object.
     * @param falconSignature -
     * @param merkleArrayIndex -
     * @param proof -
     * @param verifyingKey - (vkey)
     */
    constructor({ falconSignature, merkleArrayIndex, proof, verifyingKey, }) {
        this.falconSignature =
            typeof falconSignature === 'string'
                ? base64ToBytes(falconSignature)
                : falconSignature;
        this.merkleArrayIndex =
            typeof merkleArrayIndex === 'undefined'
                ? undefined
                : ensureSafeInteger(merkleArrayIndex);
        this.proof = proof;
        this.verifyingKey =
            typeof verifyingKey === 'string'
                ? base64ToBytes(verifyingKey)
                : verifyingKey;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProofSignature.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['falcon-signature', this.falconSignature],
            ['merkle-array-index', this.merkleArrayIndex],
            [
                'proof',
                typeof this.proof !== 'undefined'
                    ? this.proof.toEncodingData()
                    : undefined,
            ],
            ['verifying-key', this.verifyingKey],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProofSignature: ${data}`);
        }
        return new StateProofSignature({
            falconSignature: data.get('falcon-signature'),
            merkleArrayIndex: data.get('merkle-array-index'),
            proof: typeof data.get('proof') !== 'undefined'
                ? MerkleArrayProof.fromEncodingData(data.get('proof'))
                : undefined,
            verifyingKey: data.get('verifying-key'),
        });
    }
}
class StateProofTracking {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'next-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'online-total-weight',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'type',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'voters-commitment',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `StateProofTracking` object.
     * @param nextRound - (n) Next round for which we will accept a state proof transaction.
     * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the
     * StateProof round.
     * @param type - State Proof Type. Note the raw object uses map with this as key.
     * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign
     * the proof.
     */
    constructor({ nextRound, onlineTotalWeight, type, votersCommitment, }) {
        this.nextRound =
            typeof nextRound === 'undefined' ? undefined : ensureBigInt(nextRound);
        this.onlineTotalWeight =
            typeof onlineTotalWeight === 'undefined'
                ? undefined
                : ensureBigInt(onlineTotalWeight);
        this.type =
            typeof type === 'undefined' ? undefined : ensureSafeInteger(type);
        this.votersCommitment =
            typeof votersCommitment === 'string'
                ? base64ToBytes(votersCommitment)
                : votersCommitment;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProofTracking.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['next-round', this.nextRound],
            ['online-total-weight', this.onlineTotalWeight],
            ['type', this.type],
            ['voters-commitment', this.votersCommitment],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProofTracking: ${data}`);
        }
        return new StateProofTracking({
            nextRound: data.get('next-round'),
            onlineTotalWeight: data.get('online-total-weight'),
            type: data.get('type'),
            votersCommitment: data.get('voters-commitment'),
        });
    }
}
class StateProofVerifier {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'commitment',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'key-lifetime',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `StateProofVerifier` object.
     * @param commitment - (cmt) Represents the root of the vector commitment tree.
     * @param keyLifetime - (lf) Key lifetime.
     */
    constructor({ commitment, keyLifetime, }) {
        this.commitment =
            typeof commitment === 'string' ? base64ToBytes(commitment) : commitment;
        this.keyLifetime =
            typeof keyLifetime === 'undefined'
                ? undefined
                : ensureBigInt(keyLifetime);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateProofVerifier.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['commitment', this.commitment],
            ['key-lifetime', this.keyLifetime],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateProofVerifier: ${data}`);
        }
        return new StateProofVerifier({
            commitment: data.get('commitment'),
            keyLifetime: data.get('key-lifetime'),
        });
    }
}
/**
 * Represents a (apls) local-state or (apgs) global-state schema. These schemas
 * determine how much storage may be used in a local-state or global-state for an
 * application. The more space used, the larger minimum balance must be maintained
 * in the account holding the data.
 */
class StateSchema {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'num-byte-slice',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, { key: 'num-uint', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `StateSchema` object.
     * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.
     * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.
     */
    constructor({ numByteSlice, numUint, }) {
        this.numByteSlice = ensureSafeInteger(numByteSlice);
        this.numUint = ensureSafeInteger(numUint);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return StateSchema.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['num-byte-slice', this.numByteSlice],
            ['num-uint', this.numUint],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded StateSchema: ${data}`);
        }
        return new StateSchema({
            numByteSlice: data.get('num-byte-slice'),
            numUint: data.get('num-uint'),
        });
    }
}
/**
 * Represents a key-value pair in an application store.
 */
class TealKeyValue {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'key', valueSchema: new ByteArraySchema(), omitEmpty: true }, { key: 'value', valueSchema: TealValue.encodingSchema, omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TealKeyValue` object.
     * @param key -
     * @param value - Represents a TEAL value.
     */
    constructor({ key, value }) {
        this.key = typeof key === 'string' ? base64ToBytes(key) : key;
        this.value = value;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TealKeyValue.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['key', this.key],
            ['value', this.value.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TealKeyValue: ${data}`);
        }
        return new TealKeyValue({
            key: data.get('key'),
            value: TealValue.fromEncodingData(data.get('value') ?? new Map()),
        });
    }
}
/**
 * Represents a TEAL value.
 */
class TealValue {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'bytes', valueSchema: new ByteArraySchema(), omitEmpty: true }, { key: 'type', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'uint', valueSchema: new Uint64Schema(), omitEmpty: true });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TealValue` object.
     * @param bytes - bytes value.
     * @param type - type of the value. Value `1` refers to **bytes**, value `2` refers to **uint**
     * @param uint - uint value.
     */
    constructor({ bytes, type, uint, }) {
        this.bytes = typeof bytes === 'string' ? base64ToBytes(bytes) : bytes;
        this.type = ensureSafeInteger(type);
        this.uint = ensureBigInt(uint);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TealValue.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['bytes', this.bytes],
            ['type', this.type],
            ['uint', this.uint],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TealValue: ${data}`);
        }
        return new TealValue({
            bytes: data.get('bytes'),
            type: data.get('type'),
            uint: data.get('uint'),
        });
    }
}
/**
 * Contains all fields common to all transactions and serves as an envelope to all
 * transactions type. Represents both regular and inner transactions.
 * Definition:
 * data/transactions/signedtxn.go : SignedTxn
 * data/transactions/transaction.go : Transaction
 */
class Transaction {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'fee', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'first-valid',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, { key: 'last-valid', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'sender', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'application-transaction',
                valueSchema: new OptionalSchema(TransactionApplication.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'asset-config-transaction',
                valueSchema: new OptionalSchema(TransactionAssetConfig.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'asset-freeze-transaction',
                valueSchema: new OptionalSchema(TransactionAssetFreeze.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'asset-transfer-transaction',
                valueSchema: new OptionalSchema(TransactionAssetTransfer.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'auth-addr',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'close-rewards',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'closing-amount',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'confirmed-round',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'created-application-index',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'created-asset-index',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'genesis-hash',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'genesis-id',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'global-state-delta',
                valueSchema: new OptionalSchema(new ArraySchema(EvalDeltaKeyValue.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'group',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'heartbeat-transaction',
                valueSchema: new OptionalSchema(TransactionHeartbeat.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'id',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'inner-txns',
                valueSchema: new OptionalSchema(new ArraySchema(Transaction.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'intra-round-offset',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'keyreg-transaction',
                valueSchema: new OptionalSchema(TransactionKeyreg.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'lease',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'local-state-delta',
                valueSchema: new OptionalSchema(new ArraySchema(AccountStateDelta.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'logs',
                valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),
                omitEmpty: true,
            }, {
                key: 'note',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'payment-transaction',
                valueSchema: new OptionalSchema(TransactionPayment.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'receiver-rewards',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'rekey-to',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'round-time',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'sender-rewards',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'signature',
                valueSchema: new OptionalSchema(TransactionSignature.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'state-proof-transaction',
                valueSchema: new OptionalSchema(TransactionStateProof.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'tx-type',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `Transaction` object.
     * @param fee - (fee) Transaction fee.
     * @param firstValid - (fv) First valid round for this transaction.
     * @param lastValid - (lv) Last valid round for this transaction.
     * @param sender - (snd) Sender's address.
     * @param applicationTransaction - Fields for application transactions.
     * Definition:
     * data/transactions/application.go : ApplicationCallTxnFields
     * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.
     * A zero value for asset-id indicates asset creation.
     * A zero value for the params indicates asset destruction.
     * Definition:
     * data/transactions/asset.go : AssetConfigTxnFields
     * @param assetFreezeTransaction - Fields for an asset freeze transaction.
     * Definition:
     * data/transactions/asset.go : AssetFreezeTxnFields
     * @param assetTransferTransaction - Fields for an asset transfer transaction.
     * Definition:
     * data/transactions/asset.go : AssetTransferTxnFields
     * @param authAddr - (sgnr) this is included with signed transactions when the signing address does
     * not equal the sender. The backend can use this to ensure that auth addr is equal
     * to the accounts auth addr.
     * @param closeRewards - (rc) rewards applied to close-remainder-to account.
     * @param closingAmount - (ca) closing amount for transaction.
     * @param confirmedRound - Round when the transaction was confirmed.
     * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this
     * transaction.
     * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.
     * @param genesisHash - (gh) Hash of genesis block.
     * @param genesisId - (gen) genesis block ID.
     * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this
     * transaction.
     * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates
     * that this transaction is part of a transaction group and the value is the
     * sha512/256 hash of the transactions in that group.
     * @param heartbeatTransaction - Fields for a heartbeat transaction.
     * Definition:
     * data/transactions/heartbeat.go : HeartbeatTxnFields
     * @param id - Transaction ID
     * @param innerTxns - Inner transactions produced by application execution.
     * @param intraRoundOffset - Offset into the round where this transaction was confirmed.
     * @param keyregTransaction - Fields for a keyreg transaction.
     * Definition:
     * data/transactions/keyreg.go : KeyregTxnFields
     * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of
     * transactions. If this field is nonzero, then once the transaction is confirmed,
     * it acquires the lease identified by the (Sender, Lease) pair of the transaction
     * until the LastValid round passes. While this transaction possesses the lease, no
     * other transaction specifying this lease can be confirmed.
     * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this
     * transaction.
     * @param logs - (lg) Logs for the application being executed by this transaction.
     * @param note - (note) Free form data.
     * @param paymentTransaction - Fields for a payment transaction.
     * Definition:
     * data/transactions/payment.go : PaymentTxnFields
     * @param receiverRewards - (rr) rewards applied to receiver account.
     * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be
     * updated with this value and future signatures must be signed with the key
     * represented by this address.
     * @param roundTime - Time when the block this transaction is in was confirmed.
     * @param senderRewards - (rs) rewards applied to sender account.
     * @param signature - Validation signature associated with some data. Only one of the signatures
     * should be provided.
     * @param stateProofTransaction - Fields for a state proof transaction.
     * Definition:
     * data/transactions/stateproof.go : StateProofTxnFields
     * @param txType - (type) Indicates what type of transaction this is. Different types have
     * different fields.
     * Valid types, and where their fields are stored:
     * * (pay) payment-transaction
     * * (keyreg) keyreg-transaction
     * * (acfg) asset-config-transaction
     * * (axfer) asset-transfer-transaction
     * * (afrz) asset-freeze-transaction
     * * (appl) application-transaction
     * * (stpf) state-proof-transaction
     * * (hb) heartbeat-transaction
     */
    constructor({ fee, firstValid, lastValid, sender, applicationTransaction, assetConfigTransaction, assetFreezeTransaction, assetTransferTransaction, authAddr, closeRewards, closingAmount, confirmedRound, createdApplicationIndex, createdAssetIndex, genesisHash, genesisId, globalStateDelta, group, heartbeatTransaction, id, innerTxns, intraRoundOffset, keyregTransaction, lease, localStateDelta, logs, note, paymentTransaction, receiverRewards, rekeyTo, roundTime, senderRewards, signature, stateProofTransaction, txType, }) {
        this.fee = ensureBigInt(fee);
        this.firstValid = ensureBigInt(firstValid);
        this.lastValid = ensureBigInt(lastValid);
        this.sender = sender;
        this.applicationTransaction = applicationTransaction;
        this.assetConfigTransaction = assetConfigTransaction;
        this.assetFreezeTransaction = assetFreezeTransaction;
        this.assetTransferTransaction = assetTransferTransaction;
        this.authAddr =
            typeof authAddr === 'string' ? Address.fromString(authAddr) : authAddr;
        this.closeRewards =
            typeof closeRewards === 'undefined'
                ? undefined
                : ensureBigInt(closeRewards);
        this.closingAmount =
            typeof closingAmount === 'undefined'
                ? undefined
                : ensureBigInt(closingAmount);
        this.confirmedRound =
            typeof confirmedRound === 'undefined'
                ? undefined
                : ensureBigInt(confirmedRound);
        this.createdApplicationIndex =
            typeof createdApplicationIndex === 'undefined'
                ? undefined
                : ensureBigInt(createdApplicationIndex);
        this.createdAssetIndex =
            typeof createdAssetIndex === 'undefined'
                ? undefined
                : ensureBigInt(createdAssetIndex);
        this.genesisHash =
            typeof genesisHash === 'string'
                ? base64ToBytes(genesisHash)
                : genesisHash;
        this.genesisId = genesisId;
        this.globalStateDelta = globalStateDelta;
        this.group = typeof group === 'string' ? base64ToBytes(group) : group;
        this.heartbeatTransaction = heartbeatTransaction;
        this.id = id;
        this.innerTxns = innerTxns;
        this.intraRoundOffset =
            typeof intraRoundOffset === 'undefined'
                ? undefined
                : ensureSafeInteger(intraRoundOffset);
        this.keyregTransaction = keyregTransaction;
        this.lease = typeof lease === 'string' ? base64ToBytes(lease) : lease;
        this.localStateDelta = localStateDelta;
        this.logs = logs;
        this.note = typeof note === 'string' ? base64ToBytes(note) : note;
        this.paymentTransaction = paymentTransaction;
        this.receiverRewards =
            typeof receiverRewards === 'undefined'
                ? undefined
                : ensureBigInt(receiverRewards);
        this.rekeyTo =
            typeof rekeyTo === 'string' ? Address.fromString(rekeyTo) : rekeyTo;
        this.roundTime =
            typeof roundTime === 'undefined'
                ? undefined
                : ensureSafeInteger(roundTime);
        this.senderRewards =
            typeof senderRewards === 'undefined'
                ? undefined
                : ensureBigInt(senderRewards);
        this.signature = signature;
        this.stateProofTransaction = stateProofTransaction;
        this.txType = txType;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return Transaction.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['fee', this.fee],
            ['first-valid', this.firstValid],
            ['last-valid', this.lastValid],
            ['sender', this.sender],
            [
                'application-transaction',
                typeof this.applicationTransaction !== 'undefined'
                    ? this.applicationTransaction.toEncodingData()
                    : undefined,
            ],
            [
                'asset-config-transaction',
                typeof this.assetConfigTransaction !== 'undefined'
                    ? this.assetConfigTransaction.toEncodingData()
                    : undefined,
            ],
            [
                'asset-freeze-transaction',
                typeof this.assetFreezeTransaction !== 'undefined'
                    ? this.assetFreezeTransaction.toEncodingData()
                    : undefined,
            ],
            [
                'asset-transfer-transaction',
                typeof this.assetTransferTransaction !== 'undefined'
                    ? this.assetTransferTransaction.toEncodingData()
                    : undefined,
            ],
            [
                'auth-addr',
                typeof this.authAddr !== 'undefined'
                    ? this.authAddr.toString()
                    : undefined,
            ],
            ['close-rewards', this.closeRewards],
            ['closing-amount', this.closingAmount],
            ['confirmed-round', this.confirmedRound],
            ['created-application-index', this.createdApplicationIndex],
            ['created-asset-index', this.createdAssetIndex],
            ['genesis-hash', this.genesisHash],
            ['genesis-id', this.genesisId],
            [
                'global-state-delta',
                typeof this.globalStateDelta !== 'undefined'
                    ? this.globalStateDelta.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['group', this.group],
            [
                'heartbeat-transaction',
                typeof this.heartbeatTransaction !== 'undefined'
                    ? this.heartbeatTransaction.toEncodingData()
                    : undefined,
            ],
            ['id', this.id],
            [
                'inner-txns',
                typeof this.innerTxns !== 'undefined'
                    ? this.innerTxns.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['intra-round-offset', this.intraRoundOffset],
            [
                'keyreg-transaction',
                typeof this.keyregTransaction !== 'undefined'
                    ? this.keyregTransaction.toEncodingData()
                    : undefined,
            ],
            ['lease', this.lease],
            [
                'local-state-delta',
                typeof this.localStateDelta !== 'undefined'
                    ? this.localStateDelta.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['logs', this.logs],
            ['note', this.note],
            [
                'payment-transaction',
                typeof this.paymentTransaction !== 'undefined'
                    ? this.paymentTransaction.toEncodingData()
                    : undefined,
            ],
            ['receiver-rewards', this.receiverRewards],
            [
                'rekey-to',
                typeof this.rekeyTo !== 'undefined'
                    ? this.rekeyTo.toString()
                    : undefined,
            ],
            ['round-time', this.roundTime],
            ['sender-rewards', this.senderRewards],
            [
                'signature',
                typeof this.signature !== 'undefined'
                    ? this.signature.toEncodingData()
                    : undefined,
            ],
            [
                'state-proof-transaction',
                typeof this.stateProofTransaction !== 'undefined'
                    ? this.stateProofTransaction.toEncodingData()
                    : undefined,
            ],
            ['tx-type', this.txType],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded Transaction: ${data}`);
        }
        return new Transaction({
            fee: data.get('fee'),
            firstValid: data.get('first-valid'),
            lastValid: data.get('last-valid'),
            sender: data.get('sender'),
            applicationTransaction: typeof data.get('application-transaction') !== 'undefined'
                ? TransactionApplication.fromEncodingData(data.get('application-transaction'))
                : undefined,
            assetConfigTransaction: typeof data.get('asset-config-transaction') !== 'undefined'
                ? TransactionAssetConfig.fromEncodingData(data.get('asset-config-transaction'))
                : undefined,
            assetFreezeTransaction: typeof data.get('asset-freeze-transaction') !== 'undefined'
                ? TransactionAssetFreeze.fromEncodingData(data.get('asset-freeze-transaction'))
                : undefined,
            assetTransferTransaction: typeof data.get('asset-transfer-transaction') !== 'undefined'
                ? TransactionAssetTransfer.fromEncodingData(data.get('asset-transfer-transaction'))
                : undefined,
            authAddr: data.get('auth-addr'),
            closeRewards: data.get('close-rewards'),
            closingAmount: data.get('closing-amount'),
            confirmedRound: data.get('confirmed-round'),
            createdApplicationIndex: data.get('created-application-index'),
            createdAssetIndex: data.get('created-asset-index'),
            genesisHash: data.get('genesis-hash'),
            genesisId: data.get('genesis-id'),
            globalStateDelta: typeof data.get('global-state-delta') !== 'undefined'
                ? data
                    .get('global-state-delta')
                    .map((v) => EvalDeltaKeyValue.fromEncodingData(v))
                : undefined,
            group: data.get('group'),
            heartbeatTransaction: typeof data.get('heartbeat-transaction') !== 'undefined'
                ? TransactionHeartbeat.fromEncodingData(data.get('heartbeat-transaction'))
                : undefined,
            id: data.get('id'),
            innerTxns: typeof data.get('inner-txns') !== 'undefined'
                ? data
                    .get('inner-txns')
                    .map((v) => Transaction.fromEncodingData(v))
                : undefined,
            intraRoundOffset: data.get('intra-round-offset'),
            keyregTransaction: typeof data.get('keyreg-transaction') !== 'undefined'
                ? TransactionKeyreg.fromEncodingData(data.get('keyreg-transaction'))
                : undefined,
            lease: data.get('lease'),
            localStateDelta: typeof data.get('local-state-delta') !== 'undefined'
                ? data
                    .get('local-state-delta')
                    .map((v) => AccountStateDelta.fromEncodingData(v))
                : undefined,
            logs: data.get('logs'),
            note: data.get('note'),
            paymentTransaction: typeof data.get('payment-transaction') !== 'undefined'
                ? TransactionPayment.fromEncodingData(data.get('payment-transaction'))
                : undefined,
            receiverRewards: data.get('receiver-rewards'),
            rekeyTo: data.get('rekey-to'),
            roundTime: data.get('round-time'),
            senderRewards: data.get('sender-rewards'),
            signature: typeof data.get('signature') !== 'undefined'
                ? TransactionSignature.fromEncodingData(data.get('signature'))
                : undefined,
            stateProofTransaction: typeof data.get('state-proof-transaction') !== 'undefined'
                ? TransactionStateProof.fromEncodingData(data.get('state-proof-transaction'))
                : undefined,
            txType: data.get('tx-type'),
        });
    }
}
/**
 * Fields for application transactions.
 * Definition:
 * data/transactions/application.go : ApplicationCallTxnFields
 */
class TransactionApplication {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'application-id',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'accounts',
                valueSchema: new OptionalSchema(new ArraySchema(new StringSchema())),
                omitEmpty: true,
            }, {
                key: 'application-args',
                valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),
                omitEmpty: true,
            }, {
                key: 'approval-program',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'clear-state-program',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'extra-program-pages',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'foreign-apps',
                valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),
                omitEmpty: true,
            }, {
                key: 'foreign-assets',
                valueSchema: new OptionalSchema(new ArraySchema(new Uint64Schema())),
                omitEmpty: true,
            }, {
                key: 'global-state-schema',
                valueSchema: new OptionalSchema(StateSchema.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'local-state-schema',
                valueSchema: new OptionalSchema(StateSchema.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'on-completion',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionApplication` object.
     * @param applicationId - (apid) ID of the application being configured or empty if creating.
     * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the
     * application's approval-program and clear-state-program.
     * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's
     * approval-program and clear-state-program.
     * @param approvalProgram - (apap) Logic executed for every application transaction, except when
     * on-completion is set to "clear". It can read and write global state for the
     * application, as well as account-specific local state. Approval programs may
     * reject the transaction.
     * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to
     * "clear". It can read and write global state for the application, as well as
     * account-specific local state. Clear state programs cannot reject the
     * transaction.
     * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.
     * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global
     * states may be accessed by this application's approval-program and
     * clear-state-program. The access is read-only.
     * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's
     * ApprovalProgram and ClearStateProgram. The access is read-only.
     * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas
     * determine how much storage may be used in a local-state or global-state for an
     * application. The more space used, the larger minimum balance must be maintained
     * in the account holding the data.
     * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas
     * determine how much storage may be used in a local-state or global-state for an
     * application. The more space used, the larger minimum balance must be maintained
     * in the account holding the data.
     * @param onCompletion - (apan) defines the what additional actions occur with the transaction.
     * Valid types:
     * * noop
     * * optin
     * * closeout
     * * clear
     * * update
     * * update
     * * delete
     */
    constructor({ applicationId, accounts, applicationArgs, approvalProgram, clearStateProgram, extraProgramPages, foreignApps, foreignAssets, globalStateSchema, localStateSchema, onCompletion, }) {
        this.applicationId = ensureBigInt(applicationId);
        this.accounts =
            typeof accounts !== 'undefined'
                ? accounts.map((addr) => typeof addr === 'string' ? Address.fromString(addr) : addr)
                : undefined;
        this.applicationArgs = applicationArgs;
        this.approvalProgram =
            typeof approvalProgram === 'string'
                ? base64ToBytes(approvalProgram)
                : approvalProgram;
        this.clearStateProgram =
            typeof clearStateProgram === 'string'
                ? base64ToBytes(clearStateProgram)
                : clearStateProgram;
        this.extraProgramPages =
            typeof extraProgramPages === 'undefined'
                ? undefined
                : ensureSafeInteger(extraProgramPages);
        this.foreignApps =
            typeof foreignApps === 'undefined'
                ? undefined
                : foreignApps.map(ensureBigInt);
        this.foreignAssets =
            typeof foreignAssets === 'undefined'
                ? undefined
                : foreignAssets.map(ensureBigInt);
        this.globalStateSchema = globalStateSchema;
        this.localStateSchema = localStateSchema;
        this.onCompletion = onCompletion;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionApplication.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['application-id', this.applicationId],
            [
                'accounts',
                typeof this.accounts !== 'undefined'
                    ? this.accounts.map((v) => v.toString())
                    : undefined,
            ],
            ['application-args', this.applicationArgs],
            ['approval-program', this.approvalProgram],
            ['clear-state-program', this.clearStateProgram],
            ['extra-program-pages', this.extraProgramPages],
            ['foreign-apps', this.foreignApps],
            ['foreign-assets', this.foreignAssets],
            [
                'global-state-schema',
                typeof this.globalStateSchema !== 'undefined'
                    ? this.globalStateSchema.toEncodingData()
                    : undefined,
            ],
            [
                'local-state-schema',
                typeof this.localStateSchema !== 'undefined'
                    ? this.localStateSchema.toEncodingData()
                    : undefined,
            ],
            ['on-completion', this.onCompletion],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionApplication: ${data}`);
        }
        return new TransactionApplication({
            applicationId: data.get('application-id'),
            accounts: data.get('accounts'),
            applicationArgs: data.get('application-args'),
            approvalProgram: data.get('approval-program'),
            clearStateProgram: data.get('clear-state-program'),
            extraProgramPages: data.get('extra-program-pages'),
            foreignApps: data.get('foreign-apps'),
            foreignAssets: data.get('foreign-assets'),
            globalStateSchema: typeof data.get('global-state-schema') !== 'undefined'
                ? StateSchema.fromEncodingData(data.get('global-state-schema'))
                : undefined,
            localStateSchema: typeof data.get('local-state-schema') !== 'undefined'
                ? StateSchema.fromEncodingData(data.get('local-state-schema'))
                : undefined,
            onCompletion: data.get('on-completion'),
        });
    }
}
/**
 * Fields for asset allocation, re-configuration, and destruction.
 * A zero value for asset-id indicates asset creation.
 * A zero value for the params indicates asset destruction.
 * Definition:
 * data/transactions/asset.go : AssetConfigTxnFields
 */
class TransactionAssetConfig {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'asset-id',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'params',
                valueSchema: new OptionalSchema(AssetParams.encodingSchema),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionAssetConfig` object.
     * @param assetId - (xaid) ID of the asset being configured or empty if creating.
     * @param params - AssetParams specifies the parameters for an asset.
     * (apar) when part of an AssetConfig transaction.
     * Definition:
     * data/transactions/asset.go : AssetParams
     */
    constructor({ assetId, params, }) {
        this.assetId =
            typeof assetId === 'undefined' ? undefined : ensureBigInt(assetId);
        this.params = params;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionAssetConfig.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['asset-id', this.assetId],
            [
                'params',
                typeof this.params !== 'undefined'
                    ? this.params.toEncodingData()
                    : undefined,
            ],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionAssetConfig: ${data}`);
        }
        return new TransactionAssetConfig({
            assetId: data.get('asset-id'),
            params: typeof data.get('params') !== 'undefined'
                ? AssetParams.fromEncodingData(data.get('params'))
                : undefined,
        });
    }
}
/**
 * Fields for an asset freeze transaction.
 * Definition:
 * data/transactions/asset.go : AssetFreezeTxnFields
 */
class TransactionAssetFreeze {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'address', valueSchema: new StringSchema(), omitEmpty: true }, { key: 'asset-id', valueSchema: new Uint64Schema(), omitEmpty: true }, {
                key: 'new-freeze-status',
                valueSchema: new BooleanSchema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionAssetFreeze` object.
     * @param address - (fadd) Address of the account whose asset is being frozen or thawed.
     * @param assetId - (faid) ID of the asset being frozen or thawed.
     * @param newFreezeStatus - (afrz) The new freeze status.
     */
    constructor({ address, assetId, newFreezeStatus, }) {
        this.address = address;
        this.assetId = ensureBigInt(assetId);
        this.newFreezeStatus = newFreezeStatus;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionAssetFreeze.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['address', this.address],
            ['asset-id', this.assetId],
            ['new-freeze-status', this.newFreezeStatus],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionAssetFreeze: ${data}`);
        }
        return new TransactionAssetFreeze({
            address: data.get('address'),
            assetId: data.get('asset-id'),
            newFreezeStatus: data.get('new-freeze-status'),
        });
    }
}
/**
 * Fields for an asset transfer transaction.
 * Definition:
 * data/transactions/asset.go : AssetTransferTxnFields
 */
class TransactionAssetTransfer {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'asset-id', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'receiver', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'close-amount',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'close-to',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            }, {
                key: 'sender',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionAssetTransfer` object.
     * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates
     * that asset in the account's Assets map.
     * @param assetId - (xaid) ID of the asset being transferred.
     * @param receiver - (arcv) Recipient address of the transfer.
     * @param closeAmount - Number of assets transferred to the close-to account as part of the transaction.
     * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets
     * map, and specifies where the remaining asset holdings should be transferred.
     * It's always valid to transfer remaining asset holdings to the creator account.
     * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a
     * zero value, the real transaction sender must be the Clawback address from the
     * AssetParams.
     */
    constructor({ amount, assetId, receiver, closeAmount, closeTo, sender, }) {
        this.amount = ensureBigInt(amount);
        this.assetId = ensureBigInt(assetId);
        this.receiver = receiver;
        this.closeAmount =
            typeof closeAmount === 'undefined'
                ? undefined
                : ensureBigInt(closeAmount);
        this.closeTo = closeTo;
        this.sender = sender;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionAssetTransfer.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['amount', this.amount],
            ['asset-id', this.assetId],
            ['receiver', this.receiver],
            ['close-amount', this.closeAmount],
            ['close-to', this.closeTo],
            ['sender', this.sender],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionAssetTransfer: ${data}`);
        }
        return new TransactionAssetTransfer({
            amount: data.get('amount'),
            assetId: data.get('asset-id'),
            receiver: data.get('receiver'),
            closeAmount: data.get('close-amount'),
            closeTo: data.get('close-to'),
            sender: data.get('sender'),
        });
    }
}
/**
 * Fields for a heartbeat transaction.
 * Definition:
 * data/transactions/heartbeat.go : HeartbeatTxnFields
 */
class TransactionHeartbeat {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'hb-address', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'hb-key-dilution',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'hb-proof',
                valueSchema: HbProofFields.encodingSchema,
                omitEmpty: true,
            }, { key: 'hb-seed', valueSchema: new ByteArraySchema(), omitEmpty: true }, {
                key: 'hb-vote-id',
                valueSchema: new ByteArraySchema(),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionHeartbeat` object.
     * @param hbAddress - (hbad) HbAddress is the account this txn is proving onlineness for.
     * @param hbKeyDilution - (hbkd) HbKeyDilution must match HbAddress account's current KeyDilution.
     * @param hbProof - (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing
     * it is online.
     * @param hbSeed - (hbsd) HbSeed must be the block seed for the this transaction's firstValid
     * block.
     * @param hbVoteId - (hbvid) HbVoteID must match the HbAddress account's current VoteID.
     */
    constructor({ hbAddress, hbKeyDilution, hbProof, hbSeed, hbVoteId, }) {
        this.hbAddress = hbAddress;
        this.hbKeyDilution = ensureBigInt(hbKeyDilution);
        this.hbProof = hbProof;
        this.hbSeed = typeof hbSeed === 'string' ? base64ToBytes(hbSeed) : hbSeed;
        this.hbVoteId =
            typeof hbVoteId === 'string' ? base64ToBytes(hbVoteId) : hbVoteId;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionHeartbeat.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['hb-address', this.hbAddress],
            ['hb-key-dilution', this.hbKeyDilution],
            ['hb-proof', this.hbProof.toEncodingData()],
            ['hb-seed', this.hbSeed],
            ['hb-vote-id', this.hbVoteId],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionHeartbeat: ${data}`);
        }
        return new TransactionHeartbeat({
            hbAddress: data.get('hb-address'),
            hbKeyDilution: data.get('hb-key-dilution'),
            hbProof: HbProofFields.fromEncodingData(data.get('hb-proof') ?? new Map()),
            hbSeed: data.get('hb-seed'),
            hbVoteId: data.get('hb-vote-id'),
        });
    }
}
/**
 * Fields for a keyreg transaction.
 * Definition:
 * data/transactions/keyreg.go : KeyregTxnFields
 */
class TransactionKeyreg {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'non-participation',
                valueSchema: new OptionalSchema(new BooleanSchema()),
                omitEmpty: true,
            }, {
                key: 'selection-participation-key',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'state-proof-key',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'vote-first-valid',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'vote-key-dilution',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'vote-last-valid',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'vote-participation-key',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionKeyreg` object.
     * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.
     * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during
     * committee selection.
     * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.
     * @param voteFirstValid - (votefst) First round this participation key is valid.
     * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.
     * @param voteLastValid - (votelst) Last round this participation key is valid.
     * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.
     */
    constructor({ nonParticipation, selectionParticipationKey, stateProofKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, }) {
        this.nonParticipation = nonParticipation;
        this.selectionParticipationKey =
            typeof selectionParticipationKey === 'string'
                ? base64ToBytes(selectionParticipationKey)
                : selectionParticipationKey;
        this.stateProofKey =
            typeof stateProofKey === 'string'
                ? base64ToBytes(stateProofKey)
                : stateProofKey;
        this.voteFirstValid =
            typeof voteFirstValid === 'undefined'
                ? undefined
                : ensureBigInt(voteFirstValid);
        this.voteKeyDilution =
            typeof voteKeyDilution === 'undefined'
                ? undefined
                : ensureBigInt(voteKeyDilution);
        this.voteLastValid =
            typeof voteLastValid === 'undefined'
                ? undefined
                : ensureBigInt(voteLastValid);
        this.voteParticipationKey =
            typeof voteParticipationKey === 'string'
                ? base64ToBytes(voteParticipationKey)
                : voteParticipationKey;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionKeyreg.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['non-participation', this.nonParticipation],
            ['selection-participation-key', this.selectionParticipationKey],
            ['state-proof-key', this.stateProofKey],
            ['vote-first-valid', this.voteFirstValid],
            ['vote-key-dilution', this.voteKeyDilution],
            ['vote-last-valid', this.voteLastValid],
            ['vote-participation-key', this.voteParticipationKey],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionKeyreg: ${data}`);
        }
        return new TransactionKeyreg({
            nonParticipation: data.get('non-participation'),
            selectionParticipationKey: data.get('selection-participation-key'),
            stateProofKey: data.get('state-proof-key'),
            voteFirstValid: data.get('vote-first-valid'),
            voteKeyDilution: data.get('vote-key-dilution'),
            voteLastValid: data.get('vote-last-valid'),
            voteParticipationKey: data.get('vote-participation-key'),
        });
    }
}
/**
 * Fields for a payment transaction.
 * Definition:
 * data/transactions/payment.go : PaymentTxnFields
 */
class TransactionPayment {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'amount', valueSchema: new Uint64Schema(), omitEmpty: true }, { key: 'receiver', valueSchema: new StringSchema(), omitEmpty: true }, {
                key: 'close-amount',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'close-remainder-to',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionPayment` object.
     * @param amount - (amt) number of MicroAlgos intended to be transferred.
     * @param receiver - (rcv) receiver's address.
     * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when
     * closing the sender account.
     * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all
     * remaining funds be transferred to this address.
     */
    constructor({ amount, receiver, closeAmount, closeRemainderTo, }) {
        this.amount = ensureBigInt(amount);
        this.receiver = receiver;
        this.closeAmount =
            typeof closeAmount === 'undefined'
                ? undefined
                : ensureBigInt(closeAmount);
        this.closeRemainderTo = closeRemainderTo;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionPayment.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['amount', this.amount],
            ['receiver', this.receiver],
            ['close-amount', this.closeAmount],
            ['close-remainder-to', this.closeRemainderTo],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionPayment: ${data}`);
        }
        return new TransactionPayment({
            amount: data.get('amount'),
            receiver: data.get('receiver'),
            closeAmount: data.get('close-amount'),
            closeRemainderTo: data.get('close-remainder-to'),
        });
    }
}
/**
 *
 */
class TransactionResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'transaction',
                valueSchema: Transaction.encodingSchema,
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionResponse` object.
     * @param currentRound - Round at which the results were computed.
     * @param transaction - Contains all fields common to all transactions and serves as an envelope to all
     * transactions type. Represents both regular and inner transactions.
     * Definition:
     * data/transactions/signedtxn.go : SignedTxn
     * data/transactions/transaction.go : Transaction
     */
    constructor({ currentRound, transaction, }) {
        this.currentRound = ensureBigInt(currentRound);
        this.transaction = transaction;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['current-round', this.currentRound],
            ['transaction', this.transaction.toEncodingData()],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionResponse: ${data}`);
        }
        return new TransactionResponse({
            currentRound: data.get('current-round'),
            transaction: Transaction.fromEncodingData(data.get('transaction') ?? new Map()),
        });
    }
}
/**
 * Validation signature associated with some data. Only one of the signatures
 * should be provided.
 */
class TransactionSignature {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'logicsig',
                valueSchema: new OptionalSchema(TransactionSignatureLogicsig.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'multisig',
                valueSchema: new OptionalSchema(TransactionSignatureMultisig.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'sig',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionSignature` object.
     * @param logicsig - (lsig) Programatic transaction signature.
     * Definition:
     * data/transactions/logicsig.go
     * @param multisig - (msig) structure holding multiple subsignatures.
     * Definition:
     * crypto/multisig.go : MultisigSig
     * @param sig - (sig) Standard ed25519 signature.
     */
    constructor({ logicsig, multisig, sig, }) {
        this.logicsig = logicsig;
        this.multisig = multisig;
        this.sig = typeof sig === 'string' ? base64ToBytes(sig) : sig;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionSignature.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'logicsig',
                typeof this.logicsig !== 'undefined'
                    ? this.logicsig.toEncodingData()
                    : undefined,
            ],
            [
                'multisig',
                typeof this.multisig !== 'undefined'
                    ? this.multisig.toEncodingData()
                    : undefined,
            ],
            ['sig', this.sig],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionSignature: ${data}`);
        }
        return new TransactionSignature({
            logicsig: typeof data.get('logicsig') !== 'undefined'
                ? TransactionSignatureLogicsig.fromEncodingData(data.get('logicsig'))
                : undefined,
            multisig: typeof data.get('multisig') !== 'undefined'
                ? TransactionSignatureMultisig.fromEncodingData(data.get('multisig'))
                : undefined,
            sig: data.get('sig'),
        });
    }
}
/**
 * (lsig) Programatic transaction signature.
 * Definition:
 * data/transactions/logicsig.go
 */
class TransactionSignatureLogicsig {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({ key: 'logic', valueSchema: new ByteArraySchema(), omitEmpty: true }, {
                key: 'args',
                valueSchema: new OptionalSchema(new ArraySchema(new ByteArraySchema())),
                omitEmpty: true,
            }, {
                key: 'multisig-signature',
                valueSchema: new OptionalSchema(TransactionSignatureMultisig.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'signature',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionSignatureLogicsig` object.
     * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the
     * address of ana ccount. Base64 encoded TEAL program.
     * @param args - (arg) Logic arguments, base64 encoded.
     * @param multisigSignature - (msig) structure holding multiple subsignatures.
     * Definition:
     * crypto/multisig.go : MultisigSig
     * @param signature - (sig) ed25519 signature.
     */
    constructor({ logic, args, multisigSignature, signature, }) {
        this.logic = typeof logic === 'string' ? base64ToBytes(logic) : logic;
        this.args = args;
        this.multisigSignature = multisigSignature;
        this.signature =
            typeof signature === 'string' ? base64ToBytes(signature) : signature;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionSignatureLogicsig.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['logic', this.logic],
            ['args', this.args],
            [
                'multisig-signature',
                typeof this.multisigSignature !== 'undefined'
                    ? this.multisigSignature.toEncodingData()
                    : undefined,
            ],
            ['signature', this.signature],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionSignatureLogicsig: ${data}`);
        }
        return new TransactionSignatureLogicsig({
            logic: data.get('logic'),
            args: data.get('args'),
            multisigSignature: typeof data.get('multisig-signature') !== 'undefined'
                ? TransactionSignatureMultisig.fromEncodingData(data.get('multisig-signature'))
                : undefined,
            signature: data.get('signature'),
        });
    }
}
/**
 * (msig) structure holding multiple subsignatures.
 * Definition:
 * crypto/multisig.go : MultisigSig
 */
class TransactionSignatureMultisig {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'subsignature',
                valueSchema: new OptionalSchema(new ArraySchema(TransactionSignatureMultisigSubsignature.encodingSchema)),
                omitEmpty: true,
            }, {
                key: 'threshold',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            }, {
                key: 'version',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionSignatureMultisig` object.
     * @param subsignature - (subsig) holds pairs of public key and signatures.
     * @param threshold - (thr)
     * @param version - (v)
     */
    constructor({ subsignature, threshold, version, }) {
        this.subsignature = subsignature;
        this.threshold =
            typeof threshold === 'undefined'
                ? undefined
                : ensureSafeInteger(threshold);
        this.version =
            typeof version === 'undefined' ? undefined : ensureSafeInteger(version);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionSignatureMultisig.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'subsignature',
                typeof this.subsignature !== 'undefined'
                    ? this.subsignature.map((v) => v.toEncodingData())
                    : undefined,
            ],
            ['threshold', this.threshold],
            ['version', this.version],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionSignatureMultisig: ${data}`);
        }
        return new TransactionSignatureMultisig({
            subsignature: typeof data.get('subsignature') !== 'undefined'
                ? data
                    .get('subsignature')
                    .map((v) => TransactionSignatureMultisigSubsignature.fromEncodingData(v))
                : undefined,
            threshold: data.get('threshold'),
            version: data.get('version'),
        });
    }
}
class TransactionSignatureMultisigSubsignature {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'public-key',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            }, {
                key: 'signature',
                valueSchema: new OptionalSchema(new ByteArraySchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionSignatureMultisigSubsignature` object.
     * @param publicKey - (pk)
     * @param signature - (s)
     */
    constructor({ publicKey, signature, }) {
        this.publicKey =
            typeof publicKey === 'string' ? base64ToBytes(publicKey) : publicKey;
        this.signature =
            typeof signature === 'string' ? base64ToBytes(signature) : signature;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionSignatureMultisigSubsignature.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['public-key', this.publicKey],
            ['signature', this.signature],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionSignatureMultisigSubsignature: ${data}`);
        }
        return new TransactionSignatureMultisigSubsignature({
            publicKey: data.get('public-key'),
            signature: data.get('signature'),
        });
    }
}
/**
 * Fields for a state proof transaction.
 * Definition:
 * data/transactions/stateproof.go : StateProofTxnFields
 */
class TransactionStateProof {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'message',
                valueSchema: new OptionalSchema(IndexerStateProofMessage.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'state-proof',
                valueSchema: new OptionalSchema(StateProofFields.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'state-proof-type',
                valueSchema: new OptionalSchema(new Uint64Schema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionStateProof` object.
     * @param message - (spmsg)
     * @param stateProof - (sp) represents a state proof.
     * Definition:
     * crypto/stateproof/structs.go : StateProof
     * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in
     * protocol/stateproof.go
     */
    constructor({ message, stateProof, stateProofType, }) {
        this.message = message;
        this.stateProof = stateProof;
        this.stateProofType =
            typeof stateProofType === 'undefined'
                ? undefined
                : ensureSafeInteger(stateProofType);
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionStateProof.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            [
                'message',
                typeof this.message !== 'undefined'
                    ? this.message.toEncodingData()
                    : undefined,
            ],
            [
                'state-proof',
                typeof this.stateProof !== 'undefined'
                    ? this.stateProof.toEncodingData()
                    : undefined,
            ],
            ['state-proof-type', this.stateProofType],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionStateProof: ${data}`);
        }
        return new TransactionStateProof({
            message: typeof data.get('message') !== 'undefined'
                ? IndexerStateProofMessage.fromEncodingData(data.get('message'))
                : undefined,
            stateProof: typeof data.get('state-proof') !== 'undefined'
                ? StateProofFields.fromEncodingData(data.get('state-proof'))
                : undefined,
            stateProofType: data.get('state-proof-type'),
        });
    }
}
/**
 *
 */
class TransactionsResponse {
    static get encodingSchema() {
        if (!this.encodingSchemaValue) {
            this.encodingSchemaValue = new NamedMapSchema([]);
            this.encodingSchemaValue.pushEntries({
                key: 'current-round',
                valueSchema: new Uint64Schema(),
                omitEmpty: true,
            }, {
                key: 'transactions',
                valueSchema: new ArraySchema(Transaction.encodingSchema),
                omitEmpty: true,
            }, {
                key: 'next-token',
                valueSchema: new OptionalSchema(new StringSchema()),
                omitEmpty: true,
            });
        }
        return this.encodingSchemaValue;
    }
    /**
     * Creates a new `TransactionsResponse` object.
     * @param currentRound - Round at which the results were computed.
     * @param transactions -
     * @param nextToken - Used for pagination, when making another request provide this token with the
     * next parameter.
     */
    constructor({ currentRound, transactions, nextToken, }) {
        this.currentRound = ensureBigInt(currentRound);
        this.transactions = transactions;
        this.nextToken = nextToken;
    }
    // eslint-disable-next-line class-methods-use-this
    getEncodingSchema() {
        return TransactionsResponse.encodingSchema;
    }
    toEncodingData() {
        return new Map([
            ['current-round', this.currentRound],
            ['transactions', this.transactions.map((v) => v.toEncodingData())],
            ['next-token', this.nextToken],
        ]);
    }
    static fromEncodingData(data) {
        if (!(data instanceof Map)) {
            throw new Error(`Invalid decoded TransactionsResponse: ${data}`);
        }
        return new TransactionsResponse({
            currentRound: data.get('current-round'),
            transactions: (data.get('transactions') ?? []).map((v) => Transaction.fromEncodingData(v)),
            nextToken: data.get('next-token'),
        });
    }
}

var types = /*#__PURE__*/Object.freeze({
	__proto__: null,
	Account: Account,
	AccountParticipation: AccountParticipation,
	AccountResponse: AccountResponse,
	AccountStateDelta: AccountStateDelta,
	AccountsResponse: AccountsResponse,
	Application: Application,
	ApplicationLocalState: ApplicationLocalState,
	ApplicationLocalStatesResponse: ApplicationLocalStatesResponse,
	ApplicationLogData: ApplicationLogData,
	ApplicationLogsResponse: ApplicationLogsResponse,
	ApplicationParams: ApplicationParams,
	ApplicationResponse: ApplicationResponse,
	ApplicationStateSchema: ApplicationStateSchema,
	ApplicationsResponse: ApplicationsResponse,
	Asset: Asset,
	AssetBalancesResponse: AssetBalancesResponse,
	AssetHolding: AssetHolding,
	AssetHoldingsResponse: AssetHoldingsResponse,
	AssetParams: AssetParams,
	AssetResponse: AssetResponse,
	AssetsResponse: AssetsResponse,
	Block: Block,
	BlockHeadersResponse: BlockHeadersResponse,
	BlockRewards: BlockRewards,
	BlockUpgradeState: BlockUpgradeState,
	BlockUpgradeVote: BlockUpgradeVote,
	Box: Box,
	BoxDescriptor: BoxDescriptor,
	BoxesResponse: BoxesResponse,
	ErrorResponse: ErrorResponse,
	EvalDelta: EvalDelta,
	EvalDeltaKeyValue: EvalDeltaKeyValue,
	HashFactory: HashFactory,
	HbProofFields: HbProofFields,
	HealthCheck: HealthCheck,
	IndexerStateProofMessage: IndexerStateProofMessage,
	MerkleArrayProof: MerkleArrayProof,
	MiniAssetHolding: MiniAssetHolding,
	ParticipationUpdates: ParticipationUpdates,
	StateProofFields: StateProofFields,
	StateProofParticipant: StateProofParticipant,
	StateProofReveal: StateProofReveal,
	StateProofSigSlot: StateProofSigSlot,
	StateProofSignature: StateProofSignature,
	StateProofTracking: StateProofTracking,
	StateProofVerifier: StateProofVerifier,
	StateSchema: StateSchema,
	TealKeyValue: TealKeyValue,
	TealValue: TealValue,
	Transaction: Transaction,
	TransactionApplication: TransactionApplication,
	TransactionAssetConfig: TransactionAssetConfig,
	TransactionAssetFreeze: TransactionAssetFreeze,
	TransactionAssetTransfer: TransactionAssetTransfer,
	TransactionHeartbeat: TransactionHeartbeat,
	TransactionKeyreg: TransactionKeyreg,
	TransactionPayment: TransactionPayment,
	TransactionResponse: TransactionResponse,
	TransactionSignature: TransactionSignature,
	TransactionSignatureLogicsig: TransactionSignatureLogicsig,
	TransactionSignatureMultisig: TransactionSignatureMultisig,
	TransactionSignatureMultisigSubsignature: TransactionSignatureMultisigSubsignature,
	TransactionStateProof: TransactionStateProof,
	TransactionsResponse: TransactionsResponse
});

/**
 * Returns the health object for the service.
 * Returns 200 if healthy.
 *
 * #### Example
 * ```typescript
 * const health = await indexerClient.makeHealthCheck().do();
 * ```
 *
 * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)
 * @category GET
 */
class MakeHealthCheck extends JSONRequest {
    /**
     * @returns `/health`
     */
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/health';
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), HealthCheck);
    }
}

class LookupAssetBalances extends JSONRequest {
    /**
     * Returns the list of accounts which hold the given asset and their balance.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)
     * @param index - The asset ID to look up.
     */
    constructor(c, index) {
        super(c);
        this.index = BigInt(index);
    }
    /**
     * @returns `/v2/assets/${index}/balances`
     */
    path() {
        return `/v2/assets/${this.index}/balances`;
    }
    /**
     * Limit results for pagination.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const maxResults = 20;
     * const assetBalances = await indexerClient
     *        .lookupAssetBalances(assetId)
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit - maximum number of results to return.
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Filtered results should have an asset balance greater than this value.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const minBalance = 1000000;
     * const assetBalances = await indexerClient
     *        .lookupAssetBalances(assetId)
     *        .currencyGreaterThan(minBalance)
     *        .do();
     * ```
     * @param greater
     * @category query
     */
    currencyGreaterThan(greater) {
        // We convert the following to a string for now to correctly include zero values in request parameters.
        this.query['currency-greater-than'] = greater.toString();
        return this;
    }
    /**
     * Filtered results should have an asset balance less than this value.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const maxBalance = 2000000;
     * const assetBalances = await indexerClient
     *        .lookupAssetBalances(assetId)
     *        .currencyLessThan(maxBalance)
     *        .do();
     * ```
     * @param lesser
     * @category query
     */
    currencyLessThan(lesser) {
        this.query['currency-less-than'] = lesser;
        return this;
    }
    /**
     * Specify the next page of results.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const maxResults = 20;
     *
     * const assetBalancesPage1 = await indexerClient
     *        .lookupAssetBalances(assetId)
     *        .limit(maxResults)
     *        .do();
     *
     * const assetBalancesPage2 = await indexerClient
     *        .lookupAssetBalances(assetId)
     *        .limit(maxResults)
     *        .nextToken(assetBalancesPage1["next-token"])
     *        .do();
     * ```
     * @param nextToken - provided by the previous results.
     * @category query
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
     *
     * #### Example 1
     * ```typescript
     * const assetId = 163650;
     * const assetBalances = await indexerClient
     *        .lookupAssetBalances(assetId)
     *        .includeAll(false)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const assetId = 163650;
     * const assetBalances = await indexerClient
     *        .lookupAssetBalances(assetId)
     *        .includeAll()
     *        .do();
     * ```
     *
     * @param value
     * @category query
     */
    includeAll(value = true) {
        this.query['include-all'] = value;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), AssetBalancesResponse);
    }
}

/**
 * Accept base64 string or Uint8Array and output base64 string
 * @param data - Base64 string or Uint8Array
 * @returns The inputted base64 string, or a base64 string representation of the Uint8Array
 */
function base64StringFunnel(data) {
    if (typeof data === 'string') {
        return data;
    }
    return bytesToBase64(data);
}
class LookupAccountTransactions extends JSONRequest {
    /**
     * Returns transactions relating to the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)
     * @param account - The address of the account.
     */
    constructor(c, account) {
        super(c);
        this.account = account.toString();
    }
    /**
     * @returns `/v2/accounts/${account}/transactions`
     */
    path() {
        return `/v2/accounts/${this.account}/transactions`;
    }
    /**
     * Specifies a prefix which must be contained in the note field.
     *
     * #### Example
     * ```typescript
     * const notePrefixBase64Encoded = "Y3JlYXRl";
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .notePrefix(notePrefixBase64Encoded)
     *        .do();
     * ```
     *
     * @param prefix - base64 string or uint8array
     * @category query
     */
    notePrefix(prefix) {
        this.query['note-prefix'] = base64StringFunnel(prefix);
        return this;
    }
    /**
     * Type of transaction to filter with.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .txType("appl")
     *        .do();
     * ```
     *
     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`
     * @category query
     */
    txType(type) {
        this.query['tx-type'] = type;
        return this;
    }
    /**
     * Type of signature to filter with.
     * - sig: Standard
     * - msig: MultiSig
     * - lsig: LogicSig
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .sigType("msig")
     *        .do();
     * ```
     *
     * @param type - one of `sig`, `msig`, `lsig`
     * @category query
     */
    sigType(type) {
        this.query['sig-type'] = type;
        return this;
    }
    /**
     * Lookup the specific transaction by ID.
     *
     * #### Example
     * ```typescript
     * const txId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .txid(txId)
     *        .do();
     * ```
     * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`
     * @param txid
     * @category query
     */
    txid(txid) {
        this.query.txid = txid;
        return this;
    }
    /**
     * Include results for the specified round.
     *
     * #### Example
     * ```typescript
     * const targetBlock = 18309917;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .round(targetBlock)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    round(round) {
        this.query.round = round;
        return this;
    }
    /**
     * Include results at or after the specified min-round.
     *
     * #### Example
     * ```typescript
     * const minRound = 18309917;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .minRound(minRound)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    minRound(round) {
        this.query['min-round'] = round;
        return this;
    }
    /**
     * Include results at or before the specified max-round.
     *
     * #### Example
     * ```typescript
     * const maxRound = 18309917;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .maxRound(maxRound)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    maxRound(round) {
        this.query['max-round'] = round;
        return this;
    }
    /**
     * Asset ID to filter with.
     *
     * #### Example
     * ```typescript
     * const assetID = 163650;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .assetID(assetID)
     *        .do();
     * ```
     *
     * @param id
     * @category query
     */
    assetID(id) {
        this.query['asset-id'] = id;
        return this;
    }
    /**
     * Maximum number of results to return.
     *
     * #### Example
     * ```typescript
     * const maxResults = 25;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Include results before the given time.
     *
     * #### Example
     * ```typescript
     * const beforeTime = "2022-02-02T20:20:22.02Z";
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .beforeTime(beforeTime)
     *        .do();
     * ```
     *
     * @param before - rfc3339 string or Date object
     * @category query
     */
    beforeTime(before) {
        this.query['before-time'] =
            before instanceof Date ? before.toISOString() : before;
        return this;
    }
    /**
     * Include results after the given time.
     *
     * #### Example
     * ```typescript
     * const afterTime = "2022-10-21T00:00:11.55Z";
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .afterTime(afterTime)
     *        .do();
     * ```
     *
     * @param after - rfc3339 string or Date object
     * @category query
     */
    afterTime(after) {
        this.query['after-time'] =
            after instanceof Date ? after.toISOString() : after;
        return this;
    }
    /**
     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
     *
     * #### Example 1
     * ```typescript
     * const minBalance = 300000;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .currencyGreaterThan(minBalance - 1)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const assetID = 163650;
     * const minBalance = 300000;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .assetID(assetID)
     *        .currencyGreaterThan(minBalance - 1)
     *        .do();
     * ```
     *
     * @param greater
     * @category query
     */
    currencyGreaterThan(greater) {
        // We convert the following to a string for now to correctly include zero values in request parameters.
        this.query['currency-greater-than'] = greater.toString();
        return this;
    }
    /**
     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
     *
     * #### Example 1
     * ```typescript
     * const maxBalance = 500000;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .currencyLessThan(maxBalance + 1)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const assetID = 163650;
     * const maxBalance = 500000;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .assetID(assetID)
     *        .currencyLessThan(maxBalance + 1)
     *        .do();
     * ```
     *
     * @param lesser
     * @category query
     */
    currencyLessThan(lesser) {
        this.query['currency-less-than'] = lesser;
        return this;
    }
    /**
     * The next page of results. Use the next token provided by the previous results.
     *
     * #### Example
     * ```typescript
     * const maxResults = 25;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     *
     * const accountTxnsPage1 = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .limit(maxResults)
     *        .do();
     *
     * const accountTxnsPage2 = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .limit(maxResults)
     *        .nextToken(accountTxnsPage1["next-token"])
     *        .do();
     * ```
     *
     * @param nextToken - provided by the previous results.
     * @category query
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Whether or not to include rekeying transactions.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient
     *        .lookupAccountTransactions(address)
     *        .rekeyTo(false)
     *        .do();
     * ```
     *
     * @param rekeyTo
     * @category query
     */
    rekeyTo(rekeyTo) {
        this.query['rekey-to'] = rekeyTo;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), TransactionsResponse);
    }
}

class LookupAssetTransactions extends JSONRequest {
    /**
     * Returns transactions relating to the given asset.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)
     * @param index - The asset ID to look up.
     */
    constructor(c, index) {
        super(c);
        this.index = BigInt(index);
    }
    /**
     * @returns `/v2/assets/${index}/transactions`
     */
    path() {
        return `/v2/assets/${this.index}/transactions`;
    }
    /**
     * Specifies a prefix which must be contained in the note field.
     *
     * #### Example
     * ```typescript
     * const notePrefixBase64Encoded = "Y3JlYXRl";
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .notePrefix(notePrefixBase64Encoded)
     *        .do();
     * ```
     *
     * @param prefix - base64 string or uint8array
     * @category query
     */
    notePrefix(prefix) {
        this.query['note-prefix'] = base64StringFunnel(prefix);
        return this;
    }
    /**
     * Type of transaction to filter with.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .txType("axfer")
     *        .do();
     * ```
     *
     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`
     * @category query
     */
    txType(type) {
        this.query['tx-type'] = type;
        return this;
    }
    /**
     * Type of signature to filter with.
     * - sig: Standard
     * - msig: MultiSig
     * - lsig: LogicSig
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .sigType("lsig")
     *        .do();
     * ```
     *
     * @param type - one of `sig`, `msig`, `lsig`
     * @category query
     */
    sigType(type) {
        this.query['sig-type'] = type;
        return this;
    }
    /**
     * Lookup the specific transaction by ID.
     *
     * #### Example
     * ```typescript
     * const txId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .txid(txId)
     *        .do();
     * ```
     *
     * @param txid
     * @category query
     */
    txid(txid) {
        this.query.txid = txid;
        return this;
    }
    /**
     * Include results for the specified round.
     *
     * #### Example
     * ```typescript
     * const targetBlock = 18309917;
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .round(targetBlock)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    round(round) {
        this.query.round = round;
        return this;
    }
    /**
     * Include results at or after the specified min-round.
     *
     * #### Example
     * ```typescript
     * const minRound = 18309917;
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .minRound(minRound)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    minRound(round) {
        this.query['min-round'] = round;
        return this;
    }
    /**
     * Include results at or before the specified max-round.
     *
     * #### Example
     * ```typescript
     * const maxRound = 18309917;
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .maxRound(maxRound)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    maxRound(round) {
        this.query['max-round'] = round;
        return this;
    }
    /**
     * Maximum number of results to return.
     *
     * #### Example
     * ```typescript
     * const maxResults = 25;
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Include results before the given time.
     *
     * #### Example
     * ```typescript
     * const beforeTime = "2022-02-02T20:20:22.02Z";
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .beforeTime(beforeTime)
     *        .do();
     * ```
     *
     * @param before - rfc3339 string or Date object
     * @category query
     */
    beforeTime(before) {
        this.query['before-time'] =
            before instanceof Date ? before.toISOString() : before;
        return this;
    }
    /**
     * Include results after the given time.
     *
     * #### Example
     * ```typescript
     * const afterTime = "2022-10-21T00:00:11.55Z";
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .afterTime(afterTime)
     *        .do();
     * ```
     *
     * @param after - rfc3339 string or Date object
     * @category query
     */
    afterTime(after) {
        this.query['after-time'] =
            after instanceof Date ? after.toISOString() : after;
        return this;
    }
    /**
     * Filtered results should have an amount greater than this value, as int, representing asset units.
     *
     * #### Example
     * ```typescript
     * const minBalance = 300000;
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .currencyGreaterThan(minBalance - 1)
     *        .do();
     * ```
     *
     * @param greater
     * @category query
     */
    currencyGreaterThan(greater) {
        // We convert the following to a string for now to correctly include zero values in request parameters.
        this.query['currency-greater-than'] = greater.toString();
        return this;
    }
    /**
     * Filtered results should have an amount less than this value, as int, representing asset units.
     *
     * #### Example
     * ```typescript
     * const maxBalance = 500000;
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .currencyLessThan(maxBalance + 1)
     *        .do();
     * ```
     *
     * @param lesser
     * @category query
     */
    currencyLessThan(lesser) {
        this.query['currency-less-than'] = lesser;
        return this;
    }
    /**
     * Combined with address, defines what address to filter on, as string.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const role = "sender";
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .address(address)
     *        .addressRole(role)
     *        .do();
     * ```
     *
     * @param role - one of `sender`, `receiver`, `freeze-target`
     * @category query
     */
    addressRole(role) {
        this.query['address-role'] = role;
        return this;
    }
    /**
     * Only include transactions with this address in one of the transaction fields.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .address(address)
     *        .do();
     * ```
     *
     * @param address
     * @category query
     */
    address(address) {
        this.query.address = address.toString();
        return this;
    }
    /**
     * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .excludeCloseTo(true)
     *        .do();
     * ```
     *
     * @param exclude
     * @category query
     */
    excludeCloseTo(exclude) {
        this.query['exclude-close-to'] = exclude;
        return this;
    }
    /**
     * The next page of results.
     *
     * #### Example
     * ```typescript
     * const maxResults = 25;
     * const assetId = 163650;
     *
     * const assetTxnsPage1 = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .limit(maxResults)
     *        .do();
     *
     * const assetTxnsPage2 = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .limit(maxResults)
     *        .nextToken(assetTxnsPage1["next-token"])
     *        .do();
     * ```
     *
     * @param nextToken - provided by the previous results.
     * @category query
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Whether or not to include rekeying transactions.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const assetTxns = await indexerClient
     *        .lookupAssetTransactions(assetId)
     *        .rekeyTo(false)
     *        .do();
     * ```
     *
     * @param rekeyTo
     * @category query
     */
    rekeyTo(rekeyTo) {
        this.query['rekey-to'] = rekeyTo;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), TransactionsResponse);
    }
}

class LookupBlock extends JSONRequest {
    /**
     * Returns the block for the passed round.
     *
     * #### Example
     * ```typescript
     * const targetBlock = 18309917;
     * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)
     * @param round - The number of the round to look up.
     * @category GET
     */
    constructor(c, round) {
        super(c);
        this.round = BigInt(round);
    }
    /**
     * @returns `/v2/blocks/${round}`
     */
    path() {
        return `/v2/blocks/${this.round}`;
    }
    /**
     * Header only flag. When this is set to true, returned block does not contain the
     * transactions.
     */
    headerOnly(headerOnly) {
        this.query['header-only'] = headerOnly;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), Block);
    }
}

class LookupTransactionByID extends JSONRequest {
    /**
     * Returns information about the given transaction.
     *
     * #### Example
     * ```typescript
     * const txnId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
     * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)
     * @param txID - The ID of the transaction to look up.
     * @category GET
     */
    constructor(c, txID) {
        super(c);
        this.txID = txID;
    }
    /**
     * @returns `/v2/transactions/${txID}`
     */
    path() {
        return `/v2/transactions/${this.txID}`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), TransactionResponse);
    }
}

class LookupAccountByID extends JSONRequest {
    /**
     * Returns information about the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountInfo = await indexerClient.lookupAccountByID(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)
     * @param account - The address of the account to look up.
     * @category GET
     */
    constructor(c, account) {
        super(c);
        this.account = account.toString();
    }
    /**
     * @returns `/v2/accounts/${account}`
     */
    path() {
        return `/v2/accounts/${this.account}`;
    }
    /**
     * Specify round to filter with.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const targetBlock = 18309917;
     * const accountInfo = await indexerClient
     *        .lookupAccountByID(address)
     *        .round(targetBlock)
     *        .do();
     * ```
     * @param round
     */
    round(round) {
        this.query.round = round;
        return this;
    }
    /**
     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
     *
     * #### Example 1
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountInfo = await indexerClient
     *        .lookupAccountByID(address)
     *        .includeAll(false)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountInfo = await indexerClient
     *        .lookupAccountByID(address)
     *        .includeAll()
     *        .do();
     * ```
     * @param value
     */
    includeAll(value = true) {
        this.query['include-all'] = value;
        return this;
    }
    /**
     * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.
     *
     * #### Example 1
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountInfo = await indexerClient
     *        .lookupAccountByID(address)
     *        .exclude("all")
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountInfo = await indexerClient
     *        .lookupAccountByID(address)
     *        .exclude("assets,created-assets")
     *        .do();
     * ```
     * @remarks By default, it behaves as exclude=none
     * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`
     * @category query
     */
    exclude(exclude) {
        this.query.exclude = exclude;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), AccountResponse);
    }
}

class LookupAccountAssets extends JSONRequest {
    /**
     * Returns asset about the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountAssets = await indexerClient.lookupAccountAssets(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)
     * @param account - The address of the account to look up.
     * @category GET
     */
    constructor(c, account) {
        super(c);
        this.account = account.toString();
    }
    /**
     * @returns `/v2/accounts/${account}/assets`
     */
    path() {
        return `/v2/accounts/${this.account}/assets`;
    }
    /**
     * Add a limit for filter.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const maxResults = 20;
     * const accountAssets = await indexerClient
     *        .lookupAccountAssets(address)
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit - maximum number of results to return.
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Specify round to filter with.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const targetBlock = 18309917;
     * const accountAssets = await indexerClient
     *        .lookupAccountAssets(address)
     *        .round(targetBlock)
     *        .do();
     * ```
     * @param round
     * @category query
     */
    round(round) {
        this.query.round = round;
        return this;
    }
    /**
     * Specify the next page of results.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const maxResults = 20;
     *
     * const accountAssetsPage1 = await indexerClient
     *        .lookupAccountAssets(address)
     *        .limit(maxResults)
     *        .do();
     *
     * const accountAssetsPage2 = await indexerClient
     *        .lookupAccountAssets(address)
     *        .limit(maxResults)
     *        .next(accountAssetsPage1["next-token"])
     *        .do();
     * ```
     * @param nextToken - provided by the previous results.
     * @category query
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountAssets = await indexerClient
     *        .lookupAccountAssets(address)
     *        .includeAll(false)
     *        .do();
     * ```
     * @param value
     * @category query
     */
    includeAll(value = true) {
        this.query['include-all'] = value;
        return this;
    }
    /**
     * Specify an assetID to search for.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const assetAssets = await indexerClient
     *        .lookupAccountAssets(address)
     *        .assetId(assetId)
     *        .do();
     * ```
     * @param index - the assetID
     * @category query
     */
    assetId(index) {
        this.query['asset-id'] = index;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), AssetHoldingsResponse);
    }
}

class LookupAccountCreatedAssets extends JSONRequest {
    /**
     * Returns asset information created by the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)
     * @param account - The address of the account to look up.
     * @category GET
     */
    constructor(c, account) {
        super(c);
        this.account = account.toString();
    }
    /**
     * @returns `/v2/accounts/${account}/created-assets`
     */
    path() {
        return `/v2/accounts/${this.account}/created-assets`;
    }
    /**
     * Add a limit for filter.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const maxResults = 20;
     * const accountAssets = await indexerClient
     *        .lookupAccountCreatedAssets(address)
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit - maximum number of results to return.
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Specify round to filter with.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const targetBlock = 18309917;
     * const accountAssets = await indexerClient
     *        .lookupAccountCreatedAssets(address)
     *        .round(targetBlock)
     *        .do();
     * ```
     * @param round
     * @category query
     */
    round(round) {
        this.query.round = round;
        return this;
    }
    /**
     * Specify the next page of results.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const maxResults = 20;
     *
     * const accountAssetsPage1 = await indexerClient
     *        .lookupAccountCreatedAssets(address)
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * const accountAssetsPage2 = await indexerClient
     *        .lookupAccountCreatedAssets(address)
     *        .limit(maxResults)
     *        .next(accountAssetsPage1["next-token"])
     *        .do();
     * ```
     * @param nextToken - provided by the previous results.
     * @category query
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountAssets = await indexerClient
     *        .lookupAccountCreatedAssets(address)
     *        .includeAll(false)
     *        .do();
     * ```
     * @param value
     * @category query
     */
    includeAll(value = true) {
        this.query['include-all'] = value;
        return this;
    }
    /**
     * Specify an assetID to search for.
     *
     * #### Example
     * ```typescript
     * const assetID = 163650;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const assetAssets = await indexerClient
     *        .lookupAccountCreatedAssets(address)
     *        .assetID(assetID)
     *        .do();
     * ```
     * @param index - the assetID
     * @category query
     */
    assetID(index) {
        this.query['asset-id'] = index;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), AssetsResponse);
    }
}

class LookupAccountAppLocalStates extends JSONRequest {
    /**
     * Returns application local state about the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)
     * @param account - The address of the account to look up.
     * @category GET
     */
    constructor(c, account) {
        super(c);
        this.account = account.toString();
    }
    /**
     * @returns `/v2/accounts/${account}/apps-local-state`
     */
    path() {
        return `/v2/accounts/${this.account}/apps-local-state`;
    }
    /**
     * Add a limit for filter.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const maxResults = 20;
     * const accountAssets = await indexerClient
     *        .lookupAccountAppLocalStates(address)
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit - maximum number of results to return.
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Specify round to filter with.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const targetBlock = 18309917;
     * const accountAssets = await indexerClient
     *        .lookupAccountAppLocalStates(address)
     *        .round(targetBlock)
     *        .do();
     * ```
     * @param round
     * @category query
     */
    round(round) {
        this.query.round = round;
        return this;
    }
    /**
     * Specify the next page of results.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const maxResults = 20;
     *
     * const accountAssetsPage1 = await indexerClient
     *        .lookupAccountAppLocalStates(address)
     *        .limit(maxResults)
     *        .do();
     *
     * const accountAssetsPage2 = await indexerClient
     *        .lookupAccountAppLocalStates(address)
     *        .limit(maxResults)
     *        .next(accountAssetsPage1["next-token"])
     *        .do();
     * ```
     * @param nextToken - provided by the previous results.
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountAssets = await indexerClient
     *        .lookupAccountAppLocalStates(address)
     *        .includeAll(false)
     *        .do();
     * ```
     * @param value
     * @category query
     */
    includeAll(value = true) {
        this.query['include-all'] = value;
        return this;
    }
    /**
     * Specify an applicationID to search for.
     *
     * #### Example
     * ```typescript
     * const applicationID = 163650;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountApplications = await indexerClient
     *        .lookupAccountAppLocalStates(address)
     *        .applicationID(applicationID)
     *        .do();
     * ```
     * @param index - the applicationID
     * @category query
     */
    applicationID(index) {
        this.query['application-id'] = index;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), ApplicationLocalStatesResponse);
    }
}

class LookupAccountCreatedApplications extends JSONRequest {
    /**
     * Returns application information created by the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)
     * @param account - The address of the account to look up.
     * @category GET
     */
    constructor(c, account) {
        super(c);
        this.account = account.toString();
    }
    /**
     * @returns `/v2/accounts/${account}/created-applications`
     */
    path() {
        return `/v2/accounts/${this.account}/created-applications`;
    }
    /**
     * Add a limit for filter.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const maxResults = 20;
     * const accountAssets = await indexerClient
     *        .lookupAccountCreatedApplications(address)
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit - maximum number of results to return.
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Specify round to filter with.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const targetBlock = 18309917;
     * const accountAssets = await indexerClient
     *        .lookupAccountCreatedApplications(address)
     *        .round(targetBlock)
     *        .do();
     * ```
     * @param round
     * @category query
     */
    round(round) {
        this.query.round = round;
        return this;
    }
    /**
     * Specify the next page of results.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const maxResults = 20;
     *
     * const accountAssetsPage1 = await indexerClient
     *        .lookupAccountCreatedApplications(address)
     *        .limit(maxResults)
     *        .do();
     *
     * const accountAssetsPage2 = await indexerClient
     *        .lookupAccountCreatedApplications(address)
     *        .limit(maxResults)
     *        .next(accountAssetsPage1["next-token"])
     *        .do();
     * ```
     * @param nextToken - provided by the previous results.
     * @category query
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountAssets = await indexerClient
     *        .lookupAccountCreatedApplications(address)
     *        .includeAll(false)
     *        .do();
     * ```
     * @param value
     * @category query
     */
    includeAll(value = true) {
        this.query['include-all'] = value;
        return this;
    }
    /**
     * Specify an applicationID to search for.
     *
     * #### Example
     * ```typescript
     * const applicationID = 163650;
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountApplications = await indexerClient
     *        .lookupAccountAppLocalStates(address)
     *        .applicationID(applicationID)
     *        .do();
     * ```
     * @param index - the applicationID
     * @category query
     */
    applicationID(index) {
        this.query['application-id'] = index;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), ApplicationsResponse);
    }
}

class LookupAssetByID extends JSONRequest {
    /**
     * Returns asset information of the queried asset.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)
     * @param index - The asset ID to look up.
     */
    constructor(c, index) {
        super(c);
        this.index = BigInt(index);
    }
    /**
     * @returns `/v2/assets/${index}`
     */
    path() {
        return `/v2/assets/${this.index}`;
    }
    /**
     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
     *
     * #### Example 1
     * ```typescript
     * const assetId = 163650;
     * const assetInfo = await indexerClient
     *        .lookupAssetByID(assetId)
     *        .includeAll(false)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const assetId = 163650;
     * const assetInfo = await indexerClient
     *        .lookupAssetByID(assetId)
     *        .includeAll()
     *        .do();
     * ```
     *
     * @param value - default true when called without passing a value
     * @category query
     */
    includeAll(value = true) {
        this.query['include-all'] = value;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), AssetResponse);
    }
}

class LookupApplications extends JSONRequest {
    /**
     * Returns information about the passed application.
     *
     * #### Example
     * ```typescript
     * const appId = 60553466;
     * const appInfo = await indexerClient.lookupApplications(appId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)
     * @param index - The ID of the application to look up.
     * @category GET
     */
    constructor(c, index) {
        super(c);
        this.index = BigInt(index);
    }
    /**
     * @returns `/v2/applications/${index}`
     */
    path() {
        return `/v2/applications/${this.index}`;
    }
    /**
     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
     *
     * #### Example 1
     * ```typescript
     * const appId = 60553466;
     * const appInfo = await indexerClient
     *        .lookupApplications(appId)
     *        .includeAll(false)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const appId = 60553466;
     * const appInfo = await indexerClient
     *        .lookupApplications(appId)
     *        .includeAll()
     *        .do();
     * ```
     *
     * @param value - default true when called without passing a value
     * @category query
     */
    includeAll(value = true) {
        this.query['include-all'] = value;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), ApplicationResponse);
    }
}

class LookupApplicationLogs extends JSONRequest {
    /**
     * Returns log messages generated by the passed in application.
     *
     * #### Example
     * ```typescript
     * const appId = 60553466;
     * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)
     * @param appID - The ID of the application which generated the logs.
     * @category GET
     */
    constructor(c, appID) {
        super(c);
        this.appID = BigInt(appID);
    }
    /**
     * @returns `/v2/applications/${appID}/logs`
     */
    path() {
        return `/v2/applications/${this.appID}/logs`;
    }
    /**
     * Limit results for pagination.
     *
     * #### Example
     * ```typescript
     * const maxResults = 20;
     * const appLogs = await indexerClient
     *        .lookupApplicationLogs(appId)
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit - maximum number of results to return.
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Include results at or after the specified min-round.
     *
     * #### Example
     * ```typescript
     * const minRound = 18309917;
     * const appLogs = await indexerClient
     *        .lookupApplicationLogs(appId)
     *        .minRound(minRound)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    minRound(round) {
        this.query['min-round'] = round;
        return this;
    }
    /**
     * Include results at or before the specified max-round.
     *
     * #### Example
     * ```typescript
     * const maxRound = 18309917;
     * const appLogs = await indexerClient
     *        .lookupApplicationLogs(appId)
     *        .maxRound(maxRound)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    maxRound(round) {
        this.query['max-round'] = round;
        return this;
    }
    /**
     * The next page of results.
     *
     * #### Example
     * ```typescript
     * const maxResults = 25;
     *
     * const appLogsPage1 = await indexerClient
     *        .lookupApplicationLogs(appId)
     *        .limit(maxResults)
     *        .do();
     *
     * const appLogsPage2 = await indexerClient
     *        .lookupApplicationLogs(appId)
     *        .limit(maxResults)
     *        .nextToken(appLogsPage1["next-token"])
     *        .do();
     * ```
     *
     * @param nextToken - provided by the previous results.
     * @category query
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Only include transactions with this sender address.
     *
     * #### Example
     * ```typescript
     * const sender = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const appLogs = await indexerClient
     *        .lookupApplicationLogs(appId)
     *        .sender(sender)
     *        .do();
     * ```
     *
     * @param senderAddress
     * @category query
     */
    sender(senderAddress) {
        this.query['sender-address'] = senderAddress;
        return this;
    }
    /**
     * Lookup the specific transaction by ID.
     *
     * #### Example
     * ```typescript
     * const txId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
     * const appLogs = await indexerClient
     *        .lookupApplicationLogs(appId)
     *        .txid(txId)
     *        .do();
     * ```
     *
     * @param txid
     * @category query
     */
    txid(txid) {
        this.query.txid = txid;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), ApplicationLogsResponse);
    }
}

class LookupApplicationBoxByIDandName extends JSONRequest {
    /**
     * Returns information about indexed application boxes.
     *
     * #### Example
     * ```typescript
     * const boxName = Buffer.from("foo");
     * const boxResponse = await indexerClient
     *        .LookupApplicationBoxByIDandName(1234, boxName)
     *        .do();
     * const boxValue = boxResponse.value;
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)
     * @oaram index - application index.
     * @category GET
     */
    constructor(c, index, boxName) {
        super(c);
        this.index = BigInt(index);
        // Encode query in base64 format and append the encoding prefix.
        const encodedName = bytesToBase64(boxName);
        this.query.name = encodeURI(`b64:${encodedName}`);
    }
    /**
     * @returns `/v2/applications/${index}/box`
     */
    path() {
        return `/v2/applications/${this.index}/box`;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), Box);
    }
}

/**
 * Returns information about indexed accounts.
 *
 * #### Example
 * ```typescript
 * const accounts = await indexerClient.searchAccounts().do();
 * ```
 *
 * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)
 * @category GET
 */
class SearchAccounts extends JSONRequest {
    /**
     * @returns `/v2/accounts`
     */
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/v2/accounts';
    }
    /**
     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
     *
     * #### Example 1
     * ```typescript
     * const minBalance = 300000;
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .currencyGreaterThan(minBalance - 1)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const assetID = 163650;
     * const minBalance = 300000;
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .assetID(assetID)
     *        .currencyGreaterThan(minBalance - 1)
     *        .do();
     * ```
     * @remarks
     * If you are looking for accounts with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude accounts with a 0 amount.
     *
     * @param greater
     * @category query
     */
    currencyGreaterThan(greater) {
        // We convert the following to a string for now to correctly include zero values in request parameters.
        this.query['currency-greater-than'] = greater.toString();
        return this;
    }
    /**
     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
     *
     * #### Example 1
     * ```typescript
     * const maxBalance = 500000;
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .currencyLessThan(maxBalance + 1)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const assetID = 163650;
     * const maxBalance = 500000;
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .assetID(assetID)
     *        .currencyLessThan(maxBalance + 1)
     *        .do();
     * ```
     *
     * @param lesser
     * @category query
     */
    currencyLessThan(lesser) {
        this.query['currency-less-than'] = lesser;
        return this;
    }
    /**
     * Maximum number of results to return.
     *
     * #### Example
     * ```typescript
     * const maxResults = 25;
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Asset ID to filter with.
     *
     * #### Example
     * ```typescript
     * const assetID = 163650;
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .assetID(assetID)
     *        .do();
     * ```
     *
     * @param id
     * @category query
     */
    assetID(id) {
        this.query['asset-id'] = id;
        return this;
    }
    /**
     * The next page of results.
     *
     * #### Example
     * ```typescript
     * const maxResults = 25;
     *
     * const accountsPage1 = await indexerClient
     *        .searchAccounts()
     *        .limit(maxResults)
     *        .do();
     *
     * const accountsPage2 = await indexerClient
     *        .searchAccounts()
     *        .limit(maxResults)
     *        .nextToken(accountsPage1["next-token"])
     *        .do();
     * ```
     *
     * @param nextToken - provided by the previous results
     * @category query
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Include results for the specified round.
     *
     * #### Example
     * ```typescript
     * const targetBlock = 18309917;
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .round(targetBlock)
     *        .do();
     * ```
     * @remarks For performance reasons, this parameter may be disabled on some configurations.
     * @param round
     * @category query
     */
    round(round) {
        this.query.round = round;
        return this;
    }
    /**
     * Include accounts that use this spending key.
     *
     * #### Example
     * ```typescript
     * const authAddr = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .authAddr(authAddr)
     *        .do();
     * ```
     *
     * @param authAddr
     */
    authAddr(authAddr) {
        this.query['auth-addr'] = authAddr.toString();
        return this;
    }
    /**
     * Filter for this application.
     *
     * #### Example
     * ```typescript
     * const appId = 60553466;
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .applicationID(appId)
     *        .do();
     * ```
     *
     * @param applicationID
     * @category query
     */
    applicationID(applicationID) {
        this.query['application-id'] = applicationID;
        return this;
    }
    /**
     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
     *
     * #### Example 1
     * ```typescript
     * const assetId = 163650;
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .includeAll(false)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const assetId = 163650;
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .includeAll()
     *        .do();
     * ```
     *
     * @param value - default true when called without passing a value
     * @category query
     */
    includeAll(value = true) {
        this.query['include-all'] = value;
        return this;
    }
    /**
     * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.
     *
     * #### Example 1
     * ```typescript
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .exclude("all")
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const accounts = await indexerClient
     *        .searchAccounts()
     *        .exclude("assets,created-assets")
     *        .do();
     * ```
     * @remarks By default, it behaves as exclude=none
     * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`
     * @category query
     */
    exclude(exclude) {
        this.query.exclude = exclude;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), AccountsResponse);
    }
}

/**
 * Returns information about indexed block headers.
 *
 * #### Example
 * ```typescript
 * const bhs = await indexerClient.searchForBlockHeaders().do();
 * ```
 *
 * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)
 * @category GET
 */
class SearchForBlockHeaders extends JSONRequest {
    /**
     * @returns `/v2/block-headers`
     */
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/v2/block-headers';
    }
    /**
     * Accounts marked as absent in the block header's participation updates.
     *
     * #### Example
     * ```typescript
     * const address1 = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const address2 = "4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4";
     * const bhs = await indexerClient
     *        .searchForBlockHeaders()
     *        .absent([address1,address2])
     *        .do();
     * ```
     *
     * @param absent - a comma separated list of addresses
     * @category query
     */
    absent(absent) {
        this.query.absent = absent;
        return this;
    }
    /**
     * Include results after the given time.
     *
     * #### Example
     * ```typescript
     * const afterTime = "2022-10-21T00:00:11.55Z";
     * const bhs = await indexerClient
     *        .searchForBlockHeaders()
     *        .afterTime(afterTime)
     *        .do();
     * ```
     *
     * @param after - rfc3339 string or Date object
     * @category query
     */
    afterTime(after) {
        this.query['after-time'] =
            after instanceof Date ? after.toISOString() : after;
        return this;
    }
    /**
     * Include results before the given time.
     *
     * #### Example
     * ```typescript
     * const beforeTime = "2022-02-02T20:20:22.02Z";
     * const bhs = await indexerClient
     *        .searchForBlockHeaders()
     *        .beforeTime(beforeTime)
     *        .do();
     * ```
     *
     * @param before - rfc3339 string or Date object
     * @category query
     */
    beforeTime(before) {
        this.query['before-time'] =
            before instanceof Date ? before.toISOString() : before;
        return this;
    }
    /**
     * Accounts marked as expired in the block header's participation updates.
     *
     * #### Example
     * ```typescript
     * const address1 = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const address2 = "4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4";
     * const bhs = await indexerClient
     *        .searchForBlockHeaders()
     *        .expired([address1,address2])
     *        .do();
     * ```
     *
     * @param expired - - a comma separated list of addresses
     * @category query
     */
    expired(expired) {
        this.query.expired = expired;
        return this;
    }
    /**
     * Maximum number of results to return.
     *
     * #### Example
     * ```typescript
     * const maxResults = 25;
     * const bhs = await indexerClient
     *        .searchForBlockHeaders()
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Include results at or before the specified max-round.
     *
     * #### Example
     * ```typescript
     * const maxRound = 18309917;
     * const bhs = await indexerClient
     *        .searchForBlockHeaders()
     *        .maxRound(maxRound)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    maxRound(round) {
        this.query['max-round'] = round;
        return this;
    }
    /**
     * Include results at or after the specified min-round.
     *
     * #### Example
     * ```typescript
     * const minRound = 18309917;
     * const bhs = await indexerClient
     *        .searchForBlockHeaders()
     *        .minRound(minRound)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    minRound(round) {
        this.query['min-round'] = round;
        return this;
    }
    /**
     * The next page of results.
     *
     * #### Example
     * ```typescript
     * const maxResults = 25;
     *
     * const bh1 = await indexerClient
     *        .searchForBlockHeaders()
     *        .limit(maxResults)
     *        .do();
     *
     * const bh2 = await indexerClient
     *        .searchForBlockHeaders()
     *        .limit(maxResults)
     *        .nextToken(bh1["next-token"])
     *        .do();
     * ```
     *
     * @param nextToken - provided by the previous results
     * @category query
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Accounts marked as proposer in the block header's participation updates.
     *
     * #### Example
     * ```typescript
     * const address1 = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const address2 = "4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4";
     * const bhs = await indexerClient
     *        .searchForBlockHeaders()
     *        .proposers([address1,address2])
     *        .do();
     * ```
     *
     * @param proposers - a comma separated list of addresses
     * @category query
     */
    proposers(proposers) {
        this.query.proposers = proposers;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), BlockHeadersResponse);
    }
}

/**
 * Returns information about indexed transactions.
 *
 * #### Example
 * ```typescript
 * const txns = await indexerClient.searchForTransactions().do();
 * ```
 *
 * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)
 * @category GET
 */
class SearchForTransactions extends JSONRequest {
    /**
     * @returns `/v2/transactions`
     */
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/v2/transactions';
    }
    /**
     * Specifies a prefix which must be contained in the note field.
     *
     * #### Example
     * ```typescript
     * const notePrefixBase64Encoded = "Y3JlYXRl";
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .notePrefix(notePrefixBase64Encoded)
     *        .do();
     * ```
     *
     * @param prefix - base64 string or uint8array
     * @category query
     */
    notePrefix(prefix) {
        this.query['note-prefix'] = base64StringFunnel(prefix);
        return this;
    }
    /**
     * Type of transaction to filter with.
     *
     * #### Example
     * ```typescript
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .txType("keyreg")
     *        .do();
     * ```
     *
     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`
     * @category query
     */
    txType(type) {
        this.query['tx-type'] = type;
        return this;
    }
    /**
     * Type of signature to filter with.
     * - sig: Standard
     * - msig: MultiSig
     * - lsig: LogicSig
     *
     * #### Example
     * ```typescript
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .sigType("sig")
     *        .do();
     * ```
     *
     * @param type - one of `sig`, `msig`, `lsig`
     * @category query
     */
    sigType(type) {
        this.query['sig-type'] = type;
        return this;
    }
    /**
     * Lookup the specific transaction by ID.
     *
     * #### Example
     * ```typescript
     * const txId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .txid(txId)
     *        .do();
     * ```
     * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`
     * @param txid
     * @category query
     */
    txid(txid) {
        this.query.txid = txid;
        return this;
    }
    /**
     * Include results for the specified round.
     *
     * #### Example
     * ```typescript
     * const targetBlock = 18309917;
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .round(targetBlock)
     *        .do();
     * ```
     * @remarks Alternatively, use `indexerClient.lookupBlock(targetBlock).do()`
     * @param round
     * @category query
     */
    round(round) {
        this.query.round = round;
        return this;
    }
    /**
     * Include results at or after the specified min-round.
     *
     * #### Example
     * ```typescript
     * const minRound = 18309917;
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .minRound(minRound)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    minRound(round) {
        this.query['min-round'] = round;
        return this;
    }
    /**
     * Include results at or before the specified max-round.
     *
     * #### Example
     * ```typescript
     * const maxRound = 18309917;
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .maxRound(maxRound)
     *        .do();
     * ```
     *
     * @param round
     * @category query
     */
    maxRound(round) {
        this.query['max-round'] = round;
        return this;
    }
    /**
     * Asset ID to filter with.
     *
     * #### Example
     * ```typescript
     * const assetID = 163650;
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .assetID(assetID)
     *        .do();
     * ```
     * @remarks Alternatively, use `indexerClient.lookupAssetTransactions(assetId).do()`
     * @param id
     * @category query
     */
    assetID(id) {
        this.query['asset-id'] = id;
        return this;
    }
    /**
     * Maximum number of results to return.
     *
     * #### Example
     * ```typescript
     * const maxResults = 25;
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Include results before the given time.
     *
     * #### Example
     * ```typescript
     * const beforeTime = "2022-02-02T20:20:22.02Z";
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .beforeTime(beforeTime)
     *        .do();
     * ```
     *
     * @param before - rfc3339 string or Date object
     * @category query
     */
    beforeTime(before) {
        this.query['before-time'] =
            before instanceof Date ? before.toISOString() : before;
        return this;
    }
    /**
     * Include results after the given time.
     *
     * #### Example
     * ```typescript
     * const afterTime = "2022-10-21T00:00:11.55Z";
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .afterTime(afterTime)
     *        .do();
     * ```
     *
     * @param after - rfc3339 string or Date object
     * @category query
     */
    afterTime(after) {
        this.query['after-time'] =
            after instanceof Date ? after.toISOString() : after;
        return this;
    }
    /**
     * Combined with address, defines what address to filter on, as string.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const role = "freeze-target";
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .address(address)
     *        .addressRole(role)
     *        .do();
     * ```
     *
     * @param role - one of `sender`, `receiver`, `freeze-target`
     * @category query
     */
    addressRole(role) {
        this.query['address-role'] = role;
        return this;
    }
    /**
     * Only include transactions with this address in one of the transaction fields.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .address(address)
     *        .do();
     * ```
     * @remarks Alternatively, use `indexerClient.lookupAccountTransactions(address).do()`
     * @param address
     * @category query
     */
    address(address) {
        this.query.address = address.toString();
        return this;
    }
    /**
     * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.
     *
     * #### Example
     * ```typescript
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .excludeCloseTo(true)
     *        .do();
     * ```
     *
     * @param exclude
     * @category query
     */
    excludeCloseTo(exclude) {
        this.query['exclude-close-to'] = exclude;
        return this;
    }
    /**
     * The next page of results.
     *
     * #### Example
     * ```typescript
     * const maxResults = 25;
     *
     * const txnsPage1 = await indexerClient
     *        .searchForTransactions()
     *        .limit(maxResults)
     *        .do();
     *
     * const txnsPage2 = await indexerClient
     *        .searchForTransactions()
     *        .limit(maxResults)
     *        .nextToken(txnsPage1["next-token"])
     *        .do();
     * ```
     *
     * @param nextToken - provided by the previous results
     * @category query
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Whether or not to include rekeying transactions.
     *
     * #### Example
     * ```typescript
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .rekeyTo(false)
     *        .do();
     * ```
     *
     * @param rekeyTo
     * @category query
     */
    rekeyTo(rekeyTo) {
        this.query['rekey-to'] = rekeyTo;
        return this;
    }
    /**
     * Filter for this application.
     *
     * #### Example
     * ```typescript
     * const appId = 60553466;
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .applicationID(appId)
     *        .do();
     * ```
     *
     * @param applicationID
     * @category query
     */
    applicationID(applicationID) {
        this.query['application-id'] = applicationID;
        return this;
    }
    /**
     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
     *
     * #### Example 1
     * ```typescript
     * const minBalance = 300000;
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .currencyGreaterThan(minBalance - 1)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const assetID = 163650;
     * const minBalance = 300000;
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .assetID(assetID)
     *        .currencyGreaterThan(minBalance - 1)
     *        .do();
     * ```
     *
     * @param greater
     * @category query
     */
    currencyGreaterThan(greater) {
        // We convert the following to a string for now to correctly include zero values in request parameters.
        this.query['currency-greater-than'] = greater.toString();
        return this;
    }
    /**
     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
     *
     * #### Example 1
     * ```typescript
     * const maxBalance = 500000;
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .currencyLessThan(maxBalance + 1)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const assetID = 163650;
     * const maxBalance = 500000;
     * const txns = await indexerClient
     *        .searchForTransactions()
     *        .assetID(assetID)
     *        .currencyLessThan(maxBalance + 1)
     *        .do();
     * ```
     *
     * @param lesser
     * @category query
     */
    currencyLessThan(lesser) {
        this.query['currency-less-than'] = lesser;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), TransactionsResponse);
    }
}

/**
 * Returns information about indexed assets.
 *
 * #### Example
 * ```typescript
 * const assets = await indexerClient.searchForAssets().do();
 * ```
 *
 * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)
 * @category GET
 */
class SearchForAssets extends JSONRequest {
    /**
     * @returns `/v2/assets`
     */
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/v2/assets';
    }
    /**
     * Limit results for pagination.
     *
     * #### Example
     * ```typescript
     * const maxResults = 20;
     * const assets = await indexerClient
     *        .searchForAssets()
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit - maximum number of results to return.
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Filter just assets with the given creator address.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const assets = await indexerClient
     *        .searchForAssets()
     *        .creator(address)
     *        .do();
     * ```
     *
     * @param creator
     * @category query
     */
    creator(creator) {
        this.query.creator = creator.toString();
        return this;
    }
    /**
     * Filter just assets with the given name.
     *
     * #### Example
     * ```typescript
     * const name = "Test Token";
     * const assets = await indexerClient
     *        .searchForAssets()
     *        .name(name)
     *        .do();
     * ```
     *
     * @param name
     * @category query
     */
    name(name) {
        this.query.name = name;
        return this;
    }
    /**
     * Filter just assets with the given unit.
     *
     * #### Example
     * ```typescript
     * const unit = "test";
     * const assets = await indexerClient
     *        .searchForAssets()
     *        .unit(unit)
     *        .do();
     * ```
     *
     * @param unit
     * @category query
     */
    unit(unit) {
        this.query.unit = unit;
        return this;
    }
    /**
     * Asset ID for filter, as int.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const assets = await indexerClient
     *        .searchForAssets()
     *        .index(assetId)
     *        .do();
     * ```
     * @remarks Alternatively, use `indexerClient.lookupAssetByID(assetId).do();`
     * @param index
     * @category query
     */
    index(index) {
        this.query['asset-id'] = index;
        return this;
    }
    /**
     * Specify the next page of results.
     *
     * #### Example
     * ```typescript
     * const maxResults = 20;
     *
     * const assetsPage1 = await indexerClient
     *        .searchForAssets()
     *        .limit(maxResults)
     *        .do();
     *
     * const assetsPage2 = await indexerClient
     *        .searchForAssets()
     *        .limit(maxResults)
     *        .nextToken(assetsPage1["next-token"])
     *        .do();
     * ```
     * @param nextToken - provided by the previous results.
     * @category query
     */
    nextToken(nextToken) {
        this.query.next = nextToken;
        return this;
    }
    /**
     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
     *
     * #### Example 1
     * ```typescript
     * const assets = await indexerClient
     *        .searchForAssets()
     *        .includeAll(false)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const assets = await indexerClient
     *        .searchForAssets()
     *        .includeAll()
     *        .do();
     * ```
     *
     * @param value - default true when called without passing a value
     * @category query
     */
    includeAll(value = true) {
        this.query['include-all'] = value;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), AssetsResponse);
    }
}

/**
 * Returns information about indexed applications.
 *
 * #### Example
 * ```typescript
 * const apps = await indexerClient.searchForApplications().do();
 * ```
 *
 * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)
 * @category GET
 */
class SearchForApplications extends JSONRequest {
    /**
     * @returns `/v2/applications`
     */
    // eslint-disable-next-line class-methods-use-this
    path() {
        return '/v2/applications';
    }
    /**
     * Application ID for filter, as int
     *
     * #### Example
     * ```typescript
     * const appId = 60553466;
     * const apps = await indexerClient
     *        .searchForApplications()
     *        .index(appId)
     *        .do();
     * ```
     * @remarks Alternatively, use `indexerClient.lookupApplications(appId).do()`
     * @param index
     * @category query
     */
    index(index) {
        this.query['application-id'] = index;
        return this;
    }
    /**
     * Creator for filter, as string
     *
     * #### Example
     * ```typescript
     * const creator = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const apps = await indexerClient
     *        .searchForApplications()
     *        .creator(creator)
     *        .do();
     * ```
     * @param creator
     * @category query
     */
    creator(creator) {
        this.query.creator = creator.toString();
        return this;
    }
    /**
     * Specify the next page of results.
     *
     * #### Example
     * ```typescript
     * const maxResults = 20;
     *
     * const appsPage1 = await indexerClient
     *        .searchForApplications()
     *        .limit(maxResults)
     *        .do();
     *
     * const appsPage2 = await indexerClient
     *        .searchForApplications()
     *        .limit(maxResults)
     *        .nextToken(appsPage1["next-token"])
     *        .do();
     * ```
     * @param nextToken - provided by the previous results.
     * @category query
     */
    nextToken(next) {
        this.query.next = next;
        return this;
    }
    /**
     * Limit results for pagination.
     *
     * #### Example
     * ```typescript
     * const maxResults = 20;
     * const apps = await indexerClient
     *        .searchForApplications()
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit - maximum number of results to return.
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    /**
     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
     *
     * #### Example 1
     * ```typescript
     * const apps = await indexerClient
     *        .searchForApplications()
     *        .includeAll(false)
     *        .do();
     * ```
     *
     * #### Example 2
     * ```typescript
     * const apps = await indexerClient
     *        .searchForApplications()
     *        .includeAll()
     *        .do();
     * ```
     *
     * @param value - default true when called without passing a value
     * @category query
     */
    includeAll(value = true) {
        this.query['include-all'] = value;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), ApplicationsResponse);
    }
}

class SearchForApplicationBoxes extends JSONRequest {
    /**
     * Returns information about indexed application boxes.
     *
     * #### Example
     * ```typescript
     * const maxResults = 20;
     * const appID = 1234;
     *
     * const responsePage1 = await indexerClient
     *        .searchForApplicationBoxes(appID)
     *        .limit(maxResults)
     *        .do();
     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);
     *
     * const responsePage2 = await indexerClient
     *        .searchForApplicationBoxes(appID)
     *        .limit(maxResults)
     *        .nextToken(responsePage1.nextToken)
     *        .do();
     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)
     * @oaram index - application index.
     * @category GET
     */
    constructor(c, index) {
        super(c);
        this.index = BigInt(index);
    }
    /**
     * @returns `/v2/applications/${index}/boxes`
     */
    path() {
        return `/v2/applications/${this.index}/boxes`;
    }
    /**
     * Specify the next page of results.
     *
     * #### Example
     * ```typescript
     * const maxResults = 20;
     * const appID = 1234;
     *
     * const responsePage1 = await indexerClient
     *        .searchForApplicationBoxes(appID)
     *        .limit(maxResults)
     *        .do();
     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);
     *
     * const responsePage2 = await indexerClient
     *        .searchForApplicationBoxes(appID)
     *        .limit(maxResults)
     *        .nextToken(responsePage1.nextToken)
     *        .do();
     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);
     * ```
     * @param nextToken - provided by the previous results.
     * @category query
     */
    nextToken(next) {
        this.query.next = next;
        return this;
    }
    /**
     * Limit results for pagination.
     *
     * #### Example
     * ```typescript
     * const maxResults = 20;
     * const boxesResponse = await indexerClient
     *        .searchForApplicationBoxes(1234)
     *        .limit(maxResults)
     *        .do();
     * ```
     *
     * @param limit - maximum number of results to return.
     * @category query
     */
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    // eslint-disable-next-line class-methods-use-this
    prepare(response) {
        return decodeJSON(response.getJSONText(), BoxesResponse);
    }
}

/**
 * The Indexer provides a REST API interface of API calls to support searching the Algorand Blockchain.
 *
 * The Indexer REST APIs retrieve the blockchain data from a PostgreSQL compatible database that must be populated.
 *
 * This database is populated using the same indexer instance or a separate instance of the indexer which must connect to the algod process of a running Algorand node to read block data.
 *
 * This node must also be an Archival node to make searching the entire blockchain possible.
 *
 * #### Relevant Information
 * [Learn more about Indexer](https://developer.algorand.org/docs/get-details/indexer/)
 *
 * [Run Indexer in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/#algod-indexer-and-kmd-rest-endpoints)
 */
class IndexerClient extends ServiceClient {
    /**
     * Create an IndexerClient from
     * * either a token, baseServer, port, and optional headers
     * * or a base client server for interoperability with external dApp wallets
     *
     * #### Example
     * ```typescript
     * const token  = "";
     * const server = "http://localhost";
     * const port   = 8980;
     * const indexerClient = new algosdk.Indexer(token, server, port);
     * ```
     * @remarks
     * The above configuration is for a sandbox private network.
     * For applications on production, you are encouraged to run your own node with indexer, or use an Algorand REST API provider with a dedicated API key.
     *
     * @param tokenOrBaseClient - The API token for the Indexer API
     * @param baseServer - REST endpoint
     * @param port - Port number if specifically configured by the server
     * @param headers - Optional headers
     */
    constructor(tokenOrBaseClient, baseServer = 'http://127.0.0.1', port = 8080, headers = {}) {
        super('X-Indexer-API-Token', tokenOrBaseClient, baseServer, port, headers);
    }
    /**
     * Returns the health object for the service.
     * Returns 200 if healthy.
     *
     * #### Example
     * ```typescript
     * const health = await indexerClient.makeHealthCheck().do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)
     * @category GET
     */
    makeHealthCheck() {
        return new MakeHealthCheck(this.c);
    }
    /**
     * Returns the list of accounts who hold the given asset and their balance.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)
     * @param index - The asset ID to look up.
     * @category GET
     */
    lookupAssetBalances(index) {
        return new LookupAssetBalances(this.c, index);
    }
    /**
     * Returns transactions relating to the given asset.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)
     * @param index - The asset ID to look up.
     * @category GET
     */
    lookupAssetTransactions(index) {
        return new LookupAssetTransactions(this.c, index);
    }
    /**
     * Returns transactions relating to the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)
     * @param account - The address of the account.
     * @category GET
     */
    lookupAccountTransactions(account) {
        return new LookupAccountTransactions(this.c, account);
    }
    /**
     * Returns the block for the passed round.
     *
     * #### Example
     * ```typescript
     * const targetBlock = 18309917;
     * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)
     * @param round - The number of the round to look up.
     * @category GET
     */
    lookupBlock(round) {
        return new LookupBlock(this.c, round);
    }
    /**
     * Returns information about the given transaction.
     *
     * #### Example
     * ```typescript
     * const txnId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
     * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)
     * @param txID - The ID of the transaction to look up.
     * @category GET
     */
    lookupTransactionByID(txID) {
        return new LookupTransactionByID(this.c, txID);
    }
    /**
     * Returns information about the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountInfo = await indexerClient.lookupAccountByID(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)
     * @param account - The address of the account to look up.
     * @category GET
     */
    lookupAccountByID(account) {
        return new LookupAccountByID(this.c, account);
    }
    /**
     * Returns asset about the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountAssets = await indexerClient.lookupAccountAssets(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)
     * @param account - The address of the account to look up.
     * @category GET
     */
    lookupAccountAssets(account) {
        return new LookupAccountAssets(this.c, account);
    }
    /**
     * Returns asset information created by the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)
     * @param account - The address of the account to look up.
     * @category GET
     */
    lookupAccountCreatedAssets(account) {
        return new LookupAccountCreatedAssets(this.c, account);
    }
    /**
     * Returns application local state about the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)
     * @param account - The address of the account to look up.
     * @category GET
     */
    lookupAccountAppLocalStates(account) {
        return new LookupAccountAppLocalStates(this.c, account);
    }
    /**
     * Returns application information created by the given account.
     *
     * #### Example
     * ```typescript
     * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
     * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)
     * @param account - The address of the account to look up.
     * @category GET
     */
    lookupAccountCreatedApplications(account) {
        return new LookupAccountCreatedApplications(this.c, account);
    }
    /**
     * Returns information about the passed asset.
     *
     * #### Example
     * ```typescript
     * const assetId = 163650;
     * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)
     * @param index - The ID of the asset ot look up.
     * @category GET
     */
    lookupAssetByID(index) {
        return new LookupAssetByID(this.c, index);
    }
    /**
     * Returns information about the passed application.
     *
     * #### Example
     * ```typescript
     * const appId = 60553466;
     * const appInfo = await indexerClient.lookupApplications(appId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)
     * @param index - The ID of the application to look up.
     * @category GET
     */
    lookupApplications(index) {
        return new LookupApplications(this.c, index);
    }
    /**
     * Returns log messages generated by the passed in application.
     *
     * #### Example
     * ```typescript
     * const appId = 60553466;
     * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)
     * @param appID - The ID of the application which generated the logs.
     * @category GET
     */
    lookupApplicationLogs(appID) {
        return new LookupApplicationLogs(this.c, appID);
    }
    /**
     * Returns information about indexed accounts.
     *
     * #### Example
     * ```typescript
     * const accounts = await indexerClient.searchAccounts().do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)
     * @category GET
     */
    searchAccounts() {
        return new SearchAccounts(this.c);
    }
    /**
     * Returns information about indexed block headers.
     *
     * #### Example
     * ```typescript
     * const bhs = await indexerClient.searchForBlockHeaders().do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)
     * @category GET
     */
    searchForBlockHeaders() {
        return new SearchForBlockHeaders(this.c);
    }
    /**
     * Returns information about indexed transactions.
     *
     * #### Example
     * ```typescript
     * const txns = await indexerClient.searchForTransactions().do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)
     * @category GET
     */
    searchForTransactions() {
        return new SearchForTransactions(this.c);
    }
    /**
     * Returns information about indexed assets.
     *
     * #### Example
     * ```typescript
     * const assets = await indexerClient.searchForAssets().do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)
     * @category GET
     */
    searchForAssets() {
        return new SearchForAssets(this.c);
    }
    /**
     * Returns information about indexed applications.
     *
     * #### Example
     * ```typescript
     * const apps = await indexerClient.searchForApplications().do();
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)
     * @category GET
     */
    searchForApplications() {
        return new SearchForApplications(this.c);
    }
    /**
     * Returns information about indexed application boxes.
     *
     * #### Example
     * ```typescript
     * const maxResults = 20;
     * const appID = 1234;
     *
     * const responsePage1 = await indexerClient
     *        .searchForApplicationBoxes(appID)
     *        .limit(maxResults)
     *        .do();
     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);
     *
     * const responsePage2 = await indexerClient
     *        .searchForApplicationBoxes(appID)
     *        .limit(maxResults)
     *        .nextToken(responsePage1.nextToken)
     *        .do();
     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)
     * @param appID - The ID of the application with boxes.
     * @category GET
     */
    searchForApplicationBoxes(appID) {
        return new SearchForApplicationBoxes(this.c, appID);
    }
    /**
     * Returns information about the application box given its name.
     *
     * #### Example
     * ```typescript
     * const boxName = Buffer.from("foo");
     * const boxResponse = await indexerClient
     *        .LookupApplicationBoxByIDandName(1234, boxName)
     *        .do();
     * const boxValue = boxResponse.value;
     * ```
     *
     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)
     * @param appID - The ID of the application with boxes.
     * @category GET
     */
    lookupApplicationBoxByIDandName(appID, boxName) {
        return new LookupApplicationBoxByIDandName(this.c, appID, boxName);
    }
}

/**
 * Wait until a transaction has been confirmed or rejected by the network, or
 * until 'waitRounds' number of rounds have passed.
 * @param client - An Algodv2 client
 * @param txid - The ID of the transaction to wait for.
 * @param waitRounds - The maximum number of rounds to wait for.
 * @returns A promise that, upon success, will resolve to the output of the
 *   `pendingTransactionInformation` call for the confirmed transaction.
 */
async function waitForConfirmation(client, txid, waitRounds) {
    // Wait until the transaction is confirmed or rejected, or until 'waitRounds'
    // number of rounds have passed.
    const status = await client.status().do();
    if (typeof status === 'undefined') {
        throw new Error('Unable to get node status');
    }
    const startRound = status.lastRound + BigInt(1);
    const stopRound = startRound + BigInt(waitRounds);
    let currentRound = startRound;
    /* eslint-disable no-await-in-loop */
    while (currentRound < stopRound) {
        let poolError = false;
        try {
            const pendingInfo = await client.pendingTransactionInformation(txid).do();
            if (pendingInfo.confirmedRound) {
                // Got the completed Transaction
                return pendingInfo;
            }
            if (pendingInfo.poolError) {
                // If there was a pool error, then the transaction has been rejected
                poolError = true;
                throw new Error(`Transaction Rejected: ${pendingInfo.poolError}`);
            }
        }
        catch (err) {
            // Ignore errors from PendingTransactionInformation, since it may return 404 if the algod
            // instance is behind a load balancer and the request goes to a different algod than the
            // one we submitted the transaction to
            if (poolError) {
                // Rethrow error only if it's because the transaction was rejected
                throw err;
            }
        }
        await client.statusAfterBlock(currentRound).do();
        currentRound += BigInt(1);
    }
    /* eslint-enable no-await-in-loop */
    throw new Error(`Transaction not confirmed after ${waitRounds} rounds`);
}

/**
 * bigIntToBytes converts a BigInt to a big-endian Uint8Array for encoding.
 * @param bi - The bigint to convert.
 * @param size - The size of the resulting byte array.
 * @returns A byte array containing the big-endian encoding of the input bigint
 */
function bigIntToBytes(bi, size) {
    let hex = bi.toString(16);
    // Pad the hex with zeros so it matches the size in bytes
    if (hex.length !== size * 2) {
        hex = hex.padStart(size * 2, '0');
    }
    const byteArray = new Uint8Array(hex.length / 2);
    for (let i = 0, j = 0; i < hex.length / 2; i++, j += 2) {
        byteArray[i] = parseInt(hex.slice(j, j + 2), 16);
    }
    return byteArray;
}
/**
 * bytesToBigInt produces a bigint from a binary representation.
 *
 * @param bytes - The Uint8Array to convert.
 * @returns The bigint that was encoded in the input data.
 */
function bytesToBigInt(bytes) {
    let res = BigInt(0);
    const buf = new DataView(bytes.buffer, bytes.byteOffset);
    for (let i = 0; i < bytes.length; i++) {
        res = BigInt(Number(buf.getUint8(i))) + res * BigInt(256);
    }
    return res;
}

/**
 * generateAccount returns a new Algorand address and its corresponding secret key
 */
function generateAccount() {
    const keys = keyPair();
    const addr = new Address(keys.publicKey);
    return { addr, sk: keys.secretKey };
}

const english = [
    'abandon',
    'ability',
    'able',
    'about',
    'above',
    'absent',
    'absorb',
    'abstract',
    'absurd',
    'abuse',
    'access',
    'accident',
    'account',
    'accuse',
    'achieve',
    'acid',
    'acoustic',
    'acquire',
    'across',
    'act',
    'action',
    'actor',
    'actress',
    'actual',
    'adapt',
    'add',
    'addict',
    'address',
    'adjust',
    'admit',
    'adult',
    'advance',
    'advice',
    'aerobic',
    'affair',
    'afford',
    'afraid',
    'again',
    'age',
    'agent',
    'agree',
    'ahead',
    'aim',
    'air',
    'airport',
    'aisle',
    'alarm',
    'album',
    'alcohol',
    'alert',
    'alien',
    'all',
    'alley',
    'allow',
    'almost',
    'alone',
    'alpha',
    'already',
    'also',
    'alter',
    'always',
    'amateur',
    'amazing',
    'among',
    'amount',
    'amused',
    'analyst',
    'anchor',
    'ancient',
    'anger',
    'angle',
    'angry',
    'animal',
    'ankle',
    'announce',
    'annual',
    'another',
    'answer',
    'antenna',
    'antique',
    'anxiety',
    'any',
    'apart',
    'apology',
    'appear',
    'apple',
    'approve',
    'april',
    'arch',
    'arctic',
    'area',
    'arena',
    'argue',
    'arm',
    'armed',
    'armor',
    'army',
    'around',
    'arrange',
    'arrest',
    'arrive',
    'arrow',
    'art',
    'artefact',
    'artist',
    'artwork',
    'ask',
    'aspect',
    'assault',
    'asset',
    'assist',
    'assume',
    'asthma',
    'athlete',
    'atom',
    'attack',
    'attend',
    'attitude',
    'attract',
    'auction',
    'audit',
    'august',
    'aunt',
    'author',
    'auto',
    'autumn',
    'average',
    'avocado',
    'avoid',
    'awake',
    'aware',
    'away',
    'awesome',
    'awful',
    'awkward',
    'axis',
    'baby',
    'bachelor',
    'bacon',
    'badge',
    'bag',
    'balance',
    'balcony',
    'ball',
    'bamboo',
    'banana',
    'banner',
    'bar',
    'barely',
    'bargain',
    'barrel',
    'base',
    'basic',
    'basket',
    'battle',
    'beach',
    'bean',
    'beauty',
    'because',
    'become',
    'beef',
    'before',
    'begin',
    'behave',
    'behind',
    'believe',
    'below',
    'belt',
    'bench',
    'benefit',
    'best',
    'betray',
    'better',
    'between',
    'beyond',
    'bicycle',
    'bid',
    'bike',
    'bind',
    'biology',
    'bird',
    'birth',
    'bitter',
    'black',
    'blade',
    'blame',
    'blanket',
    'blast',
    'bleak',
    'bless',
    'blind',
    'blood',
    'blossom',
    'blouse',
    'blue',
    'blur',
    'blush',
    'board',
    'boat',
    'body',
    'boil',
    'bomb',
    'bone',
    'bonus',
    'book',
    'boost',
    'border',
    'boring',
    'borrow',
    'boss',
    'bottom',
    'bounce',
    'box',
    'boy',
    'bracket',
    'brain',
    'brand',
    'brass',
    'brave',
    'bread',
    'breeze',
    'brick',
    'bridge',
    'brief',
    'bright',
    'bring',
    'brisk',
    'broccoli',
    'broken',
    'bronze',
    'broom',
    'brother',
    'brown',
    'brush',
    'bubble',
    'buddy',
    'budget',
    'buffalo',
    'build',
    'bulb',
    'bulk',
    'bullet',
    'bundle',
    'bunker',
    'burden',
    'burger',
    'burst',
    'bus',
    'business',
    'busy',
    'butter',
    'buyer',
    'buzz',
    'cabbage',
    'cabin',
    'cable',
    'cactus',
    'cage',
    'cake',
    'call',
    'calm',
    'camera',
    'camp',
    'can',
    'canal',
    'cancel',
    'candy',
    'cannon',
    'canoe',
    'canvas',
    'canyon',
    'capable',
    'capital',
    'captain',
    'car',
    'carbon',
    'card',
    'cargo',
    'carpet',
    'carry',
    'cart',
    'case',
    'cash',
    'casino',
    'castle',
    'casual',
    'cat',
    'catalog',
    'catch',
    'category',
    'cattle',
    'caught',
    'cause',
    'caution',
    'cave',
    'ceiling',
    'celery',
    'cement',
    'census',
    'century',
    'cereal',
    'certain',
    'chair',
    'chalk',
    'champion',
    'change',
    'chaos',
    'chapter',
    'charge',
    'chase',
    'chat',
    'cheap',
    'check',
    'cheese',
    'chef',
    'cherry',
    'chest',
    'chicken',
    'chief',
    'child',
    'chimney',
    'choice',
    'choose',
    'chronic',
    'chuckle',
    'chunk',
    'churn',
    'cigar',
    'cinnamon',
    'circle',
    'citizen',
    'city',
    'civil',
    'claim',
    'clap',
    'clarify',
    'claw',
    'clay',
    'clean',
    'clerk',
    'clever',
    'click',
    'client',
    'cliff',
    'climb',
    'clinic',
    'clip',
    'clock',
    'clog',
    'close',
    'cloth',
    'cloud',
    'clown',
    'club',
    'clump',
    'cluster',
    'clutch',
    'coach',
    'coast',
    'coconut',
    'code',
    'coffee',
    'coil',
    'coin',
    'collect',
    'color',
    'column',
    'combine',
    'come',
    'comfort',
    'comic',
    'common',
    'company',
    'concert',
    'conduct',
    'confirm',
    'congress',
    'connect',
    'consider',
    'control',
    'convince',
    'cook',
    'cool',
    'copper',
    'copy',
    'coral',
    'core',
    'corn',
    'correct',
    'cost',
    'cotton',
    'couch',
    'country',
    'couple',
    'course',
    'cousin',
    'cover',
    'coyote',
    'crack',
    'cradle',
    'craft',
    'cram',
    'crane',
    'crash',
    'crater',
    'crawl',
    'crazy',
    'cream',
    'credit',
    'creek',
    'crew',
    'cricket',
    'crime',
    'crisp',
    'critic',
    'crop',
    'cross',
    'crouch',
    'crowd',
    'crucial',
    'cruel',
    'cruise',
    'crumble',
    'crunch',
    'crush',
    'cry',
    'crystal',
    'cube',
    'culture',
    'cup',
    'cupboard',
    'curious',
    'current',
    'curtain',
    'curve',
    'cushion',
    'custom',
    'cute',
    'cycle',
    'dad',
    'damage',
    'damp',
    'dance',
    'danger',
    'daring',
    'dash',
    'daughter',
    'dawn',
    'day',
    'deal',
    'debate',
    'debris',
    'decade',
    'december',
    'decide',
    'decline',
    'decorate',
    'decrease',
    'deer',
    'defense',
    'define',
    'defy',
    'degree',
    'delay',
    'deliver',
    'demand',
    'demise',
    'denial',
    'dentist',
    'deny',
    'depart',
    'depend',
    'deposit',
    'depth',
    'deputy',
    'derive',
    'describe',
    'desert',
    'design',
    'desk',
    'despair',
    'destroy',
    'detail',
    'detect',
    'develop',
    'device',
    'devote',
    'diagram',
    'dial',
    'diamond',
    'diary',
    'dice',
    'diesel',
    'diet',
    'differ',
    'digital',
    'dignity',
    'dilemma',
    'dinner',
    'dinosaur',
    'direct',
    'dirt',
    'disagree',
    'discover',
    'disease',
    'dish',
    'dismiss',
    'disorder',
    'display',
    'distance',
    'divert',
    'divide',
    'divorce',
    'dizzy',
    'doctor',
    'document',
    'dog',
    'doll',
    'dolphin',
    'domain',
    'donate',
    'donkey',
    'donor',
    'door',
    'dose',
    'double',
    'dove',
    'draft',
    'dragon',
    'drama',
    'drastic',
    'draw',
    'dream',
    'dress',
    'drift',
    'drill',
    'drink',
    'drip',
    'drive',
    'drop',
    'drum',
    'dry',
    'duck',
    'dumb',
    'dune',
    'during',
    'dust',
    'dutch',
    'duty',
    'dwarf',
    'dynamic',
    'eager',
    'eagle',
    'early',
    'earn',
    'earth',
    'easily',
    'east',
    'easy',
    'echo',
    'ecology',
    'economy',
    'edge',
    'edit',
    'educate',
    'effort',
    'egg',
    'eight',
    'either',
    'elbow',
    'elder',
    'electric',
    'elegant',
    'element',
    'elephant',
    'elevator',
    'elite',
    'else',
    'embark',
    'embody',
    'embrace',
    'emerge',
    'emotion',
    'employ',
    'empower',
    'empty',
    'enable',
    'enact',
    'end',
    'endless',
    'endorse',
    'enemy',
    'energy',
    'enforce',
    'engage',
    'engine',
    'enhance',
    'enjoy',
    'enlist',
    'enough',
    'enrich',
    'enroll',
    'ensure',
    'enter',
    'entire',
    'entry',
    'envelope',
    'episode',
    'equal',
    'equip',
    'era',
    'erase',
    'erode',
    'erosion',
    'error',
    'erupt',
    'escape',
    'essay',
    'essence',
    'estate',
    'eternal',
    'ethics',
    'evidence',
    'evil',
    'evoke',
    'evolve',
    'exact',
    'example',
    'excess',
    'exchange',
    'excite',
    'exclude',
    'excuse',
    'execute',
    'exercise',
    'exhaust',
    'exhibit',
    'exile',
    'exist',
    'exit',
    'exotic',
    'expand',
    'expect',
    'expire',
    'explain',
    'expose',
    'express',
    'extend',
    'extra',
    'eye',
    'eyebrow',
    'fabric',
    'face',
    'faculty',
    'fade',
    'faint',
    'faith',
    'fall',
    'false',
    'fame',
    'family',
    'famous',
    'fan',
    'fancy',
    'fantasy',
    'farm',
    'fashion',
    'fat',
    'fatal',
    'father',
    'fatigue',
    'fault',
    'favorite',
    'feature',
    'february',
    'federal',
    'fee',
    'feed',
    'feel',
    'female',
    'fence',
    'festival',
    'fetch',
    'fever',
    'few',
    'fiber',
    'fiction',
    'field',
    'figure',
    'file',
    'film',
    'filter',
    'final',
    'find',
    'fine',
    'finger',
    'finish',
    'fire',
    'firm',
    'first',
    'fiscal',
    'fish',
    'fit',
    'fitness',
    'fix',
    'flag',
    'flame',
    'flash',
    'flat',
    'flavor',
    'flee',
    'flight',
    'flip',
    'float',
    'flock',
    'floor',
    'flower',
    'fluid',
    'flush',
    'fly',
    'foam',
    'focus',
    'fog',
    'foil',
    'fold',
    'follow',
    'food',
    'foot',
    'force',
    'forest',
    'forget',
    'fork',
    'fortune',
    'forum',
    'forward',
    'fossil',
    'foster',
    'found',
    'fox',
    'fragile',
    'frame',
    'frequent',
    'fresh',
    'friend',
    'fringe',
    'frog',
    'front',
    'frost',
    'frown',
    'frozen',
    'fruit',
    'fuel',
    'fun',
    'funny',
    'furnace',
    'fury',
    'future',
    'gadget',
    'gain',
    'galaxy',
    'gallery',
    'game',
    'gap',
    'garage',
    'garbage',
    'garden',
    'garlic',
    'garment',
    'gas',
    'gasp',
    'gate',
    'gather',
    'gauge',
    'gaze',
    'general',
    'genius',
    'genre',
    'gentle',
    'genuine',
    'gesture',
    'ghost',
    'giant',
    'gift',
    'giggle',
    'ginger',
    'giraffe',
    'girl',
    'give',
    'glad',
    'glance',
    'glare',
    'glass',
    'glide',
    'glimpse',
    'globe',
    'gloom',
    'glory',
    'glove',
    'glow',
    'glue',
    'goat',
    'goddess',
    'gold',
    'good',
    'goose',
    'gorilla',
    'gospel',
    'gossip',
    'govern',
    'gown',
    'grab',
    'grace',
    'grain',
    'grant',
    'grape',
    'grass',
    'gravity',
    'great',
    'green',
    'grid',
    'grief',
    'grit',
    'grocery',
    'group',
    'grow',
    'grunt',
    'guard',
    'guess',
    'guide',
    'guilt',
    'guitar',
    'gun',
    'gym',
    'habit',
    'hair',
    'half',
    'hammer',
    'hamster',
    'hand',
    'happy',
    'harbor',
    'hard',
    'harsh',
    'harvest',
    'hat',
    'have',
    'hawk',
    'hazard',
    'head',
    'health',
    'heart',
    'heavy',
    'hedgehog',
    'height',
    'hello',
    'helmet',
    'help',
    'hen',
    'hero',
    'hidden',
    'high',
    'hill',
    'hint',
    'hip',
    'hire',
    'history',
    'hobby',
    'hockey',
    'hold',
    'hole',
    'holiday',
    'hollow',
    'home',
    'honey',
    'hood',
    'hope',
    'horn',
    'horror',
    'horse',
    'hospital',
    'host',
    'hotel',
    'hour',
    'hover',
    'hub',
    'huge',
    'human',
    'humble',
    'humor',
    'hundred',
    'hungry',
    'hunt',
    'hurdle',
    'hurry',
    'hurt',
    'husband',
    'hybrid',
    'ice',
    'icon',
    'idea',
    'identify',
    'idle',
    'ignore',
    'ill',
    'illegal',
    'illness',
    'image',
    'imitate',
    'immense',
    'immune',
    'impact',
    'impose',
    'improve',
    'impulse',
    'inch',
    'include',
    'income',
    'increase',
    'index',
    'indicate',
    'indoor',
    'industry',
    'infant',
    'inflict',
    'inform',
    'inhale',
    'inherit',
    'initial',
    'inject',
    'injury',
    'inmate',
    'inner',
    'innocent',
    'input',
    'inquiry',
    'insane',
    'insect',
    'inside',
    'inspire',
    'install',
    'intact',
    'interest',
    'into',
    'invest',
    'invite',
    'involve',
    'iron',
    'island',
    'isolate',
    'issue',
    'item',
    'ivory',
    'jacket',
    'jaguar',
    'jar',
    'jazz',
    'jealous',
    'jeans',
    'jelly',
    'jewel',
    'job',
    'join',
    'joke',
    'journey',
    'joy',
    'judge',
    'juice',
    'jump',
    'jungle',
    'junior',
    'junk',
    'just',
    'kangaroo',
    'keen',
    'keep',
    'ketchup',
    'key',
    'kick',
    'kid',
    'kidney',
    'kind',
    'kingdom',
    'kiss',
    'kit',
    'kitchen',
    'kite',
    'kitten',
    'kiwi',
    'knee',
    'knife',
    'knock',
    'know',
    'lab',
    'label',
    'labor',
    'ladder',
    'lady',
    'lake',
    'lamp',
    'language',
    'laptop',
    'large',
    'later',
    'latin',
    'laugh',
    'laundry',
    'lava',
    'law',
    'lawn',
    'lawsuit',
    'layer',
    'lazy',
    'leader',
    'leaf',
    'learn',
    'leave',
    'lecture',
    'left',
    'leg',
    'legal',
    'legend',
    'leisure',
    'lemon',
    'lend',
    'length',
    'lens',
    'leopard',
    'lesson',
    'letter',
    'level',
    'liar',
    'liberty',
    'library',
    'license',
    'life',
    'lift',
    'light',
    'like',
    'limb',
    'limit',
    'link',
    'lion',
    'liquid',
    'list',
    'little',
    'live',
    'lizard',
    'load',
    'loan',
    'lobster',
    'local',
    'lock',
    'logic',
    'lonely',
    'long',
    'loop',
    'lottery',
    'loud',
    'lounge',
    'love',
    'loyal',
    'lucky',
    'luggage',
    'lumber',
    'lunar',
    'lunch',
    'luxury',
    'lyrics',
    'machine',
    'mad',
    'magic',
    'magnet',
    'maid',
    'mail',
    'main',
    'major',
    'make',
    'mammal',
    'man',
    'manage',
    'mandate',
    'mango',
    'mansion',
    'manual',
    'maple',
    'marble',
    'march',
    'margin',
    'marine',
    'market',
    'marriage',
    'mask',
    'mass',
    'master',
    'match',
    'material',
    'math',
    'matrix',
    'matter',
    'maximum',
    'maze',
    'meadow',
    'mean',
    'measure',
    'meat',
    'mechanic',
    'medal',
    'media',
    'melody',
    'melt',
    'member',
    'memory',
    'mention',
    'menu',
    'mercy',
    'merge',
    'merit',
    'merry',
    'mesh',
    'message',
    'metal',
    'method',
    'middle',
    'midnight',
    'milk',
    'million',
    'mimic',
    'mind',
    'minimum',
    'minor',
    'minute',
    'miracle',
    'mirror',
    'misery',
    'miss',
    'mistake',
    'mix',
    'mixed',
    'mixture',
    'mobile',
    'model',
    'modify',
    'mom',
    'moment',
    'monitor',
    'monkey',
    'monster',
    'month',
    'moon',
    'moral',
    'more',
    'morning',
    'mosquito',
    'mother',
    'motion',
    'motor',
    'mountain',
    'mouse',
    'move',
    'movie',
    'much',
    'muffin',
    'mule',
    'multiply',
    'muscle',
    'museum',
    'mushroom',
    'music',
    'must',
    'mutual',
    'myself',
    'mystery',
    'myth',
    'naive',
    'name',
    'napkin',
    'narrow',
    'nasty',
    'nation',
    'nature',
    'near',
    'neck',
    'need',
    'negative',
    'neglect',
    'neither',
    'nephew',
    'nerve',
    'nest',
    'net',
    'network',
    'neutral',
    'never',
    'news',
    'next',
    'nice',
    'night',
    'noble',
    'noise',
    'nominee',
    'noodle',
    'normal',
    'north',
    'nose',
    'notable',
    'note',
    'nothing',
    'notice',
    'novel',
    'now',
    'nuclear',
    'number',
    'nurse',
    'nut',
    'oak',
    'obey',
    'object',
    'oblige',
    'obscure',
    'observe',
    'obtain',
    'obvious',
    'occur',
    'ocean',
    'october',
    'odor',
    'off',
    'offer',
    'office',
    'often',
    'oil',
    'okay',
    'old',
    'olive',
    'olympic',
    'omit',
    'once',
    'one',
    'onion',
    'online',
    'only',
    'open',
    'opera',
    'opinion',
    'oppose',
    'option',
    'orange',
    'orbit',
    'orchard',
    'order',
    'ordinary',
    'organ',
    'orient',
    'original',
    'orphan',
    'ostrich',
    'other',
    'outdoor',
    'outer',
    'output',
    'outside',
    'oval',
    'oven',
    'over',
    'own',
    'owner',
    'oxygen',
    'oyster',
    'ozone',
    'pact',
    'paddle',
    'page',
    'pair',
    'palace',
    'palm',
    'panda',
    'panel',
    'panic',
    'panther',
    'paper',
    'parade',
    'parent',
    'park',
    'parrot',
    'party',
    'pass',
    'patch',
    'path',
    'patient',
    'patrol',
    'pattern',
    'pause',
    'pave',
    'payment',
    'peace',
    'peanut',
    'pear',
    'peasant',
    'pelican',
    'pen',
    'penalty',
    'pencil',
    'people',
    'pepper',
    'perfect',
    'permit',
    'person',
    'pet',
    'phone',
    'photo',
    'phrase',
    'physical',
    'piano',
    'picnic',
    'picture',
    'piece',
    'pig',
    'pigeon',
    'pill',
    'pilot',
    'pink',
    'pioneer',
    'pipe',
    'pistol',
    'pitch',
    'pizza',
    'place',
    'planet',
    'plastic',
    'plate',
    'play',
    'please',
    'pledge',
    'pluck',
    'plug',
    'plunge',
    'poem',
    'poet',
    'point',
    'polar',
    'pole',
    'police',
    'pond',
    'pony',
    'pool',
    'popular',
    'portion',
    'position',
    'possible',
    'post',
    'potato',
    'pottery',
    'poverty',
    'powder',
    'power',
    'practice',
    'praise',
    'predict',
    'prefer',
    'prepare',
    'present',
    'pretty',
    'prevent',
    'price',
    'pride',
    'primary',
    'print',
    'priority',
    'prison',
    'private',
    'prize',
    'problem',
    'process',
    'produce',
    'profit',
    'program',
    'project',
    'promote',
    'proof',
    'property',
    'prosper',
    'protect',
    'proud',
    'provide',
    'public',
    'pudding',
    'pull',
    'pulp',
    'pulse',
    'pumpkin',
    'punch',
    'pupil',
    'puppy',
    'purchase',
    'purity',
    'purpose',
    'purse',
    'push',
    'put',
    'puzzle',
    'pyramid',
    'quality',
    'quantum',
    'quarter',
    'question',
    'quick',
    'quit',
    'quiz',
    'quote',
    'rabbit',
    'raccoon',
    'race',
    'rack',
    'radar',
    'radio',
    'rail',
    'rain',
    'raise',
    'rally',
    'ramp',
    'ranch',
    'random',
    'range',
    'rapid',
    'rare',
    'rate',
    'rather',
    'raven',
    'raw',
    'razor',
    'ready',
    'real',
    'reason',
    'rebel',
    'rebuild',
    'recall',
    'receive',
    'recipe',
    'record',
    'recycle',
    'reduce',
    'reflect',
    'reform',
    'refuse',
    'region',
    'regret',
    'regular',
    'reject',
    'relax',
    'release',
    'relief',
    'rely',
    'remain',
    'remember',
    'remind',
    'remove',
    'render',
    'renew',
    'rent',
    'reopen',
    'repair',
    'repeat',
    'replace',
    'report',
    'require',
    'rescue',
    'resemble',
    'resist',
    'resource',
    'response',
    'result',
    'retire',
    'retreat',
    'return',
    'reunion',
    'reveal',
    'review',
    'reward',
    'rhythm',
    'rib',
    'ribbon',
    'rice',
    'rich',
    'ride',
    'ridge',
    'rifle',
    'right',
    'rigid',
    'ring',
    'riot',
    'ripple',
    'risk',
    'ritual',
    'rival',
    'river',
    'road',
    'roast',
    'robot',
    'robust',
    'rocket',
    'romance',
    'roof',
    'rookie',
    'room',
    'rose',
    'rotate',
    'rough',
    'round',
    'route',
    'royal',
    'rubber',
    'rude',
    'rug',
    'rule',
    'run',
    'runway',
    'rural',
    'sad',
    'saddle',
    'sadness',
    'safe',
    'sail',
    'salad',
    'salmon',
    'salon',
    'salt',
    'salute',
    'same',
    'sample',
    'sand',
    'satisfy',
    'satoshi',
    'sauce',
    'sausage',
    'save',
    'say',
    'scale',
    'scan',
    'scare',
    'scatter',
    'scene',
    'scheme',
    'school',
    'science',
    'scissors',
    'scorpion',
    'scout',
    'scrap',
    'screen',
    'script',
    'scrub',
    'sea',
    'search',
    'season',
    'seat',
    'second',
    'secret',
    'section',
    'security',
    'seed',
    'seek',
    'segment',
    'select',
    'sell',
    'seminar',
    'senior',
    'sense',
    'sentence',
    'series',
    'service',
    'session',
    'settle',
    'setup',
    'seven',
    'shadow',
    'shaft',
    'shallow',
    'share',
    'shed',
    'shell',
    'sheriff',
    'shield',
    'shift',
    'shine',
    'ship',
    'shiver',
    'shock',
    'shoe',
    'shoot',
    'shop',
    'short',
    'shoulder',
    'shove',
    'shrimp',
    'shrug',
    'shuffle',
    'shy',
    'sibling',
    'sick',
    'side',
    'siege',
    'sight',
    'sign',
    'silent',
    'silk',
    'silly',
    'silver',
    'similar',
    'simple',
    'since',
    'sing',
    'siren',
    'sister',
    'situate',
    'six',
    'size',
    'skate',
    'sketch',
    'ski',
    'skill',
    'skin',
    'skirt',
    'skull',
    'slab',
    'slam',
    'sleep',
    'slender',
    'slice',
    'slide',
    'slight',
    'slim',
    'slogan',
    'slot',
    'slow',
    'slush',
    'small',
    'smart',
    'smile',
    'smoke',
    'smooth',
    'snack',
    'snake',
    'snap',
    'sniff',
    'snow',
    'soap',
    'soccer',
    'social',
    'sock',
    'soda',
    'soft',
    'solar',
    'soldier',
    'solid',
    'solution',
    'solve',
    'someone',
    'song',
    'soon',
    'sorry',
    'sort',
    'soul',
    'sound',
    'soup',
    'source',
    'south',
    'space',
    'spare',
    'spatial',
    'spawn',
    'speak',
    'special',
    'speed',
    'spell',
    'spend',
    'sphere',
    'spice',
    'spider',
    'spike',
    'spin',
    'spirit',
    'split',
    'spoil',
    'sponsor',
    'spoon',
    'sport',
    'spot',
    'spray',
    'spread',
    'spring',
    'spy',
    'square',
    'squeeze',
    'squirrel',
    'stable',
    'stadium',
    'staff',
    'stage',
    'stairs',
    'stamp',
    'stand',
    'start',
    'state',
    'stay',
    'steak',
    'steel',
    'stem',
    'step',
    'stereo',
    'stick',
    'still',
    'sting',
    'stock',
    'stomach',
    'stone',
    'stool',
    'story',
    'stove',
    'strategy',
    'street',
    'strike',
    'strong',
    'struggle',
    'student',
    'stuff',
    'stumble',
    'style',
    'subject',
    'submit',
    'subway',
    'success',
    'such',
    'sudden',
    'suffer',
    'sugar',
    'suggest',
    'suit',
    'summer',
    'sun',
    'sunny',
    'sunset',
    'super',
    'supply',
    'supreme',
    'sure',
    'surface',
    'surge',
    'surprise',
    'surround',
    'survey',
    'suspect',
    'sustain',
    'swallow',
    'swamp',
    'swap',
    'swarm',
    'swear',
    'sweet',
    'swift',
    'swim',
    'swing',
    'switch',
    'sword',
    'symbol',
    'symptom',
    'syrup',
    'system',
    'table',
    'tackle',
    'tag',
    'tail',
    'talent',
    'talk',
    'tank',
    'tape',
    'target',
    'task',
    'taste',
    'tattoo',
    'taxi',
    'teach',
    'team',
    'tell',
    'ten',
    'tenant',
    'tennis',
    'tent',
    'term',
    'test',
    'text',
    'thank',
    'that',
    'theme',
    'then',
    'theory',
    'there',
    'they',
    'thing',
    'this',
    'thought',
    'three',
    'thrive',
    'throw',
    'thumb',
    'thunder',
    'ticket',
    'tide',
    'tiger',
    'tilt',
    'timber',
    'time',
    'tiny',
    'tip',
    'tired',
    'tissue',
    'title',
    'toast',
    'tobacco',
    'today',
    'toddler',
    'toe',
    'together',
    'toilet',
    'token',
    'tomato',
    'tomorrow',
    'tone',
    'tongue',
    'tonight',
    'tool',
    'tooth',
    'top',
    'topic',
    'topple',
    'torch',
    'tornado',
    'tortoise',
    'toss',
    'total',
    'tourist',
    'toward',
    'tower',
    'town',
    'toy',
    'track',
    'trade',
    'traffic',
    'tragic',
    'train',
    'transfer',
    'trap',
    'trash',
    'travel',
    'tray',
    'treat',
    'tree',
    'trend',
    'trial',
    'tribe',
    'trick',
    'trigger',
    'trim',
    'trip',
    'trophy',
    'trouble',
    'truck',
    'true',
    'truly',
    'trumpet',
    'trust',
    'truth',
    'try',
    'tube',
    'tuition',
    'tumble',
    'tuna',
    'tunnel',
    'turkey',
    'turn',
    'turtle',
    'twelve',
    'twenty',
    'twice',
    'twin',
    'twist',
    'two',
    'type',
    'typical',
    'ugly',
    'umbrella',
    'unable',
    'unaware',
    'uncle',
    'uncover',
    'under',
    'undo',
    'unfair',
    'unfold',
    'unhappy',
    'uniform',
    'unique',
    'unit',
    'universe',
    'unknown',
    'unlock',
    'until',
    'unusual',
    'unveil',
    'update',
    'upgrade',
    'uphold',
    'upon',
    'upper',
    'upset',
    'urban',
    'urge',
    'usage',
    'use',
    'used',
    'useful',
    'useless',
    'usual',
    'utility',
    'vacant',
    'vacuum',
    'vague',
    'valid',
    'valley',
    'valve',
    'van',
    'vanish',
    'vapor',
    'various',
    'vast',
    'vault',
    'vehicle',
    'velvet',
    'vendor',
    'venture',
    'venue',
    'verb',
    'verify',
    'version',
    'very',
    'vessel',
    'veteran',
    'viable',
    'vibrant',
    'vicious',
    'victory',
    'video',
    'view',
    'village',
    'vintage',
    'violin',
    'virtual',
    'virus',
    'visa',
    'visit',
    'visual',
    'vital',
    'vivid',
    'vocal',
    'voice',
    'void',
    'volcano',
    'volume',
    'vote',
    'voyage',
    'wage',
    'wagon',
    'wait',
    'walk',
    'wall',
    'walnut',
    'want',
    'warfare',
    'warm',
    'warrior',
    'wash',
    'wasp',
    'waste',
    'water',
    'wave',
    'way',
    'wealth',
    'weapon',
    'wear',
    'weasel',
    'weather',
    'web',
    'wedding',
    'weekend',
    'weird',
    'welcome',
    'west',
    'wet',
    'whale',
    'what',
    'wheat',
    'wheel',
    'when',
    'where',
    'whip',
    'whisper',
    'wide',
    'width',
    'wife',
    'wild',
    'will',
    'win',
    'window',
    'wine',
    'wing',
    'wink',
    'winner',
    'winter',
    'wire',
    'wisdom',
    'wise',
    'wish',
    'witness',
    'wolf',
    'woman',
    'wonder',
    'wood',
    'wool',
    'word',
    'work',
    'world',
    'worry',
    'worth',
    'wrap',
    'wreck',
    'wrestle',
    'wrist',
    'write',
    'wrong',
    'yard',
    'year',
    'yellow',
    'you',
    'young',
    'youth',
    'zebra',
    'zero',
    'zone',
    'zoo',
];

/* eslint-disable no-bitwise */
const FAIL_TO_DECODE_MNEMONIC_ERROR_MSG = 'failed to decode mnemonic';
const NOT_IN_WORDS_LIST_ERROR_MSG = 'the mnemonic contains a word that is not in the wordlist';
// https://stackoverflow.com/a/51452614
function toUint11Array(buffer8) {
    const buffer11 = [];
    let acc = 0;
    let accBits = 0;
    function add(octet) {
        acc |= octet << accBits;
        accBits += 8;
        if (accBits >= 11) {
            buffer11.push(acc & 0x7ff);
            acc >>= 11;
            accBits -= 11;
        }
    }
    function flush() {
        if (accBits) {
            buffer11.push(acc);
        }
    }
    buffer8.forEach(add);
    flush();
    return buffer11;
}
function applyWords(nums) {
    return nums.map((n) => english[n]);
}
function computeChecksum(seed) {
    const hashBuffer = genericHash(seed);
    const uint11Hash = toUint11Array(hashBuffer);
    const words = applyWords(uint11Hash);
    return words[0];
}
/**
 * mnemonicFromSeed converts a 32-byte key into a 25 word mnemonic. The generated mnemonic includes a checksum.
 * Each word in the mnemonic represents 11 bits of data, and the last 11 bits are reserved for the checksum.
 * @param seed - 32 bytes long seed
 * @returns 25 words mnemonic
 */
function mnemonicFromSeed(seed) {
    // Sanity length check
    if (seed.length !== SEED_BTYES_LENGTH) {
        throw new RangeError(`Seed length must be ${SEED_BTYES_LENGTH}`);
    }
    const uint11Array = toUint11Array(seed);
    const words = applyWords(uint11Array);
    const checksumWord = computeChecksum(seed);
    return `${words.join(' ')} ${checksumWord}`;
}
// from Uint11Array
// https://stackoverflow.com/a/51452614
function toUint8Array(buffer11) {
    const buffer8 = [];
    let acc = 0;
    let accBits = 0;
    function add(ui11) {
        acc |= ui11 << accBits;
        accBits += 11;
        while (accBits >= 8) {
            buffer8.push(acc & 0xff);
            acc >>= 8;
            accBits -= 8;
        }
    }
    function flush() {
        if (accBits) {
            buffer8.push(acc);
        }
    }
    buffer11.forEach(add);
    flush();
    return new Uint8Array(buffer8);
}
/**
 * seedFromMnemonic converts a mnemonic generated using this library into the source key used to create it.
 * It returns an error if the passed mnemonic has an incorrect checksum, if the number of words is unexpected, or if one
 * of the passed words is not found in the words list.
 * @param mnemonic - 25 words mnemonic
 * @returns 32 bytes long seed
 */
function seedFromMnemonic(mnemonic) {
    const words = mnemonic.split(' ');
    const key = words.slice(0, 24);
    // Check that all words are in list
    for (const w of key) {
        if (english.indexOf(w) === -1)
            throw new Error(NOT_IN_WORDS_LIST_ERROR_MSG);
    }
    const checksum = words[words.length - 1];
    const uint11Array = key.map((word) => english.indexOf(word));
    // Convert the key to uint8Array
    let uint8Array = toUint8Array(uint11Array);
    // We need to chop the last byte -
    // the short explanation - Since 256 is not divisible by 11, we have an extra 0x0 byte.
    // The longer explanation - When splitting the 256 bits to chunks of 11, we get 23 words and a left over of 3 bits.
    // This left gets padded with another 8 bits to the create the 24th word.
    // While converting back to byte array, our new 264 bits array is divisible by 8 but the last byte is just the padding.
    // check that we have 33 bytes long array as expected
    if (uint8Array.length !== 33)
        throw new Error(FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);
    // check that the last byte is actually 0x0
    if (uint8Array[uint8Array.length - 1] !== 0x0)
        throw new Error(FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);
    // chop it !
    uint8Array = uint8Array.slice(0, uint8Array.length - 1);
    // compute checksum
    const cs = computeChecksum(uint8Array);
    // success!
    if (cs === checksum)
        return uint8Array;
    throw new Error(FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);
}
/**
 * mnemonicToSecretKey takes a mnemonic string and returns the corresponding Algorand address and its secret key.
 * @param mn - 25 words Algorand mnemonic
 * @throws error if fails to decode the mnemonic
 */
function mnemonicToSecretKey(mn) {
    const seed = seedFromMnemonic(mn);
    const keys = keyPairFromSeed(seed);
    const addr = new Address(keys.publicKey);
    return { addr, sk: keys.secretKey };
}
/**
 * secretKeyToMnemonic takes an Algorand secret key and returns the corresponding mnemonic.
 * @param sk - Algorand secret key
 * @returns Secret key's associated mnemonic
 */
function secretKeyToMnemonic(sk) {
    // get the seed from the sk
    const seed = sk.slice(0, SEED_BTYES_LENGTH);
    return mnemonicFromSeed(seed);
}
/**
 * mnemonicToMasterDerivationKey takes a mnemonic string and returns the corresponding master derivation key.
 * @param mn - 25 words Algorand mnemonic
 * @returns Uint8Array
 * @throws error if fails to decode the mnemonic
 */
function mnemonicToMasterDerivationKey(mn) {
    return seedFromMnemonic(mn);
}
/**
 * masterDerivationKeyToMnemonic takes a master derivation key and returns the corresponding mnemonic.
 * @param mdk - Uint8Array
 * @returns string mnemonic
 */
function masterDerivationKeyToMnemonic(mdk) {
    return mnemonicFromSeed(mdk);
}

const ALGORAND_MAX_TX_GROUP_SIZE = 16;
const TX_GROUP_TAG = new TextEncoder().encode('TG');
function txGroupPreimage(txnHashes) {
    if (txnHashes.length > ALGORAND_MAX_TX_GROUP_SIZE) {
        throw new Error(`${txnHashes.length} transactions grouped together but max group size is ${ALGORAND_MAX_TX_GROUP_SIZE}`);
    }
    if (txnHashes.length === 0) {
        throw new Error('Cannot compute group ID of zero transactions');
    }
    const bytes = msgpackRawEncode({
        txlist: txnHashes,
    });
    return concatArrays(TX_GROUP_TAG, bytes);
}
/**
 * computeGroupID returns group ID for a group of transactions
 * @param txns - array of transactions
 * @returns Uint8Array
 */
function computeGroupID(txns) {
    const hashes = [];
    for (const txn of txns) {
        hashes.push(txn.rawTxID());
    }
    const toBeHashed = txGroupPreimage(hashes);
    const gid = genericHash(toBeHashed);
    return Uint8Array.from(gid);
}
/**
 * assignGroupID assigns group id to a given list of unsigned transactions
 * @param txns - array of transactions. The array elements will be modified with the group id
 */
function assignGroupID(txns) {
    const gid = computeGroupID(txns);
    for (const txn of txns) {
        txn.group = gid;
    }
    return txns;
}

function signLogicSigTransactionWithAddress(txn, lsig, lsigAddress) {
    if (!lsig.verify(lsigAddress.publicKey)) {
        throw new Error('Logic signature verification failed. Ensure the program and signature are valid.');
    }
    let sgnr;
    if (!bytesEqual(lsigAddress.publicKey, txn.sender.publicKey)) {
        sgnr = lsigAddress;
    }
    const signedTxn = new SignedTransaction({
        lsig,
        txn,
        sgnr,
    });
    return {
        txID: txn.txID(),
        blob: encodeMsgpack(signedTxn),
    };
}
/**
 * signLogicSigTransactionObject takes a transaction and a LogicSig object and
 * returns a signed transaction.
 *
 * @param txn - The transaction to sign.
 * @param lsigObject - The LogicSig object that will sign the transaction.
 *
 * @returns Object containing txID and blob representing signed transaction.
 */
function signLogicSigTransactionObject(txn, lsigObject) {
    let lsig;
    let lsigAddress;
    if (lsigObject instanceof LogicSigAccount) {
        lsig = lsigObject.lsig;
        lsigAddress = lsigObject.address();
    }
    else {
        lsig = lsigObject;
        if (lsig.sig) {
            // For a LogicSig with a non-multisig delegating account, we cannot derive
            // the address of that account from only its signature, so assume the
            // delegating account is the sender. If that's not the case, the signing
            // will fail.
            lsigAddress = new Address(txn.sender.publicKey);
        }
        else if (lsig.msig) {
            const msigMetadata = {
                version: lsig.msig.v,
                threshold: lsig.msig.thr,
                pks: lsig.msig.subsig.map((subsig) => subsig.pk),
            };
            lsigAddress = addressFromMultisigPreImg(msigMetadata);
        }
        else {
            lsigAddress = lsig.address();
        }
    }
    return signLogicSigTransactionWithAddress(txn, lsig, lsigAddress);
}
/**
 * signLogicSigTransaction takes a transaction and a LogicSig object and returns
 * a signed transaction.
 *
 * @param txn - The transaction to sign.
 * @param lsigObject - The LogicSig object that will sign the transaction.
 *
 * @returns Object containing txID and blob representing signed transaction.
 * @throws error on failure
 */
function signLogicSigTransaction(txn, lsigObject) {
    return signLogicSigTransactionObject(txn, lsigObject);
}

const MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG = 'Not enough multisig transactions to merge. Need at least two';
const MULTISIG_MERGE_MISMATCH_ERROR_MSG = 'Cannot merge txs. txIDs differ';
const MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG = 'Cannot merge txs. Auth addrs differ';
const MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG = 'Cannot merge txs. Multisig preimages differ';
const MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG = 'Cannot merge txs. subsigs are mismatched.';
const MULTISIG_SIGNATURE_LENGTH_ERROR_MSG = 'Cannot add multisig signature. Signature is not of the correct length.';
const MULTISIG_KEY_NOT_EXIST_ERROR_MSG = 'Key does not exist';
/**
 * createMultisigTransaction creates a raw, unsigned multisig transaction blob.
 * @param txn - the actual transaction.
 * @param version - multisig version
 * @param threshold - multisig threshold
 * @param pks - ordered list of public keys in this multisig
 * @returns encoded multisig blob
 */
function createMultisigTransaction(txn, { version, threshold, addrs }) {
    // construct the appendable multisigned transaction format
    const pks = pksFromAddresses(addrs);
    const subsigs = pks.map((pk) => ({ pk }));
    const msig = {
        v: version,
        thr: threshold,
        subsig: subsigs,
    };
    // if the address of this multisig is different from the transaction sender,
    // we need to add the auth-addr field
    const msigAddr = addressFromMultisigPreImg({
        version,
        threshold,
        pks,
    });
    let sgnr;
    if (!txn.sender.equals(msigAddr)) {
        sgnr = msigAddr;
    }
    const signedTxn = new SignedTransaction({
        txn,
        msig,
        sgnr,
    });
    return encodeMsgpack(signedTxn);
}
/**
 * createMultisigTransactionWithSignature creates a multisig transaction blob with an included signature.
 * @param txn - the actual transaction to sign.
 * @param rawSig - a Uint8Array raw signature of that transaction
 * @param myPk - a public key that corresponds with rawSig
 * @param version - multisig version
 * @param threshold - multisig threshold
 * @param pks - ordered list of public keys in this multisig
 * @returns encoded multisig blob
 */
function createMultisigTransactionWithSignature(txn, { rawSig, myPk }, { version, threshold, pks }) {
    // Create an empty encoded multisig transaction
    const encodedMsig = createMultisigTransaction(txn, {
        version,
        threshold,
        addrs: pks.map((pk) => new Address(pk)),
    });
    // note: this is not signed yet, but will be shortly
    const signedTxn = decodeMsgpack(encodedMsig, SignedTransaction);
    let keyExist = false;
    // append the multisig signature to the corresponding public key in the multisig blob
    signedTxn.msig.subsig.forEach((subsig, i) => {
        if (bytesEqual(subsig.pk, myPk)) {
            keyExist = true;
            signedTxn.msig.subsig[i].s = rawSig;
        }
    });
    if (!keyExist) {
        throw new Error(MULTISIG_KEY_NOT_EXIST_ERROR_MSG);
    }
    return encodeMsgpack(signedTxn);
}
/**
 * partialSignTxn partially signs this transaction and returns a partially-signed multisig transaction,
 * encoded with msgpack as a typed array.
 * @param transaction - The transaction to sign
 * @param version - multisig version
 * @param threshold - multisig threshold
 * @param pks - multisig public key list, order is important.
 * @param sk - an Algorand secret key to sign with.
 * @returns an encoded, partially signed multisig transaction.
 */
function partialSignTxn(transaction, { version, threshold, pks }, sk) {
    // get signature verifier
    const myPk = keyPairFromSecretKey(sk).publicKey;
    return createMultisigTransactionWithSignature(transaction, { rawSig: transaction.rawSignTxn(sk), myPk }, { version, threshold, pks });
}
/**
 * partialSignWithMultisigSignature partially signs this transaction with an external raw multisig signature and returns
 * a partially-signed multisig transaction, encoded with msgpack as a typed array.
 * @param transaction - The transaction to sign
 * @param metadata - multisig metadata
 * @param signerAddr - address of the signer
 * @param signature - raw multisig signature
 * @returns an encoded, partially signed multisig transaction.
 */
function partialSignWithMultisigSignature(transaction, metadata, signerAddr, signature) {
    if (!isValidSignatureLength(signature.length)) {
        throw new Error(MULTISIG_SIGNATURE_LENGTH_ERROR_MSG);
    }
    const signerAddressObj = typeof signerAddr === 'string'
        ? Address.fromString(signerAddr)
        : signerAddr;
    return createMultisigTransactionWithSignature(transaction, {
        rawSig: signature,
        myPk: signerAddressObj.publicKey,
    }, metadata);
}
/**
 * mergeMultisigTransactions takes a list of multisig transaction blobs, and merges them.
 * @param multisigTxnBlobs - a list of blobs representing encoded multisig txns
 * @returns typed array msg-pack encoded multisig txn
 */
function mergeMultisigTransactions(multisigTxnBlobs) {
    if (multisigTxnBlobs.length < 2) {
        throw new Error(MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG);
    }
    const refSigTx = decodeMsgpack(multisigTxnBlobs[0], SignedTransaction);
    if (!refSigTx.msig) {
        throw new Error('Invalid multisig transaction, multisig structure missing at index 0');
    }
    const refTxID = refSigTx.txn.txID();
    const refAuthAddr = refSigTx.sgnr ? refSigTx.sgnr.toString() : undefined;
    const refPreImage = {
        version: refSigTx.msig.v,
        threshold: refSigTx.msig.thr,
        pks: refSigTx.msig.subsig.map((subsig) => subsig.pk),
    };
    const refMsigAddr = addressFromMultisigPreImg(refPreImage);
    const newSubsigs = refSigTx.msig.subsig.map((sig) => ({ ...sig }));
    for (let i = 1; i < multisigTxnBlobs.length; i++) {
        const unisig = decodeMsgpack(multisigTxnBlobs[i], SignedTransaction);
        if (!unisig.msig) {
            throw new Error(`Invalid multisig transaction, multisig structure missing at index ${i}`);
        }
        if (unisig.txn.txID() !== refTxID) {
            throw new Error(MULTISIG_MERGE_MISMATCH_ERROR_MSG);
        }
        const authAddr = unisig.sgnr ? unisig.sgnr.toString() : undefined;
        if (refAuthAddr !== authAddr) {
            throw new Error(MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG);
        }
        // check multisig has same preimage as reference
        if (unisig.msig.subsig.length !== refSigTx.msig.subsig.length) {
            throw new Error(MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG);
        }
        const preimg = {
            version: unisig.msig.v,
            threshold: unisig.msig.thr,
            pks: unisig.msig.subsig.map((subsig) => subsig.pk),
        };
        const msgigAddr = addressFromMultisigPreImg(preimg);
        if (!refMsigAddr.equals(msgigAddr)) {
            throw new Error(MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG);
        }
        // now, we can merge
        unisig.msig.subsig.forEach((uniSubsig, index) => {
            if (!uniSubsig.s)
                return;
            const current = newSubsigs[index];
            if (current.s && !arrayEqual(uniSubsig.s, current.s)) {
                // mismatch
                throw new Error(MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG);
            }
            current.s = uniSubsig.s;
        });
    }
    const msig = {
        v: refSigTx.msig.v,
        thr: refSigTx.msig.thr,
        subsig: newSubsigs,
    };
    const refSgnr = typeof refAuthAddr !== 'undefined' ? refSigTx.sgnr : undefined;
    const signedTxn = new SignedTransaction({
        msig,
        txn: refSigTx.txn,
        sgnr: refSgnr,
    });
    return encodeMsgpack(signedTxn);
}
/**
 * signMultisigTransaction takes a raw transaction (see signTransaction), a multisig preimage, a secret key, and returns
 * a multisig transaction, which is a blob representing a transaction and multisignature account preimage. The returned
 * multisig txn can accumulate additional signatures through mergeMultisigTransactions or appendSignMultisigTransaction.
 * @param txn - object with either payment or key registration fields
 * @param version - multisig version
 * @param threshold - multisig threshold
 * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.
 * @param sk - Algorand secret key. The corresponding pk should be in the pre image.
 * @returns object containing txID, and blob of partially signed multisig transaction (with multisig preimage information)
 * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.
 */
function signMultisigTransaction(txn, { version, threshold, addrs }, sk) {
    // build pks for partialSign
    const pks = pksFromAddresses(addrs);
    const blob = partialSignTxn(txn, { version, threshold, pks }, sk);
    return {
        txID: txn.txID(),
        blob,
    };
}
/**
 * appendSignMultisigTransaction takes a multisig transaction blob, and appends our signature to it.
 * While we could derive public key preimagery from the partially-signed multisig transaction,
 * we ask the caller to pass it back in, to ensure they know what they are signing.
 * @param multisigTxnBlob - an encoded multisig txn. Supports non-payment txn types.
 * @param version - multisig version
 * @param threshold - multisig threshold
 * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.
 * @param sk - Algorand secret key
 * @returns object containing txID, and blob representing encoded multisig txn
 */
function appendSignMultisigTransaction(multisigTxnBlob, { version, threshold, addrs }, sk) {
    const pks = pksFromAddresses(addrs);
    // obtain underlying txn, sign it, and merge it
    const multisigTxObj = decodeMsgpack(multisigTxnBlob, SignedTransaction);
    const partialSignedBlob = partialSignTxn(multisigTxObj.txn, { version, threshold, pks }, sk);
    return {
        txID: multisigTxObj.txn.txID(),
        blob: mergeMultisigTransactions([multisigTxnBlob, partialSignedBlob]),
    };
}
/**
 * appendMultisigTransactionSignature takes a multisig transaction blob, and appends a given raw signature to it.
 * This makes it possible to compile a multisig signature using only raw signatures from external methods.
 * @param multisigTxnBlob - an encoded multisig txn. Supports non-payment txn types.
 * @param version - multisig version
 * @param threshold - multisig threshold
 * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.
 * @param signerAddr - address of the signer
 * @param signature - raw multisig signature
 * @returns object containing txID, and blob representing encoded multisig txn
 */
function appendSignRawMultisigSignature(multisigTxnBlob, { version, threshold, addrs }, signerAddr, signature) {
    const pks = pksFromAddresses(addrs);
    // obtain underlying txn, sign it, and merge it
    const multisigTxObj = decodeMsgpack(multisigTxnBlob, SignedTransaction);
    const partialSignedBlob = partialSignWithMultisigSignature(multisigTxObj.txn, { version, threshold, pks }, signerAddr, signature);
    return {
        txID: multisigTxObj.txn.txID(),
        blob: mergeMultisigTransactions([multisigTxnBlob, partialSignedBlob]),
    };
}

/** @type {Record<string, number>} */
let char_to_integer = {};

'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	.split('')
	.forEach(function (char, i) {
		char_to_integer[char] = i;
	});

/** @param {string} string */
function decode(string) {
	/** @type {number[]} */
	let result = [];

	let shift = 0;
	let value = 0;

	for (let i = 0; i < string.length; i += 1) {
		let integer = char_to_integer[string[i]];

		if (integer === undefined) {
			throw new Error('Invalid character (' + string[i] + ')');
		}

		const has_continuation_bit = integer & 32;

		integer &= 31;
		value += integer << shift;

		if (has_continuation_bit) {
			shift += 5;
		} else {
			const should_negate = value & 1;
			value >>>= 1;

			if (should_negate) {
				result.push(value === 0 ? -2147483648 : -value);
			} else {
				result.push(value);
			}

			// reset
			value = shift = 0;
		}
	}

	return result;
}

/**
 * Contains a mapping from TEAL program PC to source file location.
 */
class ProgramSourceMap {
    constructor({ version, sources, names, mappings, }) {
        this.version = version;
        this.sources = sources;
        this.names = names;
        this.mappings = mappings;
        if (this.version !== 3)
            throw new Error(`Only version 3 is supported, got ${this.version}`);
        if (this.mappings === undefined)
            throw new Error('mapping undefined, cannot build source map without `mapping`');
        const pcList = this.mappings.split(';').map(decode);
        this.pcToLocation = new Map();
        this.sourceAndLineToPc = new Map();
        const lastLocation = {
            line: 0,
            column: 0,
            sourceIndex: 0,
            nameIndex: 0,
        };
        for (const [pc, data] of pcList.entries()) {
            if (data.length < 4)
                continue;
            const nameDelta = data.length > 4 ? data[4] : undefined;
            const [, sourceDelta, lineDelta, columnDelta] = data;
            lastLocation.sourceIndex += sourceDelta;
            lastLocation.line += lineDelta;
            lastLocation.column += columnDelta;
            if (typeof nameDelta !== 'undefined') {
                lastLocation.nameIndex += nameDelta;
            }
            const sourceAndLineKey = `${lastLocation.sourceIndex}:${lastLocation.line}`;
            let pcsForSourceAndLine = this.sourceAndLineToPc.get(sourceAndLineKey);
            if (pcsForSourceAndLine === undefined) {
                pcsForSourceAndLine = [];
                this.sourceAndLineToPc.set(sourceAndLineKey, pcsForSourceAndLine);
            }
            const pcInLine = {
                pc,
                column: lastLocation.column,
            };
            const pcLocation = {
                line: lastLocation.line,
                column: lastLocation.column,
                sourceIndex: lastLocation.sourceIndex,
            };
            if (typeof nameDelta !== 'undefined') {
                pcInLine.nameIndex = lastLocation.nameIndex;
                pcLocation.nameIndex = lastLocation.nameIndex;
            }
            pcsForSourceAndLine.push(pcInLine);
            this.pcToLocation.set(pc, pcLocation);
        }
    }
    getPcs() {
        return Array.from(this.pcToLocation.keys());
    }
    getLocationForPc(pc) {
        return this.pcToLocation.get(pc);
    }
    getPcsOnSourceLine(sourceIndex, line) {
        const pcs = this.sourceAndLineToPc.get(`${sourceIndex}:${line}`);
        if (pcs === undefined)
            return [];
        return pcs;
    }
}

const defaultAppId = 1380011588;
const defaultMaxWidth = 30;
/**
 * createDryrun takes an Algod Client (from algod.AlgodV2Client) and an array of Signed Transactions
 * from (transaction.SignedTransaction) and creates a DryrunRequest object with relevant balances
 * @param client - the AlgodClient to make requests against
 * @param txns - the array of SignedTransaction to use for generating the DryrunRequest object
 * @param protocolVersion - the string representing the protocol version to use
 * @param latestTimestamp - the timestamp
 * @param round - the round available to some TEAL scripts. Defaults to the current round on the network.
 * @param sources - TEAL source text that gets uploaded, compiled, and inserted into transactions or application state.
 * @returns the DryrunRequest object constructed from the SignedTransactions passed
 */
async function createDryrun({ client, txns, protocolVersion, latestTimestamp, round, sources, }) {
    const appInfos = [];
    const acctInfos = [];
    const apps = [];
    const assets = [];
    const accts = [];
    for (const t of txns) {
        if (t.txn.type === TransactionType.appl) {
            accts.push(t.txn.sender.toString());
            accts.push(...t.txn.applicationCall.accounts.map((a) => a.toString()));
            apps.push(...t.txn.applicationCall.foreignApps);
            accts.push(...t.txn
                .applicationCall.foreignApps.map(getApplicationAddress)
                .map((a) => a.toString()));
            assets.push(...t.txn.applicationCall.foreignAssets);
            // Create application,
            if (t.txn.applicationCall.appIndex === BigInt(0)) {
                appInfos.push(new Application$1({
                    id: defaultAppId,
                    params: new ApplicationParams$1({
                        creator: t.txn.sender.toString(),
                        approvalProgram: t.txn.applicationCall.approvalProgram,
                        clearStateProgram: t.txn.applicationCall.clearProgram,
                        localStateSchema: new ApplicationStateSchema$1({
                            numUint: t.txn.applicationCall.numLocalInts,
                            numByteSlice: t.txn.applicationCall.numLocalByteSlices,
                        }),
                        globalStateSchema: new ApplicationStateSchema$1({
                            numUint: t.txn.applicationCall.numGlobalInts,
                            numByteSlice: t.txn.applicationCall.numGlobalByteSlices,
                        }),
                    }),
                }));
            }
            else {
                const { appIndex } = t.txn.applicationCall;
                apps.push(appIndex);
                accts.push(getApplicationAddress(appIndex).toString());
            }
        }
    }
    // Dedupe and add creator to accts array
    const assetPromises = [];
    for (const assetId of new Set(assets)) {
        assetPromises.push(client
            .getAssetByID(assetId)
            .do()
            .then((assetInfo) => {
            accts.push(assetInfo.params.creator);
        }));
    }
    // Wait for assets to finish since we append to accts array
    await Promise.all(assetPromises);
    // Dedupe and get app info for all apps
    const appPromises = [];
    for (const appId of new Set(apps)) {
        appPromises.push(client
            .getApplicationByID(appId)
            .do()
            .then((appInfo) => {
            appInfos.push(appInfo);
            accts.push(appInfo.params.creator.toString());
        }));
    }
    await Promise.all(appPromises);
    const acctPromises = [];
    for (const acct of new Set(accts)) {
        acctPromises.push(client
            .accountInformation(acct)
            .do()
            .then((acctInfo) => {
            acctInfos.push(acctInfo);
        }));
    }
    await Promise.all(acctPromises);
    return new DryrunRequest({
        txns: txns.slice(),
        accounts: acctInfos,
        apps: appInfos,
        latestTimestamp: latestTimestamp ?? 0,
        round: round ?? 0,
        protocolVersion: protocolVersion ?? '',
        sources: sources ?? [],
    });
}
function truncate(str, maxValueWidth) {
    if (str.length > maxValueWidth && maxValueWidth > 0) {
        return `${str.slice(0, maxValueWidth)}...`;
    }
    return str;
}
function scratchToString(prevScratch, currScratch) {
    if (currScratch.length === 0)
        return '';
    let newScratchIdx = null;
    for (let idx = 0; idx < currScratch.length; idx++) {
        if (idx > prevScratch.length) {
            newScratchIdx = idx;
            continue;
        }
        if (stringifyJSON(prevScratch[idx]) !== stringifyJSON(currScratch[idx])) {
            newScratchIdx = idx;
        }
    }
    if (newScratchIdx == null)
        return '';
    const newScratch = currScratch[newScratchIdx];
    if (newScratch.bytes.length > 0) {
        return `${newScratchIdx} = 0x${bytesToHex(newScratch.bytes)}`;
    }
    return `${newScratchIdx} = ${newScratch.uint.toString()}`;
}
function stackToString(stack, reverse) {
    const svs = reverse ? stack.reverse() : stack;
    return `[${svs
        .map((sv) => {
        switch (sv.type) {
            case 1:
                return `0x${bytesToHex(sv.bytes)}`;
            case 2:
                return sv.uint.toString();
            default:
                return '';
        }
    })
        .join(', ')}]`;
}
function dryrunTrace(trace, disassembly, spc) {
    const maxWidth = spc.maxValueWidth || defaultMaxWidth;
    // Create the array of arrays, each sub array contains N columns
    const lines = [['pc#', 'ln#', 'source', 'scratch', 'stack']];
    for (let idx = 0; idx < trace.length; idx++) {
        const { line, error, pc, scratch, stack } = trace[idx];
        const currScratch = scratch !== undefined ? scratch : [];
        const prevScratch = idx > 0 && trace[idx - 1].scratch !== undefined
            ? trace[idx - 1].scratch
            : [];
        const src = !error ? disassembly[line] : `!! ${error} !!`;
        lines.push([
            pc.toString().padEnd(3, ' '),
            line.toString().padEnd(3, ' '),
            truncate(src, maxWidth),
            truncate(scratchToString(prevScratch, currScratch), maxWidth),
            truncate(stackToString(stack, spc.topOfStackFirst), maxWidth),
        ]);
    }
    // Get the max length for each column
    const maxLengths = lines.reduce((prev, curr) => {
        const newVal = new Array(lines[0].length).fill(0);
        for (let idx = 0; idx < prev.length; idx++) {
            newVal[idx] = curr[idx].length > prev[idx] ? curr[idx].length : prev[idx];
        }
        return newVal;
    }, new Array(lines[0].length).fill(0));
    return `${lines
        .map((line) => line
        .map((v, idx) => v.padEnd(maxLengths[idx] + 1, ' '))
        .join('|')
        .trim())
        .join('\n')}\n`;
}
function dryrunTxnResultAppTrace(result, spc) {
    if (!result.appCallTrace || !result.disassembly)
        return '';
    let conf = spc;
    if (spc !== undefined)
        conf = spc;
    else {
        conf = {
            maxValueWidth: defaultMaxWidth,
            topOfStackFirst: false,
        };
    }
    return dryrunTrace(result.appCallTrace, result.disassembly, conf);
}
function dryrunTxnResultLogicSigTrace(result, spc) {
    if (!result.logicSigTrace || !result.logicSigDisassembly)
        return '';
    let conf;
    if (spc !== undefined)
        conf = spc;
    else {
        conf = {
            maxValueWidth: defaultMaxWidth,
            topOfStackFirst: true,
        };
    }
    return dryrunTrace(result.logicSigTrace, result.logicSigDisassembly, conf);
}

/**
 * Create a new payment transaction
 *
 * @param options - Payment transaction parameters
 */
function makePaymentTxnWithSuggestedParamsFromObject({ sender, receiver, amount, closeRemainderTo, suggestedParams, note, lease, rekeyTo, }) {
    return new Transaction$1({
        type: TransactionType.pay,
        sender,
        note,
        lease,
        rekeyTo,
        suggestedParams,
        paymentParams: {
            receiver,
            amount,
            closeRemainderTo,
        },
    });
}
/**
 * Create a new key registration transaction
 *
 * @param options - Key registration transaction parameters
 */
function makeKeyRegistrationTxnWithSuggestedParamsFromObject({ sender, voteKey, selectionKey, stateProofKey, voteFirst, voteLast, voteKeyDilution, nonParticipation, suggestedParams, note, lease, rekeyTo, }) {
    return new Transaction$1({
        type: TransactionType.keyreg,
        sender,
        note,
        lease,
        rekeyTo,
        suggestedParams,
        keyregParams: {
            voteKey,
            selectionKey,
            stateProofKey,
            voteFirst,
            voteLast,
            voteKeyDilution,
            nonParticipation,
        },
    });
}
/**
 * Base function for creating any type of asset config transaction.
 *
 * @param options - Asset config transaction parameters
 */
function makeBaseAssetConfigTxn({ sender, assetIndex, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, note, lease, rekeyTo, suggestedParams, }) {
    return new Transaction$1({
        type: TransactionType.acfg,
        sender,
        note,
        lease,
        rekeyTo,
        suggestedParams,
        assetConfigParams: {
            assetIndex,
            total,
            decimals,
            defaultFrozen,
            manager,
            reserve,
            freeze,
            clawback,
            unitName,
            assetName,
            assetURL,
            assetMetadataHash,
        },
    });
}
/**
 * Create a new asset creation transaction
 *
 * @param options - Asset creation transaction parameters
 */
function makeAssetCreateTxnWithSuggestedParamsFromObject({ sender, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, note, lease, rekeyTo, suggestedParams, }) {
    return makeBaseAssetConfigTxn({
        sender,
        total,
        decimals,
        defaultFrozen,
        manager,
        reserve,
        freeze,
        clawback,
        unitName,
        assetName,
        assetURL,
        assetMetadataHash,
        note,
        lease,
        rekeyTo,
        suggestedParams,
    });
}
/**
 * Create a new asset config transaction. This transaction can be issued by the asset manager to
 * change the manager, reserve, freeze, or clawback address.
 *
 * You must respecify existing addresses to keep them the same; leaving a field blank is the same as
 * turning that feature off for this asset.
 *
 * @param options - Asset modification transaction parameters
 */
function makeAssetConfigTxnWithSuggestedParamsFromObject({ sender, assetIndex, manager, reserve, freeze, clawback, strictEmptyAddressChecking, note, lease, rekeyTo, suggestedParams, }) {
    if (!assetIndex) {
        throw Error('assetIndex must be provided');
    }
    const strictChecking = strictEmptyAddressChecking ?? true;
    if (strictChecking &&
        (manager == null || reserve == null || freeze == null || clawback == null)) {
        throw Error('strictEmptyAddressChecking is enabled, but an address is empty. If this is intentional, set strictEmptyAddressChecking to false.');
    }
    return makeBaseAssetConfigTxn({
        sender,
        assetIndex,
        manager,
        reserve,
        freeze,
        clawback,
        note,
        lease,
        rekeyTo,
        suggestedParams,
    });
}
/**
 * Create a new asset destroy transaction. This will allow the asset's manager to remove this asset
 * from the ledger, provided all outstanding assets are held by the creator.
 *
 * @param options - Asset destroy transaction parameters
 */
function makeAssetDestroyTxnWithSuggestedParamsFromObject({ sender, assetIndex, note, lease, rekeyTo, suggestedParams, }) {
    if (!assetIndex) {
        throw Error('assetIndex must be provided');
    }
    return makeBaseAssetConfigTxn({
        sender,
        assetIndex,
        note,
        lease,
        rekeyTo,
        suggestedParams,
    });
}
/**
 * Create a new asset freeze transaction. This transaction allows the asset's freeze manager to
 * freeze or un-freeze an account, blocking or allowing asset transfers to and from the targeted
 * account.
 *
 * @param options - Asset freeze transaction parameters
 */
function makeAssetFreezeTxnWithSuggestedParamsFromObject({ sender, assetIndex, freezeTarget, frozen, suggestedParams, note, lease, rekeyTo, }) {
    return new Transaction$1({
        type: TransactionType.afrz,
        sender,
        note,
        lease,
        rekeyTo,
        suggestedParams,
        assetFreezeParams: {
            assetIndex,
            freezeTarget,
            frozen,
        },
    });
}
/**
 * Create a new asset transfer transaction.
 *
 * Special case: to opt into an assets, set amount=0 and sender=receiver.
 *
 * @param options - Asset transfer transaction parameters
 */
function makeAssetTransferTxnWithSuggestedParamsFromObject({ sender, receiver, amount, closeRemainderTo, assetSender, note, assetIndex, suggestedParams, rekeyTo, lease, }) {
    if (!assetIndex) {
        throw Error('assetIndex must be provided');
    }
    return new Transaction$1({
        type: TransactionType.axfer,
        sender,
        note,
        lease,
        rekeyTo,
        suggestedParams,
        assetTransferParams: {
            assetIndex,
            receiver,
            amount,
            assetSender,
            closeRemainderTo,
        },
    });
}
/**
 * Base function for creating any application call transaction.
 *
 * @param options - Application call transaction parameters
 */
function makeApplicationCallTxnFromObject({ sender, appIndex, onComplete, appArgs, accounts, foreignApps, foreignAssets, boxes, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, extraPages, note, lease, rekeyTo, suggestedParams, }) {
    if (onComplete == null) {
        throw Error('onComplete must be provided');
    }
    return new Transaction$1({
        type: TransactionType.appl,
        sender,
        note,
        lease,
        rekeyTo,
        suggestedParams,
        appCallParams: {
            appIndex,
            onComplete,
            appArgs,
            accounts,
            foreignAssets,
            foreignApps,
            boxes,
            approvalProgram,
            clearProgram,
            numLocalInts,
            numLocalByteSlices,
            numGlobalInts,
            numGlobalByteSlices,
            extraPages,
        },
    });
}
/**
 * Make a transaction that will create an application.
 *
 * @param options - Application creation transaction parameters
 */
function makeApplicationCreateTxnFromObject({ sender, onComplete, appArgs, accounts, foreignApps, foreignAssets, boxes, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, extraPages, note, lease, rekeyTo, suggestedParams, }) {
    if (!approvalProgram || !clearProgram) {
        throw Error('approvalProgram and clearProgram must be provided');
    }
    if (onComplete == null) {
        throw Error('onComplete must be provided');
    }
    return makeApplicationCallTxnFromObject({
        sender,
        appIndex: 0,
        onComplete,
        appArgs,
        accounts,
        foreignApps,
        foreignAssets,
        boxes,
        approvalProgram,
        clearProgram,
        numLocalInts,
        numLocalByteSlices,
        numGlobalInts,
        numGlobalByteSlices,
        extraPages,
        note,
        lease,
        rekeyTo,
        suggestedParams,
    });
}
/**
 * Make a transaction that changes an application's approval and clear programs
 *
 * @param options - Application update transaction parameters
 */
function makeApplicationUpdateTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, approvalProgram, clearProgram, note, lease, rekeyTo, suggestedParams, }) {
    if (!appIndex) {
        throw Error('appIndex must be provided');
    }
    if (!approvalProgram || !clearProgram) {
        throw Error('approvalProgram and clearProgram must be provided');
    }
    return makeApplicationCallTxnFromObject({
        sender,
        appIndex,
        onComplete: OnApplicationComplete.UpdateApplicationOC,
        appArgs,
        accounts,
        foreignApps,
        foreignAssets,
        boxes,
        approvalProgram,
        clearProgram,
        note,
        lease,
        rekeyTo,
        suggestedParams,
    });
}
/**
 * Make a transaction that deletes an application
 *
 * @param options - Application deletion transaction parameters
 */
function makeApplicationDeleteTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, note, lease, rekeyTo, suggestedParams, }) {
    if (!appIndex) {
        throw Error('appIndex must be provided');
    }
    return makeApplicationCallTxnFromObject({
        sender,
        appIndex,
        onComplete: OnApplicationComplete.DeleteApplicationOC,
        appArgs,
        accounts,
        foreignApps,
        foreignAssets,
        boxes,
        note,
        lease,
        rekeyTo,
        suggestedParams,
    });
}
/**
 * Make a transaction that opts in to use an application
 *
 * @param options - Application opt-in transaction parameters
 */
function makeApplicationOptInTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, note, lease, rekeyTo, suggestedParams, }) {
    if (!appIndex) {
        throw Error('appIndex must be provided');
    }
    return makeApplicationCallTxnFromObject({
        sender,
        appIndex,
        onComplete: OnApplicationComplete.OptInOC,
        appArgs,
        accounts,
        foreignApps,
        foreignAssets,
        boxes,
        note,
        lease,
        rekeyTo,
        suggestedParams,
    });
}
/**
 * Make a transaction that closes out a user's state in an application
 *
 * @param options - Application close-out transaction parameters
 */
function makeApplicationCloseOutTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, note, lease, rekeyTo, suggestedParams, }) {
    if (!appIndex) {
        throw Error('appIndex must be provided');
    }
    return makeApplicationCallTxnFromObject({
        sender,
        appIndex,
        onComplete: OnApplicationComplete.CloseOutOC,
        appArgs,
        accounts,
        foreignApps,
        foreignAssets,
        boxes,
        note,
        lease,
        rekeyTo,
        suggestedParams,
    });
}
/**
 * Make a transaction that clears a user's state in an application
 *
 * @param options - Application clear state transaction parameters
 */
function makeApplicationClearStateTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, note, lease, rekeyTo, suggestedParams, }) {
    if (!appIndex) {
        throw Error('appIndex must be provided');
    }
    return makeApplicationCallTxnFromObject({
        sender,
        appIndex,
        onComplete: OnApplicationComplete.ClearStateOC,
        appArgs,
        accounts,
        foreignApps,
        foreignAssets,
        boxes,
        note,
        lease,
        rekeyTo,
        suggestedParams,
    });
}
/**
 * Make a transaction that just calls an application, doing nothing on completion
 *
 * @param options - Application no-op transaction parameters
 */
function makeApplicationNoOpTxnFromObject({ sender, appIndex, appArgs, accounts, foreignApps, foreignAssets, boxes, note, lease, rekeyTo, suggestedParams, }) {
    if (!appIndex) {
        throw Error('appIndex must be provided');
    }
    return makeApplicationCallTxnFromObject({
        sender,
        appIndex,
        onComplete: OnApplicationComplete.NoOpOC,
        appArgs,
        accounts,
        foreignApps,
        foreignAssets,
        boxes,
        note,
        lease,
        rekeyTo,
        suggestedParams,
    });
}

/**
 * Create a TransactionSigner that can sign transactions for the provided basic Account.
 */
function makeBasicAccountTransactionSigner(account) {
    return (txnGroup, indexesToSign) => {
        const signed = [];
        for (const index of indexesToSign) {
            signed.push(txnGroup[index].signTxn(account.sk));
        }
        return Promise.resolve(signed);
    };
}
/**
 * Create a TransactionSigner that can sign transactions for the provided LogicSigAccount.
 */
function makeLogicSigAccountTransactionSigner(account) {
    return (txnGroup, indexesToSign) => {
        const signed = [];
        for (const index of indexesToSign) {
            const { blob } = signLogicSigTransactionObject(txnGroup[index], account);
            signed.push(blob);
        }
        return Promise.resolve(signed);
    };
}
/**
 * Create a TransactionSigner that can sign transactions for the provided Multisig account.
 * @param msig - The Multisig account metadata
 * @param sks - An array of private keys belonging to the msig which should sign the transactions.
 */
function makeMultiSigAccountTransactionSigner(msig, sks) {
    return (txnGroup, indexesToSign) => {
        const signed = [];
        for (const index of indexesToSign) {
            const txn = txnGroup[index];
            const partialSigs = [];
            for (const sk of sks) {
                const { blob } = signMultisigTransaction(txn, msig, sk);
                partialSigs.push(blob);
            }
            if (partialSigs.length > 1) {
                signed.push(mergeMultisigTransactions(partialSigs));
            }
            else {
                signed.push(partialSigs[0]);
            }
        }
        return Promise.resolve(signed);
    };
}
/**
 * Create a makeEmptyTransactionSigner that does not specify any signer or
 * signing capabilities. This should only be used to simulate transactions.
 */
function makeEmptyTransactionSigner() {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return (txnGroup, indexesToSign) => {
        const unsigned = [];
        for (const index of indexesToSign) {
            unsigned.push(encodeUnsignedSimulateTransaction(txnGroup[index]));
        }
        return Promise.resolve(unsigned);
    };
}
/**
 * Check if a value conforms to the TransactionWithSigner structure.
 * @param value - The value to check.
 * @returns True if an only if the value has the structure of a TransactionWithSigner.
 */
function isTransactionWithSigner(value) {
    return (typeof value === 'object' &&
        Object.keys(value).length === 2 &&
        typeof value.txn === 'object' &&
        typeof value.signer === 'function');
}

/* eslint-disable no-bitwise */
/* eslint-disable no-use-before-define */
/* eslint-disable class-methods-use-this */
/**
    //ABI-Types: uint<N>: An N-bit unsigned integer (8 <= N <= 512 and N % 8 = 0).
    // | byte (alias for uint8)
    // | ufixed <N> x <M> (8 <= N <= 512, N % 8 = 0, and 0 < M <= 160)
    // | bool
    // | address (alias for byte[32])
    // | <type> [<N>]
    // | <type> []
    // | string
    // | (T1, ..., Tn)
*/
const MAX_LEN = 2 ** 16 - 1;
const ADDR_BYTE_SIZE = 32;
const SINGLE_BYTE_SIZE = 1;
const SINGLE_BOOL_SIZE = 1;
const LENGTH_ENCODE_BYTE_SIZE = 2;
const staticArrayRegexp = /^([a-z\d[\](),]+)\[(0|[1-9][\d]*)]$/;
const ufixedRegexp = /^ufixed([1-9][\d]*)x([1-9][\d]*)$/;
class ABIType {
    // De-serializes the ABI type from a string using the ABI specs
    static from(str) {
        if (str.endsWith('[]')) {
            const arrayArgType = ABIType.from(str.slice(0, str.length - 2));
            return new ABIArrayDynamicType(arrayArgType);
        }
        if (str.endsWith(']')) {
            const stringMatches = str.match(staticArrayRegexp);
            // Match the string itself, array element type, then array length
            if (!stringMatches || stringMatches.length !== 3) {
                throw new Error(`malformed static array string: ${str}`);
            }
            // Parse static array using regex
            const arrayLengthStr = stringMatches[2];
            const arrayLength = parseInt(arrayLengthStr, 10);
            if (arrayLength > MAX_LEN) {
                throw new Error(`array length exceeds limit ${MAX_LEN}`);
            }
            // Parse the array element type
            const arrayType = ABIType.from(stringMatches[1]);
            return new ABIArrayStaticType(arrayType, arrayLength);
        }
        if (str.startsWith('uint')) {
            // Checks if the parsed number contains only digits, no whitespaces
            const digitsOnly = (s) => [...s].every((c) => '0123456789'.includes(c));
            const typeSizeStr = str.slice(4, str.length);
            if (!digitsOnly(typeSizeStr)) {
                throw new Error(`malformed uint string: ${typeSizeStr}`);
            }
            const typeSize = parseInt(typeSizeStr, 10);
            if (typeSize > MAX_LEN) {
                throw new Error(`malformed uint string: ${typeSize}`);
            }
            return new ABIUintType(typeSize);
        }
        if (str === 'byte') {
            return new ABIByteType();
        }
        if (str.startsWith('ufixed')) {
            const stringMatches = str.match(ufixedRegexp);
            if (!stringMatches || stringMatches.length !== 3) {
                throw new Error(`malformed ufixed type: ${str}`);
            }
            const ufixedSize = parseInt(stringMatches[1], 10);
            const ufixedPrecision = parseInt(stringMatches[2], 10);
            return new ABIUfixedType(ufixedSize, ufixedPrecision);
        }
        if (str === 'bool') {
            return new ABIBoolType();
        }
        if (str === 'address') {
            return new ABIAddressType();
        }
        if (str === 'string') {
            return new ABIStringType();
        }
        if (str.length >= 2 && str[0] === '(' && str[str.length - 1] === ')') {
            const tupleContent = ABITupleType.parseTupleContent(str.slice(1, str.length - 1));
            const tupleTypes = [];
            for (let i = 0; i < tupleContent.length; i++) {
                const ti = ABIType.from(tupleContent[i]);
                tupleTypes.push(ti);
            }
            return new ABITupleType(tupleTypes);
        }
        throw new Error(`cannot convert a string ${str} to an ABI type`);
    }
}
class ABIUintType extends ABIType {
    constructor(size) {
        super();
        if (size % 8 !== 0 || size < 8 || size > 512) {
            throw new Error(`unsupported uint type bitSize: ${size}`);
        }
        this.bitSize = size;
    }
    toString() {
        return `uint${this.bitSize}`;
    }
    equals(other) {
        return other instanceof ABIUintType && this.bitSize === other.bitSize;
    }
    isDynamic() {
        return false;
    }
    byteLen() {
        return this.bitSize / 8;
    }
    encode(value) {
        if (typeof value !== 'bigint' && typeof value !== 'number') {
            throw new Error(`Cannot encode value as uint${this.bitSize}: ${value}`);
        }
        if (value >= BigInt(2 ** this.bitSize) || value < BigInt(0)) {
            throw new Error(`${value} is not a non-negative int or too big to fit in size uint${this.bitSize}`);
        }
        if (typeof value === 'number' && !Number.isSafeInteger(value)) {
            throw new Error(`${value} should be converted into a BigInt before it is encoded`);
        }
        return bigIntToBytes(value, this.bitSize / 8);
    }
    decode(byteString) {
        if (byteString.length !== this.bitSize / 8) {
            throw new Error(`byte string must correspond to a uint${this.bitSize}`);
        }
        return bytesToBigInt(byteString);
    }
}
class ABIUfixedType extends ABIType {
    constructor(size, denominator) {
        super();
        if (size % 8 !== 0 || size < 8 || size > 512) {
            throw new Error(`unsupported ufixed type bitSize: ${size}`);
        }
        if (denominator > 160 || denominator < 1) {
            throw new Error(`unsupported ufixed type precision: ${denominator}`);
        }
        this.bitSize = size;
        this.precision = denominator;
    }
    toString() {
        return `ufixed${this.bitSize}x${this.precision}`;
    }
    equals(other) {
        return (other instanceof ABIUfixedType &&
            this.bitSize === other.bitSize &&
            this.precision === other.precision);
    }
    isDynamic() {
        return false;
    }
    byteLen() {
        return this.bitSize / 8;
    }
    encode(value) {
        if (typeof value !== 'bigint' && typeof value !== 'number') {
            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);
        }
        if (value >= BigInt(2 ** this.bitSize) || value < BigInt(0)) {
            throw new Error(`${value} is not a non-negative int or too big to fit in size ${this.toString()}`);
        }
        if (typeof value === 'number' && !Number.isSafeInteger(value)) {
            throw new Error(`${value} should be converted into a BigInt before it is encoded`);
        }
        return bigIntToBytes(value, this.bitSize / 8);
    }
    decode(byteString) {
        if (byteString.length !== this.bitSize / 8) {
            throw new Error(`byte string must correspond to a ${this.toString()}`);
        }
        return bytesToBigInt(byteString);
    }
}
class ABIAddressType extends ABIType {
    toString() {
        return 'address';
    }
    equals(other) {
        return other instanceof ABIAddressType;
    }
    isDynamic() {
        return false;
    }
    byteLen() {
        return ADDR_BYTE_SIZE;
    }
    encode(value) {
        if (typeof value === 'string') {
            const decodedAddress = decodeAddress(value);
            return decodedAddress.publicKey;
        }
        if (value instanceof Address) {
            return value.publicKey;
        }
        if (value instanceof Uint8Array) {
            if (value.byteLength !== 32) {
                throw new Error(`byte string must be 32 bytes long for an address`);
            }
            return value;
        }
        throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);
    }
    decode(byteString) {
        if (byteString.byteLength !== 32) {
            throw new Error(`byte string must be 32 bytes long for an address`);
        }
        return encodeAddress(byteString);
    }
}
class ABIBoolType extends ABIType {
    toString() {
        return 'bool';
    }
    equals(other) {
        return other instanceof ABIBoolType;
    }
    isDynamic() {
        return false;
    }
    byteLen() {
        return SINGLE_BOOL_SIZE;
    }
    encode(value) {
        if (typeof value !== 'boolean') {
            throw new Error(`Cannot encode value as bool: ${value}`);
        }
        if (value) {
            return new Uint8Array([128]);
        }
        return new Uint8Array([0]);
    }
    decode(byteString) {
        if (byteString.byteLength !== 1) {
            throw new Error(`bool string must be 1 byte long`);
        }
        const value = byteString[0];
        if (value === 128) {
            return true;
        }
        if (value === 0) {
            return false;
        }
        throw new Error(`boolean could not be decoded from the byte string`);
    }
}
class ABIByteType extends ABIType {
    toString() {
        return 'byte';
    }
    equals(other) {
        return other instanceof ABIByteType;
    }
    isDynamic() {
        return false;
    }
    byteLen() {
        return SINGLE_BYTE_SIZE;
    }
    encode(value) {
        if (typeof value !== 'number' && typeof value !== 'bigint') {
            throw new Error(`Cannot encode value as byte: ${value}`);
        }
        if (typeof value === 'bigint') {
            // eslint-disable-next-line no-param-reassign
            value = Number(value);
        }
        if (value < 0 || value > 255) {
            throw new Error(`${value} cannot be encoded into a byte`);
        }
        return new Uint8Array([value]);
    }
    decode(byteString) {
        if (byteString.byteLength !== 1) {
            throw new Error(`byte string must be 1 byte long`);
        }
        return byteString[0];
    }
}
class ABIStringType extends ABIType {
    toString() {
        return 'string';
    }
    equals(other) {
        return other instanceof ABIStringType;
    }
    isDynamic() {
        return true;
    }
    byteLen() {
        throw new Error(`${this.toString()} is a dynamic type`);
    }
    encode(value) {
        if (typeof value !== 'string' && !(value instanceof Uint8Array)) {
            throw new Error(`Cannot encode value as string: ${value}`);
        }
        let encodedBytes;
        if (typeof value === 'string') {
            encodedBytes = new TextEncoder().encode(value);
        }
        else {
            encodedBytes = value;
        }
        const encodedLength = bigIntToBytes(encodedBytes.length, LENGTH_ENCODE_BYTE_SIZE);
        const mergedBytes = new Uint8Array(encodedBytes.length + LENGTH_ENCODE_BYTE_SIZE);
        mergedBytes.set(encodedLength);
        mergedBytes.set(encodedBytes, LENGTH_ENCODE_BYTE_SIZE);
        return mergedBytes;
    }
    decode(byteString) {
        if (byteString.length < LENGTH_ENCODE_BYTE_SIZE) {
            throw new Error(`byte string is too short to be decoded. Actual length is ${byteString.length}, but expected at least ${LENGTH_ENCODE_BYTE_SIZE}`);
        }
        const view = new DataView(byteString.buffer, byteString.byteOffset, LENGTH_ENCODE_BYTE_SIZE);
        const byteLength = view.getUint16(0);
        const byteValue = byteString.slice(LENGTH_ENCODE_BYTE_SIZE, byteString.length);
        if (byteLength !== byteValue.length) {
            throw new Error(`string length bytes do not match the actual length of string. Expected ${byteLength}, got ${byteValue.length}`);
        }
        return new TextDecoder('utf-8').decode(byteValue);
    }
}
class ABIArrayStaticType extends ABIType {
    constructor(argType, arrayLength) {
        super();
        if (arrayLength < 0) {
            throw new Error(`static array must have a non negative length: ${arrayLength}`);
        }
        this.childType = argType;
        this.staticLength = arrayLength;
    }
    toString() {
        return `${this.childType.toString()}[${this.staticLength}]`;
    }
    equals(other) {
        return (other instanceof ABIArrayStaticType &&
            this.staticLength === other.staticLength &&
            this.childType.equals(other.childType));
    }
    isDynamic() {
        return this.childType.isDynamic();
    }
    byteLen() {
        if (this.childType.constructor === ABIBoolType) {
            return Math.ceil(this.staticLength / 8);
        }
        return this.staticLength * this.childType.byteLen();
    }
    encode(value) {
        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {
            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);
        }
        if (value.length !== this.staticLength) {
            throw new Error(`Value array does not match static array length. Expected ${this.staticLength}, got ${value.length}`);
        }
        const convertedTuple = this.toABITupleType();
        return convertedTuple.encode(value);
    }
    decode(byteString) {
        const convertedTuple = this.toABITupleType();
        return convertedTuple.decode(byteString);
    }
    toABITupleType() {
        return new ABITupleType(Array(this.staticLength).fill(this.childType));
    }
}
class ABIArrayDynamicType extends ABIType {
    constructor(argType) {
        super();
        this.childType = argType;
    }
    toString() {
        return `${this.childType.toString()}[]`;
    }
    equals(other) {
        return (other instanceof ABIArrayDynamicType &&
            this.childType.equals(other.childType));
    }
    isDynamic() {
        return true;
    }
    byteLen() {
        throw new Error(`${this.toString()} is a dynamic type`);
    }
    encode(value) {
        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {
            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);
        }
        const convertedTuple = this.toABITupleType(value.length);
        const encodedTuple = convertedTuple.encode(value);
        const encodedLength = bigIntToBytes(convertedTuple.childTypes.length, LENGTH_ENCODE_BYTE_SIZE);
        const mergedBytes = concatArrays(encodedLength, encodedTuple);
        return mergedBytes;
    }
    decode(byteString) {
        const view = new DataView(byteString.buffer, 0, LENGTH_ENCODE_BYTE_SIZE);
        const byteLength = view.getUint16(0);
        const convertedTuple = this.toABITupleType(byteLength);
        return convertedTuple.decode(byteString.slice(LENGTH_ENCODE_BYTE_SIZE, byteString.length));
    }
    toABITupleType(length) {
        return new ABITupleType(Array(length).fill(this.childType));
    }
}
class ABITupleType extends ABIType {
    constructor(argTypes) {
        super();
        if (argTypes.length >= MAX_LEN) {
            throw new Error('tuple type child type number larger than maximum uint16 error');
        }
        this.childTypes = argTypes;
    }
    toString() {
        const typeStrings = [];
        for (let i = 0; i < this.childTypes.length; i++) {
            typeStrings[i] = this.childTypes[i].toString();
        }
        return `(${typeStrings.join(',')})`;
    }
    equals(other) {
        return (other instanceof ABITupleType &&
            this.childTypes.length === other.childTypes.length &&
            this.childTypes.every((child, index) => child.equals(other.childTypes[index])));
    }
    isDynamic() {
        const isDynamic = (child) => child.isDynamic();
        return this.childTypes.some(isDynamic);
    }
    byteLen() {
        let size = 0;
        for (let i = 0; i < this.childTypes.length; i++) {
            if (this.childTypes[i].constructor === ABIBoolType) {
                const after = findBoolLR(this.childTypes, i, 1);
                const boolNum = after + 1;
                i += after;
                size += Math.trunc((boolNum + 7) / 8);
            }
            else {
                const childByteSize = this.childTypes[i].byteLen();
                size += childByteSize;
            }
        }
        return size;
    }
    encode(value) {
        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {
            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);
        }
        const values = Array.from(value);
        if (value.length > MAX_LEN) {
            throw new Error('length of tuple array should not exceed a uint16');
        }
        const tupleTypes = this.childTypes;
        const heads = [];
        const tails = [];
        const isDynamicIndex = new Map();
        let i = 0;
        while (i < tupleTypes.length) {
            const tupleType = tupleTypes[i];
            if (tupleType.isDynamic()) {
                // Head is not pre-determined for dynamic types; store a placeholder for now
                isDynamicIndex.set(heads.length, true);
                heads.push(new Uint8Array([0, 0]));
                tails.push(tupleType.encode(values[i]));
            }
            else {
                if (tupleType.constructor === ABIBoolType) {
                    const before = findBoolLR(tupleTypes, i, -1);
                    let after = findBoolLR(tupleTypes, i, 1);
                    // Pack bytes to heads and tails
                    if (before % 8 !== 0) {
                        throw new Error('expected before index should have number of bool mod 8 equal 0');
                    }
                    after = Math.min(7, after);
                    const compressedInt = compressMultipleBool(values.slice(i, i + after + 1));
                    heads.push(bigIntToBytes(compressedInt, 1));
                    i += after;
                }
                else {
                    const encodedTupleValue = tupleType.encode(values[i]);
                    heads.push(encodedTupleValue);
                }
                isDynamicIndex.set(i, false);
                tails.push(new Uint8Array());
            }
            i += 1;
        }
        // Adjust head lengths for dynamic types
        let headLength = 0;
        for (const headElement of heads) {
            headLength += headElement.length;
        }
        // encode any placeholders for dynamic types
        let tailLength = 0;
        for (let j = 0; j < heads.length; j++) {
            if (isDynamicIndex.get(j)) {
                const headValue = headLength + tailLength;
                if (headValue > MAX_LEN) {
                    throw new Error(`byte length of ${headValue} should not exceed a uint16`);
                }
                heads[j] = bigIntToBytes(headValue, LENGTH_ENCODE_BYTE_SIZE);
            }
            tailLength += tails[j].length;
        }
        return concatArrays(...heads, ...tails);
    }
    decode(byteString) {
        const tupleTypes = this.childTypes;
        const dynamicSegments = [];
        const valuePartition = [];
        let i = 0;
        let iterIndex = 0;
        const view = new DataView(byteString.buffer);
        while (i < tupleTypes.length) {
            const tupleType = tupleTypes[i];
            if (tupleType.isDynamic()) {
                if (byteString.slice(iterIndex, byteString.length).length <
                    LENGTH_ENCODE_BYTE_SIZE) {
                    throw new Error('dynamic type in tuple is too short to be decoded');
                }
                // Since LENGTH_ENCODE_BYTE_SIZE is 2 and indices are at most 2 bytes,
                // we can use getUint16 using the iterIndex offset.
                const dynamicIndex = view.getUint16(iterIndex);
                if (dynamicSegments.length > 0) {
                    dynamicSegments[dynamicSegments.length - 1].right = dynamicIndex;
                    // Check that right side of segment is greater than the left side
                    if (dynamicIndex < dynamicSegments[dynamicSegments.length - 1].left) {
                        throw new Error('dynamic index segment miscalculation: left is greater than right index');
                    }
                }
                // Since we do not know where the current dynamic element ends, put a placeholder and update later
                const seg = {
                    left: dynamicIndex,
                    right: -1,
                };
                dynamicSegments.push(seg);
                valuePartition.push(null);
                iterIndex += LENGTH_ENCODE_BYTE_SIZE;
            }
            else {
                // eslint-disable-next-line no-lonely-if
                if (tupleType.constructor === ABIBoolType) {
                    const before = findBoolLR(this.childTypes, i, -1);
                    let after = findBoolLR(this.childTypes, i, 1);
                    if (before % 8 !== 0) {
                        throw new Error('expected before bool number mod 8 === 0');
                    }
                    after = Math.min(7, after);
                    // Parse bool in a byte to multiple byte strings
                    for (let boolIndex = 0; boolIndex <= after; boolIndex++) {
                        const boolMask = 0x80 >> boolIndex;
                        if ((byteString[iterIndex] & boolMask) > 0) {
                            valuePartition.push(new Uint8Array([128]));
                        }
                        else {
                            valuePartition.push(new Uint8Array([0]));
                        }
                    }
                    i += after;
                    iterIndex += 1;
                }
                else {
                    const currLen = tupleType.byteLen();
                    valuePartition.push(byteString.slice(iterIndex, iterIndex + currLen));
                    iterIndex += currLen;
                }
            }
            if (i !== tupleTypes.length - 1 && iterIndex >= byteString.length) {
                throw new Error('input byte not enough to decode');
            }
            i += 1;
        }
        if (dynamicSegments.length > 0) {
            dynamicSegments[dynamicSegments.length - 1].right = byteString.length;
            iterIndex = byteString.length;
        }
        if (iterIndex < byteString.length) {
            throw new Error('input byte not fully consumed');
        }
        // Check segment indices are valid
        // If the dynamic segment are not consecutive and well-ordered, we return error
        for (let j = 0; j < dynamicSegments.length; j++) {
            const seg = dynamicSegments[j];
            if (seg.left > seg.right) {
                throw new Error('dynamic segment should display a [l, r] space with l <= r');
            }
            if (j !== dynamicSegments.length - 1 &&
                seg.right !== dynamicSegments[j + 1].left) {
                throw new Error('dynamic segment should be consecutive');
            }
        }
        // Check dynamic element partitions
        let segIndex = 0;
        for (let j = 0; j < tupleTypes.length; j++) {
            if (tupleTypes[j].isDynamic()) {
                valuePartition[j] = byteString.slice(dynamicSegments[segIndex].left, dynamicSegments[segIndex].right);
                segIndex += 1;
            }
        }
        // Decode each tuple element
        const returnValues = [];
        for (let j = 0; j < tupleTypes.length; j++) {
            const valueTi = tupleTypes[j].decode(valuePartition[j]);
            returnValues.push(valueTi);
        }
        return returnValues;
    }
    static parseTupleContent(str) {
        if (str.length === 0) {
            return [];
        }
        if (str.endsWith(',') || str.startsWith(',')) {
            throw new Error('tuple string should not start with comma');
        }
        if (str.includes(',,')) {
            throw new Error('tuple string should not have consecutive commas');
        }
        const tupleStrings = [];
        let depth = 0;
        let word = '';
        for (const char of str) {
            word += char;
            if (char === '(') {
                depth += 1;
            }
            else if (char === ')') {
                depth -= 1;
            }
            else if (char === ',') {
                // If the comma is at depth 0, then append the word as token.
                if (depth === 0) {
                    tupleStrings.push(word.slice(0, word.length - 1));
                    word = '';
                }
            }
        }
        if (word.length !== 0) {
            tupleStrings.push(word);
        }
        if (depth !== 0) {
            throw new Error('tuple string has mismatched parentheses');
        }
        return tupleStrings;
    }
}
// compressMultipleBool compresses consecutive bool values into a byte in ABI tuple / array value.
function compressMultipleBool(valueList) {
    let res = 0;
    if (valueList.length > 8) {
        throw new Error('value list passed in should be no greater than length 8');
    }
    for (let i = 0; i < valueList.length; i++) {
        const boolVal = valueList[i];
        if (typeof boolVal !== 'boolean') {
            throw new Error('non-boolean values cannot be compressed into a byte');
        }
        if (boolVal) {
            res |= 1 << (7 - i);
        }
    }
    return res;
}
// Assume that the current index on the list of type is an ABI bool type.
// It returns the difference between the current index and the index of the furthest consecutive Bool type.
function findBoolLR(typeList, index, delta) {
    let until = 0;
    while (true) {
        const curr = index + delta * until;
        if (typeList[curr].constructor === ABIBoolType) {
            if (curr !== typeList.length - 1 && delta === 1) {
                until += 1;
            }
            else if (curr > 0 && delta === -1) {
                until += 1;
            }
            else {
                break;
            }
        }
        else {
            until -= 1;
            break;
        }
    }
    return until;
}

var ABITransactionType;
(function (ABITransactionType) {
    /**
     * Any transaction type
     */
    ABITransactionType["any"] = "txn";
    /**
     * Payment transaction type
     */
    ABITransactionType["pay"] = "pay";
    /**
     * Key registration transaction type
     */
    ABITransactionType["keyreg"] = "keyreg";
    /**
     * Asset configuration transaction type
     */
    ABITransactionType["acfg"] = "acfg";
    /**
     * Asset transfer transaction type
     */
    ABITransactionType["axfer"] = "axfer";
    /**
     * Asset freeze transaction type
     */
    ABITransactionType["afrz"] = "afrz";
    /**
     * Application transaction type
     */
    ABITransactionType["appl"] = "appl";
})(ABITransactionType || (ABITransactionType = {}));
function abiTypeIsTransaction(type) {
    return (type === ABITransactionType.any ||
        type === ABITransactionType.pay ||
        type === ABITransactionType.keyreg ||
        type === ABITransactionType.acfg ||
        type === ABITransactionType.axfer ||
        type === ABITransactionType.afrz ||
        type === ABITransactionType.appl);
}
function abiCheckTransactionType(type, txn) {
    if (type === ABITransactionType.any) {
        return true;
    }
    return txn.type ? txn.type.toString() === type.toString() : false;
}

var ABIReferenceType;
(function (ABIReferenceType) {
    /**
     * Account reference type
     */
    ABIReferenceType["account"] = "account";
    /**
     * Application reference type
     */
    ABIReferenceType["application"] = "application";
    /**
     * Asset reference type
     */
    ABIReferenceType["asset"] = "asset";
})(ABIReferenceType || (ABIReferenceType = {}));
function abiTypeIsReference(type) {
    return (type === ABIReferenceType.account ||
        type === ABIReferenceType.application ||
        type === ABIReferenceType.asset);
}

function parseMethodSignature(signature) {
    const argsStart = signature.indexOf('(');
    if (argsStart === -1) {
        throw new Error(`Invalid method signature: ${signature}`);
    }
    let argsEnd = -1;
    let depth = 0;
    for (let i = argsStart; i < signature.length; i++) {
        const char = signature[i];
        if (char === '(') {
            depth += 1;
        }
        else if (char === ')') {
            if (depth === 0) {
                // unpaired parenthesis
                break;
            }
            depth -= 1;
            if (depth === 0) {
                argsEnd = i;
                break;
            }
        }
    }
    if (argsEnd === -1) {
        throw new Error(`Invalid method signature: ${signature}`);
    }
    return {
        name: signature.slice(0, argsStart),
        args: ABITupleType.parseTupleContent(signature.slice(argsStart + 1, argsEnd)),
        returns: signature.slice(argsEnd + 1),
    };
}
class ABIMethod {
    constructor(params) {
        if (typeof params.name !== 'string' ||
            typeof params.returns !== 'object' ||
            !Array.isArray(params.args)) {
            throw new Error('Invalid ABIMethod parameters');
        }
        this.name = params.name;
        this.description = params.desc;
        this.args = params.args.map(({ type, name, desc }) => {
            if (abiTypeIsTransaction(type) || abiTypeIsReference(type)) {
                return {
                    type,
                    name,
                    description: desc,
                };
            }
            return {
                type: ABIType.from(type),
                name,
                description: desc,
            };
        });
        this.returns = {
            type: params.returns.type === 'void'
                ? params.returns.type
                : ABIType.from(params.returns.type),
            description: params.returns.desc,
        };
        this.events = params.events;
        this.readonly = params.readonly;
    }
    getSignature() {
        const args = this.args.map((arg) => arg.type.toString()).join(',');
        const returns = this.returns.type.toString();
        return `${this.name}(${args})${returns}`;
    }
    getSelector() {
        const hash = genericHash(this.getSignature());
        return new Uint8Array(hash.slice(0, 4));
    }
    txnCount() {
        let count = 1;
        for (const arg of this.args) {
            if (typeof arg.type === 'string' && abiTypeIsTransaction(arg.type)) {
                count += 1;
            }
        }
        return count;
    }
    toJSON() {
        return {
            name: this.name,
            desc: this.description,
            args: this.args.map(({ type, name, description }) => ({
                type: type.toString(),
                name,
                desc: description,
            })),
            returns: {
                type: this.returns.type.toString(),
                desc: this.returns.description,
            },
            events: this.events,
            readonly: this.readonly,
        };
    }
    static fromSignature(signature) {
        const { name, args, returns } = parseMethodSignature(signature);
        return new ABIMethod({
            name,
            args: args.map((arg) => ({ type: arg })),
            returns: { type: returns },
        });
    }
}
function getMethodByName(methods, name) {
    if (methods === null ||
        !Array.isArray(methods) ||
        !methods.every((item) => item instanceof ABIMethod))
        throw new Error('Methods list provided is null or not the correct type');
    const filteredMethods = methods.filter((m) => m.name === name);
    if (filteredMethods.length > 1)
        throw new Error(`found ${filteredMethods.length} methods with the same name ${filteredMethods
            .map((m) => m.getSignature())
            .join(',')}`);
    if (filteredMethods.length === 0)
        throw new Error(`found 0 methods with the name ${name}`);
    return filteredMethods[0];
}

class ABIContract {
    constructor(params) {
        if (typeof params.name !== 'string' ||
            !Array.isArray(params.methods) ||
            (params.networks && typeof params.networks !== 'object')) {
            throw new Error('Invalid ABIContract parameters');
        }
        this.name = params.name;
        this.description = params.desc;
        this.networks = params.networks ? { ...params.networks } : {};
        this.methods = params.methods.map((method) => new ABIMethod(method));
        this.events = params.events;
    }
    toJSON() {
        return {
            name: this.name,
            desc: this.description,
            networks: this.networks,
            methods: this.methods.map((method) => method.toJSON()),
            events: this.events,
        };
    }
    getMethodByName(name) {
        return getMethodByName(this.methods, name);
    }
}

class ABIInterface {
    constructor(params) {
        if (typeof params.name !== 'string' || !Array.isArray(params.methods)) {
            throw new Error('Invalid ABIInterface parameters');
        }
        this.name = params.name;
        this.description = params.desc;
        this.methods = params.methods.map((method) => new ABIMethod(method));
    }
    toJSON() {
        return {
            name: this.name,
            desc: this.description,
            methods: this.methods.map((method) => method.toJSON()),
        };
    }
    getMethodByName(name) {
        return getMethodByName(this.methods, name);
    }
}

// First 4 bytes of SHA-512/256 hash of "return"
const RETURN_PREFIX = new Uint8Array([21, 31, 124, 117]);
// The maximum number of arguments for an application call transaction
const MAX_APP_ARGS = 16;
var AtomicTransactionComposerStatus;
(function (AtomicTransactionComposerStatus) {
    /** The atomic group is still under construction. */
    AtomicTransactionComposerStatus[AtomicTransactionComposerStatus["BUILDING"] = 0] = "BUILDING";
    /** The atomic group has been finalized, but not yet signed. */
    AtomicTransactionComposerStatus[AtomicTransactionComposerStatus["BUILT"] = 1] = "BUILT";
    /** The atomic group has been finalized and signed, but not yet submitted to the network. */
    AtomicTransactionComposerStatus[AtomicTransactionComposerStatus["SIGNED"] = 2] = "SIGNED";
    /** The atomic group has been finalized, signed, and submitted to the network. */
    AtomicTransactionComposerStatus[AtomicTransactionComposerStatus["SUBMITTED"] = 3] = "SUBMITTED";
    /** The atomic group has been finalized, signed, submitted, and successfully committed to a block. */
    AtomicTransactionComposerStatus[AtomicTransactionComposerStatus["COMMITTED"] = 4] = "COMMITTED";
})(AtomicTransactionComposerStatus || (AtomicTransactionComposerStatus = {}));
/**
 * Add a value to an application call's foreign array. The addition will be as compact as possible,
 * and this function will return an index that can be used to reference `valueToAdd` in `array`.
 *
 * @param valueToAdd - The value to add to the array. If this value is already present in the array,
 *   it will not be added again. Instead, the existing index will be returned.
 * @param array - The existing foreign array. This input may be modified to append `valueToAdd`.
 * @param zeroValue - If provided, this value indicated two things: the 0 value is special for this
 *   array, so all indexes into `array` must start at 1; additionally, if `valueToAdd` equals
 *   `zeroValue`, then `valueToAdd` will not be added to the array, and instead the 0 indexes will
 *   be returned.
 * @returns An index that can be used to reference `valueToAdd` in `array`.
 */
function populateForeignArray(valueToAdd, array, zeroValue) {
    if (zeroValue != null && valueToAdd === zeroValue) {
        return 0;
    }
    const offset = zeroValue == null ? 0 : 1;
    for (let i = 0; i < array.length; i++) {
        if (valueToAdd === array[i]) {
            return i + offset;
        }
    }
    array.push(valueToAdd);
    return array.length - 1 + offset;
}
/** A class used to construct and execute atomic transaction groups */
class AtomicTransactionComposer {
    constructor() {
        this.status = AtomicTransactionComposerStatus.BUILDING;
        this.transactions = [];
        this.methodCalls = new Map();
        this.signedTxns = [];
        this.txIDs = [];
    }
    /**
     * Get the status of this composer's transaction group.
     */
    getStatus() {
        return this.status;
    }
    /**
     * Get the number of transactions currently in this atomic group.
     */
    count() {
        return this.transactions.length;
    }
    /**
     * Create a new composer with the same underlying transactions. The new composer's status will be
     * BUILDING, so additional transactions may be added to it.
     */
    clone() {
        const theClone = new AtomicTransactionComposer();
        theClone.transactions = this.transactions.map(({ txn, signer }) => {
            const txnMap = txn.toEncodingData();
            // erase the group ID
            txnMap.delete('grp');
            return {
                // not quite a deep copy, but good enough for our purposes (modifying txn.group in buildGroup)
                txn: Transaction$1.fromEncodingData(txnMap),
                signer,
            };
        });
        theClone.methodCalls = new Map(this.methodCalls);
        return theClone;
    }
    /**
     * Add a transaction to this atomic group.
     *
     * An error will be thrown if the transaction has a nonzero group ID, the composer's status is
     * not BUILDING, or if adding this transaction causes the current group to exceed MAX_GROUP_SIZE.
     */
    addTransaction(txnAndSigner) {
        if (this.status !== AtomicTransactionComposerStatus.BUILDING) {
            throw new Error('Cannot add transactions when composer status is not BUILDING');
        }
        if (this.transactions.length === AtomicTransactionComposer.MAX_GROUP_SIZE) {
            throw new Error(`Adding an additional transaction exceeds the maximum atomic group size of ${AtomicTransactionComposer.MAX_GROUP_SIZE}`);
        }
        if (txnAndSigner.txn.group && txnAndSigner.txn.group.some((v) => v !== 0)) {
            throw new Error('Cannot add a transaction with nonzero group ID');
        }
        this.transactions.push(txnAndSigner);
    }
    /**
     * Add a smart contract method call to this atomic group.
     *
     * An error will be thrown if the composer's status is not BUILDING, if adding this transaction
     * causes the current group to exceed MAX_GROUP_SIZE, or if the provided arguments are invalid
     * for the given method.
     */
    addMethodCall({ appID, method, methodArgs, sender, suggestedParams, onComplete, approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages, appAccounts, appForeignApps, appForeignAssets, boxes, note, lease, rekeyTo, signer, }) {
        if (this.status !== AtomicTransactionComposerStatus.BUILDING) {
            throw new Error('Cannot add transactions when composer status is not BUILDING');
        }
        if (this.transactions.length + method.txnCount() >
            AtomicTransactionComposer.MAX_GROUP_SIZE) {
            throw new Error(`Adding additional transactions exceeds the maximum atomic group size of ${AtomicTransactionComposer.MAX_GROUP_SIZE}`);
        }
        if (BigInt(appID) === BigInt(0)) {
            if (approvalProgram == null ||
                clearProgram == null ||
                numGlobalInts == null ||
                numGlobalByteSlices == null ||
                numLocalInts == null ||
                numLocalByteSlices == null) {
                throw new Error('One of the following required parameters for application creation is missing: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices');
            }
        }
        else if (onComplete === OnApplicationComplete.UpdateApplicationOC) {
            if (approvalProgram == null || clearProgram == null) {
                throw new Error('One of the following required parameters for OnApplicationComplete.UpdateApplicationOC is missing: approvalProgram, clearProgram');
            }
            if (numGlobalInts != null ||
                numGlobalByteSlices != null ||
                numLocalInts != null ||
                numLocalByteSlices != null ||
                extraPages != null) {
                throw new Error('One of the following application creation parameters were set on a non-creation call: numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages');
            }
        }
        else if (approvalProgram != null ||
            clearProgram != null ||
            numGlobalInts != null ||
            numGlobalByteSlices != null ||
            numLocalInts != null ||
            numLocalByteSlices != null ||
            extraPages != null) {
            throw new Error('One of the following application creation parameters were set on a non-creation call: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages');
        }
        if (methodArgs == null) {
            // eslint-disable-next-line no-param-reassign
            methodArgs = [];
        }
        if (methodArgs.length !== method.args.length) {
            throw new Error(`Incorrect number of method arguments. Expected ${method.args.length}, got ${methodArgs.length}`);
        }
        let basicArgTypes = [];
        let basicArgValues = [];
        const txnArgs = [];
        const refArgTypes = [];
        const refArgValues = [];
        const refArgIndexToBasicArgIndex = new Map();
        // TODO: Box encoding for ABI
        const boxReferences = !boxes ? [] : boxes;
        for (let i = 0; i < methodArgs.length; i++) {
            let argType = method.args[i].type;
            const argValue = methodArgs[i];
            if (abiTypeIsTransaction(argType)) {
                if (!isTransactionWithSigner(argValue) ||
                    !abiCheckTransactionType(argType, argValue.txn)) {
                    throw new Error(`Expected ${argType} TransactionWithSigner for argument at index ${i}`);
                }
                if (argValue.txn.group && argValue.txn.group.some((v) => v !== 0)) {
                    throw new Error('Cannot add a transaction with nonzero group ID');
                }
                txnArgs.push(argValue);
                continue;
            }
            if (isTransactionWithSigner(argValue)) {
                throw new Error(`Expected non-transaction value for argument at index ${i}`);
            }
            if (abiTypeIsReference(argType)) {
                refArgIndexToBasicArgIndex.set(refArgTypes.length, basicArgTypes.length);
                refArgTypes.push(argType);
                refArgValues.push(argValue);
                // treat the reference as a uint8 for encoding purposes
                argType = new ABIUintType(8);
            }
            if (typeof argType === 'string') {
                throw new Error(`Unknown ABI type: ${argType}`);
            }
            basicArgTypes.push(argType);
            basicArgValues.push(argValue);
        }
        const resolvedRefIndexes = [];
        // Converting addresses to string form for easier comparison
        const foreignAccounts = appAccounts == null ? [] : appAccounts.map((addr) => addr.toString());
        const foreignApps = appForeignApps == null ? [] : appForeignApps.map(ensureUint64);
        const foreignAssets = appForeignAssets == null ? [] : appForeignAssets.map(ensureUint64);
        for (let i = 0; i < refArgTypes.length; i++) {
            const refType = refArgTypes[i];
            const refValue = refArgValues[i];
            let resolved = 0;
            switch (refType) {
                case ABIReferenceType.account: {
                    const addressType = new ABIAddressType();
                    const address = addressType.decode(addressType.encode(refValue));
                    resolved = populateForeignArray(address, foreignAccounts, sender.toString());
                    break;
                }
                case ABIReferenceType.application: {
                    const uint64Type = new ABIUintType(64);
                    const refAppID = uint64Type.decode(uint64Type.encode(refValue));
                    if (refAppID > Number.MAX_SAFE_INTEGER) {
                        throw new Error(`Expected safe integer for application value, got ${refAppID}`);
                    }
                    resolved = populateForeignArray(refAppID, foreignApps, ensureUint64(appID));
                    break;
                }
                case ABIReferenceType.asset: {
                    const uint64Type = new ABIUintType(64);
                    const refAssetID = uint64Type.decode(uint64Type.encode(refValue));
                    if (refAssetID > Number.MAX_SAFE_INTEGER) {
                        throw new Error(`Expected safe integer for asset value, got ${refAssetID}`);
                    }
                    resolved = populateForeignArray(refAssetID, foreignAssets);
                    break;
                }
                default:
                    throw new Error(`Unknown reference type: ${refType}`);
            }
            resolvedRefIndexes.push(resolved);
        }
        for (let i = 0; i < resolvedRefIndexes.length; i++) {
            const basicArgIndex = refArgIndexToBasicArgIndex.get(i);
            basicArgValues[basicArgIndex] = resolvedRefIndexes[i];
        }
        if (basicArgTypes.length > MAX_APP_ARGS - 1) {
            const lastArgTupleTypes = basicArgTypes.slice(MAX_APP_ARGS - 2);
            const lastArgTupleValues = basicArgValues.slice(MAX_APP_ARGS - 2);
            basicArgTypes = basicArgTypes.slice(0, MAX_APP_ARGS - 2);
            basicArgValues = basicArgValues.slice(0, MAX_APP_ARGS - 2);
            basicArgTypes.push(new ABITupleType(lastArgTupleTypes));
            basicArgValues.push(lastArgTupleValues);
        }
        const appArgsEncoded = [method.getSelector()];
        for (let i = 0; i < basicArgTypes.length; i++) {
            appArgsEncoded.push(basicArgTypes[i].encode(basicArgValues[i]));
        }
        const appCall = {
            txn: makeApplicationCallTxnFromObject({
                sender,
                appIndex: appID,
                appArgs: appArgsEncoded,
                accounts: foreignAccounts,
                foreignApps,
                foreignAssets,
                boxes: boxReferences,
                onComplete: onComplete == null ? OnApplicationComplete.NoOpOC : onComplete,
                approvalProgram,
                clearProgram,
                numGlobalInts,
                numGlobalByteSlices,
                numLocalInts,
                numLocalByteSlices,
                extraPages,
                lease,
                note,
                rekeyTo,
                suggestedParams,
            }),
            signer,
        };
        this.transactions.push(...txnArgs, appCall);
        this.methodCalls.set(this.transactions.length - 1, method);
    }
    /**
     * Finalize the transaction group and returned the finalized transactions.
     *
     * The composer's status will be at least BUILT after executing this method.
     */
    buildGroup() {
        if (this.status === AtomicTransactionComposerStatus.BUILDING) {
            if (this.transactions.length === 0) {
                throw new Error('Cannot build a group with 0 transactions');
            }
            if (this.transactions.length > 1) {
                assignGroupID(this.transactions.map((txnWithSigner) => txnWithSigner.txn));
            }
            this.status = AtomicTransactionComposerStatus.BUILT;
        }
        return this.transactions;
    }
    /**
     * Obtain signatures for each transaction in this group. If signatures have already been obtained,
     * this method will return cached versions of the signatures.
     *
     * The composer's status will be at least SIGNED after executing this method.
     *
     * An error will be thrown if signing any of the transactions fails.
     *
     * @returns A promise that resolves to an array of signed transactions.
     */
    async gatherSignatures() {
        if (this.status >= AtomicTransactionComposerStatus.SIGNED) {
            return this.signedTxns;
        }
        // retrieve built transactions and verify status is BUILT
        const txnsWithSigners = this.buildGroup();
        const txnGroup = txnsWithSigners.map((txnWithSigner) => txnWithSigner.txn);
        const indexesPerSigner = new Map();
        for (let i = 0; i < txnsWithSigners.length; i++) {
            const { signer } = txnsWithSigners[i];
            if (!indexesPerSigner.has(signer)) {
                indexesPerSigner.set(signer, []);
            }
            indexesPerSigner.get(signer).push(i);
        }
        const orderedSigners = Array.from(indexesPerSigner);
        const batchedSigs = await Promise.all(orderedSigners.map(([signer, indexes]) => signer(txnGroup, indexes)));
        const signedTxns = txnsWithSigners.map(() => null);
        for (let signerIndex = 0; signerIndex < orderedSigners.length; signerIndex++) {
            const indexes = orderedSigners[signerIndex][1];
            const sigs = batchedSigs[signerIndex];
            for (let i = 0; i < indexes.length; i++) {
                signedTxns[indexes[i]] = sigs[i];
            }
        }
        function fullyPopulated(a) {
            return a.every((v) => v != null);
        }
        if (!fullyPopulated(signedTxns)) {
            throw new Error(`Missing signatures. Got ${signedTxns}`);
        }
        const txIDs = signedTxns.map((stxn, index) => {
            try {
                return decodeMsgpack(stxn, SignedTransaction).txn.txID();
            }
            catch (err) {
                throw new Error(`Cannot decode signed transaction at index ${index}. ${err}`);
            }
        });
        this.signedTxns = signedTxns;
        this.txIDs = txIDs;
        this.status = AtomicTransactionComposerStatus.SIGNED;
        return signedTxns;
    }
    /**
     * Send the transaction group to the network, but don't wait for it to be committed to a block. An
     * error will be thrown if submission fails.
     *
     * The composer's status must be SUBMITTED or lower before calling this method. If submission is
     * successful, this composer's status will update to SUBMITTED.
     *
     * Note: a group can only be submitted again if it fails.
     *
     * @param client - An Algodv2 client
     *
     * @returns A promise that, upon success, resolves to a list of TxIDs of the submitted transactions.
     */
    async submit(client) {
        if (this.status > AtomicTransactionComposerStatus.SUBMITTED) {
            throw new Error('Transaction group cannot be resubmitted');
        }
        const stxns = await this.gatherSignatures();
        await client.sendRawTransaction(stxns).do();
        this.status = AtomicTransactionComposerStatus.SUBMITTED;
        return this.txIDs;
    }
    /**
     * Simulates the transaction group in the network.
     *
     * The composer will try to sign any transactions in the group, then simulate
     * the results.
     * Simulating the group will not change the composer's status.
     *
     * @param client - An Algodv2 client
     * @param request - SimulateRequest with options in simulation.
     *   If provided, the request's transaction group will be overrwritten by the composer's group,
     *   only simulation related options will be used.
     *
     * @returns A promise that, upon success, resolves to an object containing an
     *   array of results containing one element for each method call transaction
     *   in this group (ABIResult[]) and the SimulateResponse object.
     */
    async simulate(client, request) {
        if (this.status > AtomicTransactionComposerStatus.SUBMITTED) {
            throw new Error('Simulated Transaction group has already been submitted to the network');
        }
        const stxns = await this.gatherSignatures();
        const txnObjects = stxns.map((stxn) => decodeMsgpack(stxn, SignedTransaction));
        const currentRequest = request == null ? new SimulateRequest({ txnGroups: [] }) : request;
        currentRequest.txnGroups = [
            new SimulateRequestTransactionGroup({
                txns: txnObjects,
            }),
        ];
        const simulateResponse = await client
            .simulateTransactions(currentRequest)
            .do();
        // Parse method response
        const methodResults = [];
        for (const [txnIndex, method] of this.methodCalls) {
            const txID = this.txIDs[txnIndex];
            const pendingInfo = simulateResponse.txnGroups[0].txnResults[txnIndex].txnResult;
            const methodResult = {
                txID,
                rawReturnValue: new Uint8Array(),
                method,
            };
            methodResults.push(AtomicTransactionComposer.parseMethodResponse(method, methodResult, pendingInfo));
        }
        return { methodResults, simulateResponse };
    }
    /**
     * Send the transaction group to the network and wait until it's committed to a block. An error
     * will be thrown if submission or execution fails.
     *
     * The composer's status must be SUBMITTED or lower before calling this method, since execution is
     * only allowed once. If submission is successful, this composer's status will update to SUBMITTED.
     * If the execution is also successful, this composer's status will update to COMMITTED.
     *
     * Note: a group can only be submitted again if it fails.
     *
     * @param client - An Algodv2 client
     * @param waitRounds - The maximum number of rounds to wait for transaction confirmation
     *
     * @returns A promise that, upon success, resolves to an object containing the confirmed round for
     *   this transaction, the txIDs of the submitted transactions, and an array of results containing
     *   one element for each method call transaction in this group.
     */
    async execute(client, waitRounds) {
        if (this.status === AtomicTransactionComposerStatus.COMMITTED) {
            throw new Error('Transaction group has already been executed successfully');
        }
        const txIDs = await this.submit(client);
        this.status = AtomicTransactionComposerStatus.SUBMITTED;
        const firstMethodCallIndex = this.transactions.findIndex((_, index) => this.methodCalls.has(index));
        const indexToWaitFor = firstMethodCallIndex === -1 ? 0 : firstMethodCallIndex;
        const confirmedTxnInfo = await waitForConfirmation(client, txIDs[indexToWaitFor], waitRounds);
        this.status = AtomicTransactionComposerStatus.COMMITTED;
        const confirmedRound = confirmedTxnInfo.confirmedRound;
        const methodResults = [];
        for (const [txnIndex, method] of this.methodCalls) {
            const txID = txIDs[txnIndex];
            let methodResult = {
                txID,
                rawReturnValue: new Uint8Array(),
                method,
            };
            try {
                const pendingInfo = txnIndex === firstMethodCallIndex
                    ? confirmedTxnInfo
                    : // eslint-disable-next-line no-await-in-loop
                        await client.pendingTransactionInformation(txID).do();
                methodResult = AtomicTransactionComposer.parseMethodResponse(method, methodResult, pendingInfo);
            }
            catch (err) {
                methodResult.decodeError = err;
            }
            methodResults.push(methodResult);
        }
        return {
            confirmedRound,
            txIDs,
            methodResults,
        };
    }
    /**
     * Parses a single ABI Method transaction log into a ABI result object.
     *
     * @param method
     * @param methodResult
     * @param pendingInfo
     * @returns An ABIResult object
     */
    static parseMethodResponse(method, methodResult, pendingInfo) {
        const returnedResult = methodResult;
        try {
            returnedResult.txInfo = pendingInfo;
            if (method.returns.type !== 'void') {
                const logs = pendingInfo.logs || [];
                if (logs.length === 0) {
                    throw new Error(`App call transaction did not log a return value ${stringifyJSON(pendingInfo)}`);
                }
                const lastLog = logs[logs.length - 1];
                if (lastLog.byteLength < 4 ||
                    !arrayEqual(lastLog.slice(0, 4), RETURN_PREFIX)) {
                    throw new Error(`App call transaction did not log a ABI return value ${stringifyJSON(pendingInfo)}`);
                }
                returnedResult.rawReturnValue = new Uint8Array(lastLog.slice(4));
                returnedResult.returnValue = method.returns.type.decode(methodResult.rawReturnValue);
            }
        }
        catch (err) {
            returnedResult.decodeError = err;
        }
        return returnedResult;
    }
}
/** The maximum size of an atomic transaction group. */
AtomicTransactionComposer.MAX_GROUP_SIZE = 16;

const SIGN_BYTES_PREFIX = Uint8Array.from([77, 88]); // "MX"
// Errors
const MULTISIG_BAD_SENDER_ERROR_MSG = 'The transaction sender address and multisig preimage do not match.';
/**
 * signTransaction takes an object with either payment or key registration fields and
 * a secret key and returns a signed blob.
 *
 * Payment transaction fields: from, to, amount, fee, firstValid, lastValid, genesisHash,
 * note(optional), GenesisID(optional), closeRemainderTo(optional)
 *
 * Key registration fields: fee, firstValid, lastValid, voteKey, selectionKey, voteFirst,
 * voteLast, voteKeyDilution, genesisHash, note(optional), GenesisID(optional)
 *
 * If flatFee is not set and the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.
 * @param txn - object with either payment or key registration fields
 * @param sk - Algorand Secret Key
 * @returns object contains the binary signed transaction and its txID
 */
function signTransaction(txn, sk) {
    return {
        txID: txn.txID(),
        blob: txn.signTxn(sk),
    };
}
/**
 * signBytes takes arbitrary bytes and a secret key, prepends the bytes with "MX" for domain separation, signs the bytes
 * with the private key, and returns the signature.
 * @param bytes - Uint8array
 * @param sk - Algorand secret key
 * @returns binary signature
 */
function signBytes(bytes, sk) {
    const toBeSigned = concatArrays(SIGN_BYTES_PREFIX, bytes);
    const sig = sign(toBeSigned, sk);
    return sig;
}
/**
 * verifyBytes takes array of bytes, an address, and a signature and verifies if the signature is correct for the public
 * key and the bytes (the bytes should have been signed with "MX" prepended for domain separation).
 * @param bytes - Uint8Array
 * @param signature - binary signature
 * @param addr - string address
 * @returns bool
 */
function verifyBytes(bytes, signature, addr) {
    const toBeVerified = concatArrays(SIGN_BYTES_PREFIX, bytes);
    const addrObj = typeof addr === 'string' ? Address.fromString(addr) : addr;
    return verify(toBeVerified, signature, addrObj.publicKey);
}
const ERROR_MULTISIG_BAD_SENDER = new Error(MULTISIG_BAD_SENDER_ERROR_MSG);
const ERROR_INVALID_MICROALGOS = new Error(INVALID_MICROALGOS_ERROR_MSG);

var algosdk = /*#__PURE__*/Object.freeze({
	__proto__: null,
	ABIAddressType: ABIAddressType,
	ABIArrayDynamicType: ABIArrayDynamicType,
	ABIArrayStaticType: ABIArrayStaticType,
	ABIBoolType: ABIBoolType,
	ABIByteType: ABIByteType,
	ABIContract: ABIContract,
	ABIInterface: ABIInterface,
	ABIMethod: ABIMethod,
	get ABIReferenceType () { return ABIReferenceType; },
	ABIStringType: ABIStringType,
	get ABITransactionType () { return ABITransactionType; },
	ABITupleType: ABITupleType,
	ABIType: ABIType,
	ABIUfixedType: ABIUfixedType,
	ABIUintType: ABIUintType,
	ADDR_BYTE_SIZE: ADDR_BYTE_SIZE,
	ALGORAND_ZERO_ADDRESS_STRING: ALGORAND_ZERO_ADDRESS_STRING,
	AccountBaseData: AccountBaseData,
	AccountData: AccountData,
	AccountDeltas: AccountDeltas,
	AccountTotals: AccountTotals,
	Address: Address,
	AlgoCount: AlgoCount,
	Algodv2: AlgodClient,
	AppLocalState: AppLocalState,
	AppLocalStateDelta: AppLocalStateDelta,
	AppParams: AppParams,
	AppParamsDelta: AppParamsDelta,
	AppResourceRecord: AppResourceRecord,
	ApplyData: ApplyData,
	AssetHolding: AssetHolding$2,
	AssetHoldingDelta: AssetHoldingDelta,
	AssetParams: AssetParams$2,
	AssetParamsDelta: AssetParamsDelta,
	AssetResourceRecord: AssetResourceRecord,
	AtomicTransactionComposer: AtomicTransactionComposer,
	get AtomicTransactionComposerStatus () { return AtomicTransactionComposerStatus; },
	BalanceRecord: BalanceRecord,
	Block: Block$2,
	BlockHeader: BlockHeader,
	ENCODED_MULTISIG_SCHEMA: ENCODED_MULTISIG_SCHEMA,
	ENCODED_SUBSIG_SCHEMA: ENCODED_SUBSIG_SCHEMA,
	ERROR_INVALID_MICROALGOS: ERROR_INVALID_MICROALGOS,
	ERROR_MULTISIG_BAD_SENDER: ERROR_MULTISIG_BAD_SENDER,
	EvalDelta: EvalDelta$2,
	FalconSignatureStruct: FalconSignatureStruct,
	FalconVerifier: FalconVerifier,
	HashFactory: HashFactory$1,
	INVALID_MICROALGOS_ERROR_MSG: INVALID_MICROALGOS_ERROR_MSG,
	IncludedTransactions: IncludedTransactions,
	Indexer: IndexerClient,
	IntDecoding: IntDecoding$1,
	Kmd: KmdClient,
	KvValueDelta: KvValueDelta,
	LENGTH_ENCODE_BYTE_SIZE: LENGTH_ENCODE_BYTE_SIZE,
	LedgerStateDelta: LedgerStateDelta,
	LogicSig: LogicSig,
	LogicSigAccount: LogicSigAccount,
	MAX_LEN: MAX_LEN,
	MULTISIG_BAD_SENDER_ERROR_MSG: MULTISIG_BAD_SENDER_ERROR_MSG,
	MerkleArrayProof: MerkleArrayProof$1,
	MerkleSignatureVerifier: MerkleSignatureVerifier,
	ModifiedCreatable: ModifiedCreatable,
	get OnApplicationComplete () { return OnApplicationComplete; },
	Participant: Participant,
	ParticipationUpdates: ParticipationUpdates$1,
	ProgramSourceMap: ProgramSourceMap,
	Reveal: Reveal,
	RewardState: RewardState,
	SINGLE_BOOL_SIZE: SINGLE_BOOL_SIZE,
	SINGLE_BYTE_SIZE: SINGLE_BYTE_SIZE,
	SignedTransaction: SignedTransaction,
	SignedTxnInBlock: SignedTxnInBlock,
	SignedTxnWithAD: SignedTxnWithAD,
	SigslotCommit: SigslotCommit,
	StateProof: StateProof$2,
	StateProofMessage: StateProofMessage$1,
	StateProofTrackingData: StateProofTrackingData,
	StateSchema: StateSchema$1,
	TealValue: TealValue$2,
	Transaction: Transaction$1,
	get TransactionType () { return TransactionType; },
	TxnCommitments: TxnCommitments,
	UntypedValue: UntypedValue,
	UpgradeState: UpgradeState,
	UpgradeVote: UpgradeVote,
	ValueDelta: ValueDelta,
	VotingData: VotingData,
	abiCheckTransactionType: abiCheckTransactionType,
	abiTypeIsReference: abiTypeIsReference,
	abiTypeIsTransaction: abiTypeIsTransaction,
	algosToMicroalgos: algosToMicroalgos,
	appendSignMultisigTransaction: appendSignMultisigTransaction,
	appendSignRawMultisigSignature: appendSignRawMultisigSignature,
	assignGroupID: assignGroupID,
	base64ToBytes: base64ToBytes,
	bigIntToBytes: bigIntToBytes,
	bytesToBase64: bytesToBase64,
	bytesToBigInt: bytesToBigInt,
	bytesToHex: bytesToHex,
	bytesToString: bytesToString,
	coerceToBytes: coerceToBytes,
	computeGroupID: computeGroupID,
	createDryrun: createDryrun,
	createMultisigTransaction: createMultisigTransaction,
	decodeAddress: decodeAddress,
	decodeJSON: decodeJSON,
	decodeMsgpack: decodeMsgpack,
	decodeObj: decodeObj,
	decodeSignedTransaction: decodeSignedTransaction,
	decodeUint64: decodeUint64,
	decodeUnsignedTransaction: decodeUnsignedTransaction,
	dryrunTxnResultAppTrace: dryrunTxnResultAppTrace,
	dryrunTxnResultLogicSigTrace: dryrunTxnResultLogicSigTrace,
	encodeAddress: encodeAddress,
	encodeJSON: encodeJSON,
	encodeMsgpack: encodeMsgpack,
	encodeObj: encodeObj,
	encodeUint64: encodeUint64,
	encodeUnsignedSimulateTransaction: encodeUnsignedSimulateTransaction,
	encodeUnsignedTransaction: encodeUnsignedTransaction,
	encodedMultiSigFromEncodingData: encodedMultiSigFromEncodingData,
	encodedMultiSigToEncodingData: encodedMultiSigToEncodingData,
	encodedSubsigFromEncodingData: encodedSubsigFromEncodingData,
	encodedSubsigToEncodingData: encodedSubsigToEncodingData,
	generateAccount: generateAccount,
	getApplicationAddress: getApplicationAddress,
	getMethodByName: getMethodByName,
	hexToBytes: hexToBytes,
	indexerModels: types,
	isOnApplicationComplete: isOnApplicationComplete,
	isTransactionType: isTransactionType,
	isTransactionWithSigner: isTransactionWithSigner,
	isValidAddress: isValidAddress,
	logicSigFromByte: logicSigFromByte,
	makeApplicationCallTxnFromObject: makeApplicationCallTxnFromObject,
	makeApplicationClearStateTxnFromObject: makeApplicationClearStateTxnFromObject,
	makeApplicationCloseOutTxnFromObject: makeApplicationCloseOutTxnFromObject,
	makeApplicationCreateTxnFromObject: makeApplicationCreateTxnFromObject,
	makeApplicationDeleteTxnFromObject: makeApplicationDeleteTxnFromObject,
	makeApplicationNoOpTxnFromObject: makeApplicationNoOpTxnFromObject,
	makeApplicationOptInTxnFromObject: makeApplicationOptInTxnFromObject,
	makeApplicationUpdateTxnFromObject: makeApplicationUpdateTxnFromObject,
	makeAssetConfigTxnWithSuggestedParamsFromObject: makeAssetConfigTxnWithSuggestedParamsFromObject,
	makeAssetCreateTxnWithSuggestedParamsFromObject: makeAssetCreateTxnWithSuggestedParamsFromObject,
	makeAssetDestroyTxnWithSuggestedParamsFromObject: makeAssetDestroyTxnWithSuggestedParamsFromObject,
	makeAssetFreezeTxnWithSuggestedParamsFromObject: makeAssetFreezeTxnWithSuggestedParamsFromObject,
	makeAssetTransferTxnWithSuggestedParamsFromObject: makeAssetTransferTxnWithSuggestedParamsFromObject,
	makeBaseAssetConfigTxn: makeBaseAssetConfigTxn,
	makeBasicAccountTransactionSigner: makeBasicAccountTransactionSigner,
	makeEmptyTransactionSigner: makeEmptyTransactionSigner,
	makeKeyRegistrationTxnWithSuggestedParamsFromObject: makeKeyRegistrationTxnWithSuggestedParamsFromObject,
	makeLogicSigAccountTransactionSigner: makeLogicSigAccountTransactionSigner,
	makeMultiSigAccountTransactionSigner: makeMultiSigAccountTransactionSigner,
	makePaymentTxnWithSuggestedParamsFromObject: makePaymentTxnWithSuggestedParamsFromObject,
	masterDerivationKeyToMnemonic: masterDerivationKeyToMnemonic,
	mergeMultisigTransactions: mergeMultisigTransactions,
	microalgosToAlgos: microalgosToAlgos,
	mnemonicFromSeed: mnemonicFromSeed,
	mnemonicToMasterDerivationKey: mnemonicToMasterDerivationKey,
	mnemonicToSecretKey: mnemonicToSecretKey,
	modelsv2: types$1,
	msgpackRawDecode: msgpackRawDecode,
	msgpackRawDecodeAsMap: msgpackRawDecodeAsMap,
	msgpackRawEncode: msgpackRawEncode,
	multisigAddress: multisigAddress,
	parseJSON: parseJSON,
	secretKeyToMnemonic: secretKeyToMnemonic,
	seedFromMnemonic: seedFromMnemonic,
	signBytes: signBytes,
	signLogicSigTransaction: signLogicSigTransaction,
	signLogicSigTransactionObject: signLogicSigTransactionObject,
	signMultisigTransaction: signMultisigTransaction,
	signTransaction: signTransaction,
	stringifyJSON: stringifyJSON,
	tealSign: tealSign,
	tealSignFromProgram: tealSignFromProgram,
	verifyBytes: verifyBytes,
	verifyMultisig: verifyMultisig,
	verifyTealSign: verifyTealSign,
	waitForConfirmation: waitForConfirmation
});

var es5 = {exports: {}};

(function (module, exports) {
	!function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:false,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=true,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:true,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:true});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:true,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){t.__esModule=true,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case "NT":return "NT";case "XP":return "XP";case "NT 5.0":return "2000";case "NT 5.1":return "XP";case "NT 5.2":return "2003";case "NT 6.0":return "Vista";case "NT 6.1":return "7";case "NT 6.2":return "8";case "NT 6.3":return "8.1";case "NT 10.0":return "10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return "Leopard";case 6:return "Snow Leopard";case 7:return "Lion";case 8:return "Mountain Lion";case 9:return "Mavericks";case 10:return "Yosemite";case 11:return "El Capitan";case 12:return "Sierra";case 13:return "High Sierra";case 14:return "Mojave";case 15:return "Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){ void 0===n&&(n=false);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1;}else if(u[0][a]<u[1][a])return  -1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t];}));};for(t=0,r=s.length;t<r;t+=1)o();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default;},18:function(e,t,r){t.__esModule=true,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};},90:function(e,t,r){t.__esModule=true,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||false,n.configurable=true,"value"in n&&(n.writable=true),Object.defineProperty(e,n.key,n);}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=false),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return s.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return s.ENGINE_MAP}},{key:"OS_MAP",get:function(){return s.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}();t.default=o,e.exports=t.default;},91:function(e,t,r){t.__esModule=true,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=false),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},true!==t&&this.parse();}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){ void 0===e&&(e=false);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return o.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var a=e[t];"string"==typeof a?(i[t]=a,s+=1):"object"==typeof a&&(r[t]=a,n+=1);})),n>0){var a=Object.keys(r),u=o.default.find(a,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=o.default.find(a,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=o.default.find(l,(function(e){return t.isBrowser(e,true)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){ void 0===t&&(t=false);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=false,i=this.getBrowserVersion();if("string"==typeof i)return ">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=true,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=true,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(true)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(true)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(true)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=false),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default;},92:function(e,t,r){t.__esModule=true,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:"Miui"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return {name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default;},93:function(e,t,r){t.__esModule=true,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return {name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return {name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return {name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return {name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return {name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return {name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default;},94:function(e,t,r){t.__esModule=true,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function(){return {type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return {type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "blackberry"===e.getBrowserName(true)},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return "bada"===e.getBrowserName(true)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "windows phone"===e.getBrowserName()},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return "android"===e.getOSName(true)&&t>=3},describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return "android"===e.getOSName(true)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "macos"===e.getOSName(true)},describe:function(){return {type:s.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return "windows"===e.getOSName(true)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "linux"===e.getOSName(true)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "playstation 4"===e.getOSName(true)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}},{test:function(e){return "roku"===e.getOSName(true)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default;},95:function(e,t,r){t.__esModule=true,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function(e){return "microsoft edge"===e.getBrowserName(true)},describe:function(e){if(/\sedg\//i.test(e))return {name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return {name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return {name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default;}})})); 
} (es5));

var es5Exports = es5.exports;
var n = /*@__PURE__*/getDefaultExportFromCjs(es5Exports);

var r="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},o=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,a=false;function l(){a=true;for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",e=0;e<64;++e)o[e]=t[e],i[t.charCodeAt(e)]=e;i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63;}function u(t,e,n){for(var r,i,s=[],a=e;a<n;a+=3)r=(t[a]<<16)+(t[a+1]<<8)+t[a+2],s.push(o[(i=r)>>18&63]+o[i>>12&63]+o[i>>6&63]+o[63&i]);return s.join("")}function c(t){var e;a||l();for(var n=t.length,r=n%3,i="",s=[],c=16383,h=0,f=n-r;h<f;h+=c)s.push(u(t,h,h+c>f?f:h+c));return 1===r?(e=t[n-1],i+=o[e>>2],i+=o[e<<4&63],i+="=="):2===r&&(e=(t[n-2]<<8)+t[n-1],i+=o[e>>10],i+=o[e>>4&63],i+=o[e<<2&63],i+="="),s.push(i),s.join("")}function h(t,e,n,r,o){var i,s,a=8*o-r-1,l=(1<<a)-1,u=l>>1,c=-7,h=n?o-1:0,f=n?-1:1,d=t[e+h];for(h+=f,i=d&(1<<-c)-1,d>>=-c,c+=a;c>0;i=256*i+t[e+h],h+=f,c-=8);for(s=i&(1<<-c)-1,i>>=-c,c+=r;c>0;s=256*s+t[e+h],h+=f,c-=8);if(0===i)i=1-u;else {if(i===l)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),i-=u;}return (d?-1:1)*s*Math.pow(2,i-r)}function f(t,e,n,r,o,i){var s,a,l,u=8*i-o-1,c=(1<<u)-1,h=c>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,p=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=c):(s=Math.floor(Math.log(e)/Math.LN2),e*(l=Math.pow(2,-s))<1&&(s--,l*=2),(e+=s+h>=1?f/l:f*Math.pow(2,1-h))*l>=2&&(s++,l/=2),s+h>=c?(a=0,s=c):s+h>=1?(a=(e*l-1)*Math.pow(2,o),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;t[n+d]=255&a,d+=p,a/=256,o-=8);for(s=s<<o|a,u+=o;u>0;t[n+d]=255&s,d+=p,s/=256,u-=8);t[n+d-p]|=128*g;}var d={}.toString,p=Array.isArray||function(t){return "[object Array]"==d.call(t)};function g(){return y.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function w(t,e){if(g()<e)throw new RangeError("Invalid typed array length");return y.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=y.prototype:(null===t&&(t=new y(e)),t.length=e),t}function y(t,e,n){if(!(y.TYPED_ARRAY_SUPPORT||this instanceof y))return new y(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return b(this,t)}return v(this,t,e,n)}function v(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return "undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);y.TYPED_ARRAY_SUPPORT?(t=e).__proto__=y.prototype:t=A(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!y.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|_(e,n);t=w(t,r);var o=t.write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(T(e)){var n=0|E(e.length);return 0===(t=w(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return "number"!=typeof e.length||(r=e.length)!=r?w(t,0):A(t,e);if("Buffer"===e.type&&p(e.data))return A(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function m(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function b(t,e){if(m(e),t=w(t,e<0?0:0|E(e)),!y.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function A(t,e){var n=e.length<0?0:0|E(e.length);t=w(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function E(t){if(t>=g())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+g().toString(16)+" bytes");return 0|t}function T(t){return !(null==t||!t._isBuffer)}function _(t,e){if(T(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=false;;)switch(e){case "ascii":case "latin1":case "binary":return n;case "utf8":case "utf-8":case void 0:return V(t).length;case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":return 2*n;case "hex":return n>>>1;case "base64":return Z(t).length;default:if(r)return V(t).length;e=(""+e).toLowerCase(),r=true;}}function R(t,e,n){var r=false;if((void 0===e||e<0)&&(e=0),e>this.length)return "";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return "";if((n>>>=0)<=(e>>>=0))return "";for(t||(t="utf8");;)switch(t){case "hex":return k(this,e,n);case "utf8":case "utf-8":return W(this,e,n);case "ascii":return x(this,e,n);case "latin1":case "binary":return Y(this,e,n);case "base64":return B(this,e,n);case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":return j(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=true;}}function S(t,e,n){var r=t[e];t[e]=t[n],t[n]=r;}function N(t,e,n,r,o){if(0===t.length)return  -1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return  -1;n=t.length-1;}else if(n<0){if(!o)return  -1;n=0;}if("string"==typeof e&&(e=y.from(e,r)),T(e))return 0===e.length?-1:C(t,e,n,r,o);if("number"==typeof e)return e&=255,y.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):C(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function C(t,e,n,r,o){var i,s=1,a=t.length,l=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return  -1;s=2,a/=2,l/=2,n/=2;}function u(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){var c=-1;for(i=n;i<a;i++)if(u(t,i)===u(e,-1===c?0:i-c)){if(-1===c&&(c=i),i-c+1===l)return c*s}else  -1!==c&&(i-=i-c),c=-1;}else for(n+l>a&&(n=a-l),i=n;i>=0;i--){for(var h=true,f=0;f<l;f++)if(u(t,i+f)!==u(e,f)){h=false;break}if(h)return i}return  -1}function I(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a;}return s}function P(t,e,n,r){return Q(V(e,t.length-n),t,n,r)}function O(t,e,n,r){return Q(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function L(t,e,n,r){return O(t,e,n,r)}function M(t,e,n,r){return Q(Z(e),t,n,r)}function U(t,e,n,r){return Q(function(t,e){for(var n,r,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)r=(n=t.charCodeAt(s))>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function B(t,e,n){return 0===e&&n===t.length?c(t):c(t.slice(e,n))}function W(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,s,a,l,u=t[o],c=null,h=u>239?4:u>223?3:u>191?2:1;if(o+h<=n)switch(h){case 1:u<128&&(c=u);break;case 2:128==(192&(i=t[o+1]))&&(l=(31&u)<<6|63&i)>127&&(c=l);break;case 3:i=t[o+1],s=t[o+2],128==(192&i)&&128==(192&s)&&(l=(15&u)<<12|(63&i)<<6|63&s)>2047&&(l<55296||l>57343)&&(c=l);break;case 4:i=t[o+1],s=t[o+2],a=t[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(l=(15&u)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&l<1114112&&(c=l);}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),o+=h;}return function(t){var e=t.length;if(e<=D)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=D));return n}(r)}y.TYPED_ARRAY_SUPPORT=void 0===r.TYPED_ARRAY_SUPPORT||r.TYPED_ARRAY_SUPPORT,g(),y.poolSize=8192,y._augment=function(t){return t.__proto__=y.prototype,t},y.from=function(t,e,n){return v(null,t,e,n)},y.TYPED_ARRAY_SUPPORT&&(y.prototype.__proto__=Uint8Array.prototype,y.__proto__=Uint8Array),y.alloc=function(t,e,n){return function(t,e,n,r){return m(e),e<=0?w(t,e):void 0!==n?"string"==typeof r?w(t,e).fill(n,r):w(t,e).fill(n):w(t,e)}(null,t,e,n)},y.allocUnsafe=function(t){return b(null,t)},y.allocUnsafeSlow=function(t){return b(null,t)},y.isBuffer=function(t){return null!=t&&(!!t._isBuffer||tt(t)||function(t){return "function"==typeof t.readFloatLE&&"function"==typeof t.slice&&tt(t.slice(0,0))}(t))},y.compare=function(t,e){if(!T(t)||!T(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},y.isEncoding=function(t){switch(String(t).toLowerCase()){case "hex":case "utf8":case "utf-8":case "ascii":case "latin1":case "binary":case "base64":case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":return  true;default:return  false}},y.concat=function(t,e){if(!p(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return y.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=y.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var i=t[n];if(!T(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(r,o),o+=i.length;}return r},y.byteLength=_,y.prototype._isBuffer=true,y.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)S(this,e,e+1);return this},y.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)S(this,e,e+3),S(this,e+1,e+2);return this},y.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)S(this,e,e+7),S(this,e+1,e+6),S(this,e+2,e+5),S(this,e+3,e+4);return this},y.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?W(this,0,t):R.apply(this,arguments)},y.prototype.equals=function(t){if(!T(t))throw new TypeError("Argument must be a Buffer");return this===t||0===y.compare(this,t)},y.prototype.inspect=function(){var t="";return this.length>0&&(t=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(t+=" ... ")),"<Buffer "+t+">"},y.prototype.compare=function(t,e,n,r,o){if(!T(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return  -1;if(e>=n)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),a=Math.min(i,s),l=this.slice(r,o),u=t.slice(e,n),c=0;c<a;++c)if(l[c]!==u[c]){i=l[c],s=u[c];break}return i<s?-1:s<i?1:0},y.prototype.includes=function(t,e,n){return  -1!==this.indexOf(t,e,n)},y.prototype.indexOf=function(t,e,n){return N(this,t,e,n,true)},y.prototype.lastIndexOf=function(t,e,n){return N(this,t,e,n,false)},y.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else {if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0);}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=false;;)switch(r){case "hex":return I(this,t,e,n);case "utf8":case "utf-8":return P(this,t,e,n);case "ascii":return O(this,t,e,n);case "latin1":case "binary":return L(this,t,e,n);case "base64":return M(this,t,e,n);case "ucs2":case "ucs-2":case "utf16le":case "utf-16le":return U(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=true;}},y.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var D=4096;function x(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function Y(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function k(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=J(t[i]);return o}function j(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function $(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function G(t,e,n,r,o,i){if(!T(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function q(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o);}function z(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255;}function F(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function H(t,e,n,r,o){return o||F(t,0,n,4),f(t,e,n,r,23,4),n+4}function K(t,e,n,r,o){return o||F(t,0,n,8),f(t,e,n,r,52,8),n+8}y.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),y.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=y.prototype;else {var o=e-t;n=new y(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t];}return n},y.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},y.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},y.prototype.readUInt8=function(t,e){return e||$(t,1,this.length),this[t]},y.prototype.readUInt16LE=function(t,e){return e||$(t,2,this.length),this[t]|this[t+1]<<8},y.prototype.readUInt16BE=function(t,e){return e||$(t,2,this.length),this[t]<<8|this[t+1]},y.prototype.readUInt32LE=function(t,e){return e||$(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},y.prototype.readUInt32BE=function(t,e){return e||$(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},y.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},y.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||$(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},y.prototype.readInt8=function(t,e){return e||$(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},y.prototype.readInt16LE=function(t,e){e||$(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},y.prototype.readInt16BE=function(t,e){e||$(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},y.prototype.readInt32LE=function(t,e){return e||$(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},y.prototype.readInt32BE=function(t,e){return e||$(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},y.prototype.readFloatLE=function(t,e){return e||$(t,4,this.length),h(this,t,true,23,4)},y.prototype.readFloatBE=function(t,e){return e||$(t,4,this.length),h(this,t,false,23,4)},y.prototype.readDoubleLE=function(t,e){return e||$(t,8,this.length),h(this,t,true,52,8)},y.prototype.readDoubleBE=function(t,e){return e||$(t,8,this.length),h(this,t,false,52,8)},y.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||G(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},y.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||G(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},y.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||G(this,t,e,1,255,0),y.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},y.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||G(this,t,e,2,65535,0),y.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):q(this,t,e,true),e+2},y.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||G(this,t,e,2,65535,0),y.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):q(this,t,e,false),e+2},y.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||G(this,t,e,4,4294967295,0),y.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):z(this,t,e,true),e+4},y.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||G(this,t,e,4,4294967295,0),y.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):z(this,t,e,false),e+4},y.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);G(this,t,e,n,o-1,-o);}var i=0,s=1,a=0;for(this[e]=255&t;++i<n&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s|0)-a&255;return e+n},y.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);G(this,t,e,n,o-1,-o);}var i=n-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s|0)-a&255;return e+n},y.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||G(this,t,e,1,127,-128),y.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},y.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||G(this,t,e,2,32767,-32768),y.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):q(this,t,e,true),e+2},y.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||G(this,t,e,2,32767,-32768),y.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):q(this,t,e,false),e+2},y.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||G(this,t,e,4,2147483647,-2147483648),y.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):z(this,t,e,true),e+4},y.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||G(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),y.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):z(this,t,e,false),e+4},y.prototype.writeFloatLE=function(t,e,n){return H(this,t,e,true,n)},y.prototype.writeFloatBE=function(t,e,n){return H(this,t,e,false,n)},y.prototype.writeDoubleLE=function(t,e,n){return K(this,t,e,true,n)},y.prototype.writeDoubleBE=function(t,e,n){return K(this,t,e,false,n)},y.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!y.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},y.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o);}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!y.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else "number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else {var s=T(t)?t:V(new y(t,r).toString()),a=s.length;for(i=0;i<n-e;++i)this[i+e]=s[i%a];}return this};var X=/[^+\/0-9A-Za-z-_]/g;function J(t){return t<16?"0"+t.toString(16):t.toString(16)}function V(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320);}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n);}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128);}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128);}else {if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128);}}return i}function Z(t){return function(t){var e,n,r,o,u,c;a||l();var h=t.length;if(h%4>0)throw new Error("Invalid string. Length must be a multiple of 4");u="="===t[h-2]?2:"="===t[h-1]?1:0,c=new s(3*h/4-u),r=u>0?h-4:h;var f=0;for(e=0,n=0;e<r;e+=4,n+=3)o=i[t.charCodeAt(e)]<<18|i[t.charCodeAt(e+1)]<<12|i[t.charCodeAt(e+2)]<<6|i[t.charCodeAt(e+3)],c[f++]=o>>16&255,c[f++]=o>>8&255,c[f++]=255&o;return 2===u?(o=i[t.charCodeAt(e)]<<2|i[t.charCodeAt(e+1)]>>4,c[f++]=255&o):1===u&&(o=i[t.charCodeAt(e)]<<10|i[t.charCodeAt(e+1)]<<4|i[t.charCodeAt(e+2)]>>2,c[f++]=o>>8&255,c[f++]=255&o),c}(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(X,"")).length<2)return "";for(;t.length%4!=0;)t+="=";return t}(t))}function Q(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}function tt(t){return !!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}function et(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{l(r.next(t));}catch(t){i(t);}}function a(t){try{l(r.throw(t));}catch(t){i(t);}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e);}))).then(s,a);}l((r=r.apply(t,[])).next());}))}"function"==typeof SuppressedError&&SuppressedError;class nt extends Error{constructor(t,e,...n){super(...n),Error.captureStackTrace&&Error.captureStackTrace(this,nt),this.name="PeraWalletConnectError",this.data=t,this.message=e;}}const rt=new class{constructor(t){this.listener=void 0,this.channel=t.channel;}setupListener({onReceiveMessage:t}){this.close(),this.listener=e=>{if("object"==typeof e.data)try{e.data.channel===this.channel&&t(e);}catch(t){console.error(t);}},window.addEventListener("message",this.listener);}sendMessage({message:t,targetWindow:e,origin:n,timeout:r=1e3}){setTimeout((()=>{const r={channel:this.channel,message:t};e.postMessage(r,{targetOrigin:n||"*"});}),r);}close(){this.listener&&(window.removeEventListener("message",this.listener),this.listener=void 0);}}({channel:"pera-web-wallet"}),ot=700,it=50;function st(){const t=document.querySelector('meta[name="name"]'),e=document.querySelector('meta[name="description"]');let{title:n}=document,r="";return t instanceof HTMLMetaElement&&(n=t.content),e instanceof HTMLMetaElement&&(r=e.content),{title:n,description:r,url:window.location.origin,favicon:at()[0]}}function at(){const t=document.getElementsByTagName("link"),e=[];for(let n=0;n<t.length;n++){const r=t[n],o=r.getAttribute("rel");if(o&&o.toLowerCase().indexOf("icon")>-1){const t=r.getAttribute("href");if(t&&-1===t.toLowerCase().indexOf("https:")&&-1===t.toLowerCase().indexOf("http:")&&0!==t.indexOf("//")){let n=`${window.location.protocol}//${window.location.host}`;if(0===t.indexOf("/"))n+=t;else {const e=window.location.pathname.split("/");e.pop();n+=`${e.join("/")}/${t}`;}e.push(n);}else if(0===(null==t?void 0:t.indexOf("//"))){const n=window.location.protocol+t;e.push(n);}else t&&e.push(t);}}return e}function lt(t){return new Promise(((e,n)=>{try{const r=window.open(t,"_blank");let o=0;const i=setInterval((()=>{if(o+=1,o===it)return clearInterval(i),void n(new nt({type:"MESSAGE_NOT_RECEIVED"},"Couldn't open Pera Wallet, please try again."));r&&(!0===r.closed&&(clearInterval(i),n(new nt({type:"OPERATION_CANCELLED"},"Operation cancelled by user"))),rt.sendMessage({message:{type:"TAB_OPEN"},origin:t,targetWindow:r}));}),ot);rt.setupListener({onReceiveMessage:t=>{"TAB_OPEN_RECEIVED"===t.data.message.type&&(clearInterval(i),e(r));}});}catch(t){n(t);}}))}const ut="pera-wallet-connect-modal-wrapper",ct="pera-wallet-redirect-modal-wrapper",ht="pera-wallet-sign-txn-toast-wrapper",ft="pera-wallet-sign-txn-modal-wrapper",dt="pera-wallet-modal";function pt(t){const e=document.createElement("div");return e.setAttribute("id",t),document.body.appendChild(e),e}function gt(){pt(ct).innerHTML="<pera-wallet-redirect-modal></pera-wallet-redirect-modal>";}function wt(){pt(ht).innerHTML="<pera-wallet-sign-txn-toast></pera-wallet-sign-txn-toast>";}function vt(t){const e=document.getElementById(t);e&&e.remove();}const mt={WALLET:"PeraWallet.Wallet",WALLETCONNECT:"walletconnect"};function bt(){return "undefined"==typeof localStorage?void 0:localStorage}function At(t,e){var n;null===(n=bt())||void 0===n||n.setItem(mt.WALLET,JSON.stringify({type:e||"pera-wallet",accounts:t,selectedAccount:t[0]}));}function Et(){var t;const e=null===(t=bt())||void 0===t?void 0:t.getItem(mt.WALLET);return e?JSON.parse(e):null}function Tt(){return new Promise(((t,e)=>{var n,r;try{null===(n=bt())||void 0===n||n.removeItem(mt.WALLETCONNECT),null===(r=bt())||void 0===r||r.removeItem(mt.WALLET),t(void 0);}catch(t){e(t);}}))}function _t(t){const e=t.slice();for(let t=e.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1));[e[t],e[n]]=[e[n],e[t]];}return e}const Rt="https://wc.perawallet.app/config.json";function St(){return function(t,e={}){return fetch(t,e).then((t=>t.json())).then((t=>t))}(Rt,{cache:"no-store"})}function Nt(){return et(this,void 0,void 0,(function*(){let t={bridgeURL:"",webWalletURL:"",isWebWalletAvailable:false,shouldDisplayNewBadge:false,shouldUseSound:true,silent:false,promoteMobile:false};try{const e=yield St();void 0!==e.web_wallet&&e.web_wallet_url&&(t.isWebWalletAvailable=e.web_wallet),void 0!==e.display_new_badge&&(t.shouldDisplayNewBadge=e.display_new_badge),void 0!==e.use_sound&&(t.shouldUseSound=e.use_sound),void 0!==e.silent&&(t.silent=e.silent),void 0!==e.promote_mobile&&(t.promoteMobile=e.promote_mobile),t=Object.assign(Object.assign({},t),{bridgeURL:_t(e.servers||[])[0]||"",webWalletURL:e.web_wallet_url||""});}catch(t){console.log(t);}return t}))}function Ct(t){return Uint8Array.from(window.atob(t),(t=>t.charCodeAt(0)))}function It(t,e){return {id:Date.now()*Math.pow(10,3)+Math.floor(Math.random()*Math.pow(10,3)),jsonrpc:"2.0",method:t,params:e}}function Pt(){return "undefined"!=typeof navigator}function Ot(){return Pt()&&/Android/i.test(navigator.userAgent)}function Lt(){return Pt()&&/iPhone|iPad|iPod/i.test(navigator.userAgent)}function Mt(){return Pt()&&/iPhone|iPod|Android/i.test(navigator.userAgent)}function Ut(){if(!Pt())return null;const{userAgent:t}=navigator;let e;return e=t.match(/DuckDuckGo/i)?"DuckDuckGo":t.match(/OPX/i)?"Opera GX":navigator.brave?"Brave":n.getParser(navigator.userAgent).getBrowserName(),e}const Bt="perawallet-wc://",Wt="https://perawallet.app/download/";function Dt(t){return {ROOT:`https://${t}`,CONNECT:`https://${t}/connect`,TRANSACTION_SIGN:`https://${t}/transaction/sign`}}function xt({method:t,signTxnRequestParams:e,signer:n,chainId:r,webWalletURL:o,resolve:i,reject:s}){const a=Dt(o);!function(){et(this,void 0,void 0,(function*(){try{const o=yield lt(a.TRANSACTION_SIGN);if(o){let i;"SIGN_TXN"===t?i={type:"SIGN_TXN",txn:e}:"SIGN_DATA"===t&&n&&r&&(i={type:"SIGN_DATA",data:e,signer:n,chainId:r}),i&&rt.sendMessage({message:i,origin:a.TRANSACTION_SIGN,targetWindow:o});}const l=setInterval((()=>{!0===(null==o?void 0:o.closed)&&(s(new nt({type:`${t}_CANCELLED`},"Transaction signing is cancelled by user.")),clearInterval(l));}),2e3);rt.setupListener({onReceiveMessage:e=>function({event:t,newPeraWalletTab:e,method:n,resolve:r,reject:o}){switch(t.data.message.type){case "SIGN_TXN_CALLBACK":null==e||e.close(),r(t.data.message.signedTxns.map((t=>Ct(t.signedTxn))));break;case "SIGN_DATA_CALLBACK":null==e||e.close(),r(t.data.message.signedData.map((t=>Ct(t.signedData))));break;case "SIGN_TXN_NETWORK_MISMATCH":o(new nt({type:`${n}_NETWORK_MISMATCH`,detail:t.data.message.error},t.data.message.error||"Network mismatch"));break;case "SIGN_TXN_CALLBACK_ERROR":null==e||e.close(),o(new nt({type:`${n}_CANCELLED`},t.data.message.error));break;case "SESSION_DISCONNECTED":null==e||e.close(),Tt(),o(new nt({type:"SESSION_DISCONNECTED",detail:t.data.message.error},t.data.message.error));}}({event:e,newPeraWalletTab:o,method:t,resolve:i,reject:s})});}catch(t){s(t);}}));}();}function Yt({webWalletURL:t,chainId:e,resolve:n,reject:r}){const o=Dt(t);return function(){return et(this,void 0,void 0,(function*(){try{const t=yield lt(o.CONNECT);t&&rt.sendMessage({message:{type:"CONNECT",data:Object.assign(Object.assign({},st()),{chainId:e})},origin:o.CONNECT,targetWindow:t});const s=setInterval((()=>{!0===(null==t?void 0:t.closed)&&(r(new nt({type:"CONNECT_CANCELLED"},"Connect is cancelled by user")),clearInterval(s),i());}),2e3);rt.setupListener({onReceiveMessage:e=>function({event:t,newPeraWalletTab:e,resolve:n,reject:r}){if(n&&"CONNECT_CALLBACK"===t.data.message.type){const r=t.data.message.data.addresses;At(r,"pera-wallet-web"),n(r),vt(ut),null==e||e.close();}else "CONNECT_NETWORK_MISMATCH"===t.data.message.type&&(r(new nt({type:"CONNECT_NETWORK_MISMATCH",detail:t.data.message.error},t.data.message.error||"Your wallet is connected to a different network to this dApp. Update your wallet to the correct network (MainNet or TestNet) to continue.")),vt(ut),null==e||e.close());}({event:e,newPeraWalletTab:t,resolve:n,reject:r})});}catch(t){i(),r(t);}}))};function i(){vt(ut);}}function kt({isWebWalletAvailable:t,shouldDisplayNewBadge:e,shouldUseSound:n,compactMode:r,promoteMobile:o,singleAccount:i,selectedAccount:s}){return {open:(a={isWebWalletAvailable:t,shouldDisplayNewBadge:e,shouldUseSound:n,compactMode:r,promoteMobile:o,singleAccount:i,selectedAccount:s},t=>{if(!document.getElementById(ut)){const e=pt(ut),n=`${t}&algorand=true`,{isWebWalletAvailable:r,shouldDisplayNewBadge:o,shouldUseSound:i,compactMode:s,promoteMobile:l,singleAccount:u,selectedAccount:c}=a;e.innerHTML=`<pera-wallet-connect-modal uri="${n}" is-web-wallet-avaliable="${r}" should-display-new-badge="${o}" should-use-sound="${i}" compact-mode="${s}" promote-mobile="${l}" single-account="${u}" selected-account="${c||""}"></pera-wallet-connect-modal>`;}}),close:()=>vt(ut)};var a;}class jt{constructor(t){this.bridge=(null==t?void 0:t.bridge)||"",this.connector=null,this.shouldShowSignTxnToast=void 0===(null==t?void 0:t.shouldShowSignTxnToast)||t.shouldShowSignTxnToast,this.chainId=null==t?void 0:t.chainId,this.compactMode=(null==t?void 0:t.compactMode)||false,this.singleAccount=(null==t?void 0:t.singleAccount)||false;}get platform(){return function(){const t=Et();let e=null;return "pera-wallet"===(null==t?void 0:t.type)?e="mobile":"pera-wallet-web"===(null==t?void 0:t.type)&&(e="web"),e}()}get isConnected(){var t;return "mobile"===this.platform?!!this.connector:"web"===this.platform&&!!(null===(t=Et())||void 0===t?void 0:t.accounts.length)}get isPeraDiscoverBrowser(){return this.checkIsPeraDiscoverBrowser()}connect(e){return new Promise(((n,r)=>et(this,void 0,void 0,(function*(){var o;try{if(null===(o=this.connector)||void 0===o?void 0:o.connected)try{yield this.connector.killSession();}catch(t){}const{isWebWalletAvailable:i,bridgeURL:s,webWalletURL:a,shouldDisplayNewBadge:l,shouldUseSound:u,promoteMobile:c}=yield Nt(),h=Yt({resolve:n,reject:r,webWalletURL:a,chainId:this.chainId,isCompactMode:this.compactMode});i&&(window.onWebWalletConnect=h),this.connector=new WalletConnect({bridge:this.bridge||s||"https://bridge.walletconnect.org",qrcodeModal:kt({isWebWalletAvailable:i,shouldDisplayNewBadge:l,shouldUseSound:u,compactMode:this.compactMode,promoteMobile:c,singleAccount:this.singleAccount,selectedAccount:null==e?void 0:e.selectedAccount})}),yield this.connector.createSession({chainId:this.chainId||4160}),function(t,e){var n,r,o,i;const s=document.getElementById(t),a=null===(r=null===(n=null==s?void 0:s.querySelector(t.replace("-wrapper","")))||void 0===n?void 0:n.shadowRoot)||void 0===r?void 0:r.querySelector(`.${dt}`),l=null===(i=null===(o=null==a?void 0:a.querySelector("pera-wallet-modal-header"))||void 0===o?void 0:o.shadowRoot)||void 0===i?void 0:i.getElementById("pera-wallet-modal-header-close-button");null==l||l.addEventListener("click",(()=>{e(),vt(t);}));}(ut,(()=>r(new nt({type:"CONNECT_MODAL_CLOSED"},"Connect modal is closed by user")))),this.connector.on("connect",((t,e)=>{var o,i;t&&r(t),n((null===(o=this.connector)||void 0===o?void 0:o.accounts)||[]),At((null===(i=this.connector)||void 0===i?void 0:i.accounts)||[]);}));}catch(t){console.log(t),r(new nt({type:"SESSION_CONNECT",detail:t},t.message||"There was an error while connecting to Pera Wallet"));}}))))}reconnectSession(){return new Promise(((e,n)=>et(this,void 0,void 0,(function*(){var r,o;try{const i=Et();if(!i)return void e([]);if("pera-wallet-web"===(null==i?void 0:i.type)){const{isWebWalletAvailable:t}=yield Nt();t?e(i.accounts||[]):n(new nt({type:"SESSION_RECONNECT",detail:"Pera Web is not available"},"Pera Web is not available"));}this.connector&&e(this.connector.accounts||[]),this.bridge=(null===(r=function(){var t;const e=null===(t=bt())||void 0===t?void 0:t.getItem(mt.WALLETCONNECT);return e?JSON.parse(e):null}())||void 0===r?void 0:r.bridge)||"",this.bridge&&(this.connector=new WalletConnect({bridge:this.bridge}),e((null===(o=this.connector)||void 0===o?void 0:o.accounts)||[])),this.isConnected||e([]);}catch(t){yield this.disconnect(),n(new nt({type:"SESSION_RECONNECT",detail:t},t.message||"There was an error while reconnecting to Pera Wallet"));}}))))}disconnect(){var t;return et(this,void 0,void 0,(function*(){let e;this.isConnected&&"mobile"===this.platform&&(e=null===(t=this.connector)||void 0===t?void 0:t.killSession(),null==e||e.then((()=>{this.connector=null;}))),yield Tt();}))}signTransactionWithMobile(t){return et(this,void 0,void 0,(function*(){const e=It("algo_signTxn",[t]);try{try{const{silent:t}=yield Nt(),n=(yield this.connector.sendCustomRequest(e,{forcePushNotification:!t})).filter(Boolean);return "string"==typeof n[0]?n.map(Ct):n.map((t=>Uint8Array.from(t)))}catch(t){return yield Promise.reject(new nt({type:"SIGN_TRANSACTIONS",detail:t},t.message||"Failed to sign transaction"))}}finally{vt(ct),vt(ht);}}))}signTransactionWithWeb(t,e){return new Promise(((n,r)=>xt({signTxnRequestParams:t,webWalletURL:e,method:"SIGN_TXN",resolve:n,reject:r})))}signDataWithMobile({data:t,signer:e,chainId:n}){return et(this,void 0,void 0,(function*(){const r=It("algo_signData",t.map((t=>Object.assign(Object.assign({},t),{signer:e,chainId:n}))));try{try{const{silent:t}=yield Nt(),e=(yield this.connector.sendCustomRequest(r,{forcePushNotification:!t})).filter(Boolean);return "string"==typeof e[0]?e.map(Ct):e.map((t=>Uint8Array.from(t)))}catch(t){return yield Promise.reject(new nt({type:"SIGN_TRANSACTIONS",detail:t},t.message||"Failed to sign transaction"))}}finally{vt(ct),vt(ht);}}))}signDataWithWeb({data:t,signer:e,chainId:n,webWalletURL:r}){return new Promise(((o,i)=>xt({method:"SIGN_DATA",signTxnRequestParams:t,signer:e,chainId:n,webWalletURL:r,resolve:o,reject:i})))}checkIsPeraDiscoverBrowser(){return window.navigator.userAgent.includes("pera")}signTransaction(t,n){return et(this,void 0,void 0,(function*(){if("mobile"===this.platform&&(Mt()?gt():!Mt()&&this.shouldShowSignTxnToast&&wt(),!this.connector))throw new Error("PeraWalletConnect was not initialized correctly.");const r=t.flatMap((t=>t.map((t=>function(t,n){let r;n&&!(t.signers||[]).includes(n)&&(r=[]);const o={txn:(i=t.txn,Buffer.from(algosdk.encodeUnsignedTransaction(i)).toString("base64"))};var i;return Array.isArray(r)&&(o.signers=r),t.authAddr&&(o.authAddr=t.authAddr),t.message&&(o.message=t.message),t.msig&&(o.msig=t.msig),o}(t,n)))));if("web"===this.platform){const{webWalletURL:t}=yield Nt();return this.signTransactionWithWeb(r,t)}return this.signTransactionWithMobile(r)}))}signData(t,e){return et(this,void 0,void 0,(function*(){const n=this.chainId||4160;if("mobile"===this.platform&&(Mt()?gt():!Mt()&&this.shouldShowSignTxnToast&&wt(),!this.connector))throw new Error("PeraWalletConnect was not initialized correctly.");if("web"===this.platform){const{webWalletURL:r}=yield Nt();return this.signDataWithWeb({data:t,signer:e,chainId:n,webWalletURL:r})}const r=t.map((t=>Object.assign(Object.assign({},t),{data:Buffer.from(t.data).toString("base64")})));return this.signDataWithMobile({data:r,signer:e,chainId:n})}))}}"undefined"!=typeof window&&(window.global=window,window.Buffer=window.Buffer||y,import('./App-428f5096-DIIbCoke.js'));

const peraWallet = new jt();
const walletButton = document.getElementById('wallet-button');
const qrContainer = document.getElementById('qr-code-container');

walletButton.addEventListener('click', async () => {
  try {
    qrContainer.style.display = 'block';
    const accounts = await peraWallet.connect();
    qrContainer.style.display = 'none';
    walletButton.textContent = 'Wallet Connected';
    console.log('Connected accounts:', accounts);
  } catch (error) {
    console.error('Wallet connection failed:', error);
    qrContainer.style.display = 'none';
    alert('Failed to connect wallet. Check the console for details.');
  }
});

export { Bt as B, Lt as L, Mt as M, Ot as O, Ut as U, Wt as W, ct as c, dt as d, ft as f, getDefaultExportFromCjs as g, ht as h, ut as u, vt as v };
